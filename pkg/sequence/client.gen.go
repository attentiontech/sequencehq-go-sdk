// Package sequence provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sequence

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AggregationType.
const (
	COUNT  AggregationType = "COUNT"
	CUSTOM AggregationType = "CUSTOM"
	SUM    AggregationType = "SUM"
	UNIQUE AggregationType = "UNIQUE"
)

// Defines values for AssetFormat.
const (
	JPEG AssetFormat = "JPEG"
	PDF  AssetFormat = "PDF"
	PNG  AssetFormat = "PNG"
)

// Defines values for AssetType.
const (
	DOCUMENT AssetType = "DOCUMENT"
	IMAGE    AssetType = "IMAGE"
)

// Defines values for BillingFrequency.
const (
	BillingFrequencyHALFYEARLY BillingFrequency = "HALF_YEARLY"
	BillingFrequencyMONTHLY    BillingFrequency = "MONTHLY"
	BillingFrequencyONDEMAND   BillingFrequency = "ON_DEMAND"
	BillingFrequencyONETIME    BillingFrequency = "ONE_TIME"
	BillingFrequencyQUARTERLY  BillingFrequency = "QUARTERLY"
	BillingFrequencyYEARLY     BillingFrequency = "YEARLY"
)

// Defines values for BillingType.
const (
	INADVANCE BillingType = "IN_ADVANCE"
	INARREARS BillingType = "IN_ARREARS"
)

// Defines values for ContactBillingPreference.
const (
	ContactBillingPreferenceNONE     ContactBillingPreference = "NONE"
	ContactBillingPreferencePRIMARY  ContactBillingPreference = "PRIMARY"
	ContactBillingPreferenceSTANDARD ContactBillingPreference = "STANDARD"
)

// Defines values for CountryCode.
const (
	CountryCodeAD CountryCode = "AD"
	CountryCodeAE CountryCode = "AE"
	CountryCodeAF CountryCode = "AF"
	CountryCodeAG CountryCode = "AG"
	CountryCodeAI CountryCode = "AI"
	CountryCodeAL CountryCode = "AL"
	CountryCodeAM CountryCode = "AM"
	CountryCodeAO CountryCode = "AO"
	CountryCodeAQ CountryCode = "AQ"
	CountryCodeAR CountryCode = "AR"
	CountryCodeAS CountryCode = "AS"
	CountryCodeAT CountryCode = "AT"
	CountryCodeAU CountryCode = "AU"
	CountryCodeAW CountryCode = "AW"
	CountryCodeAX CountryCode = "AX"
	CountryCodeAZ CountryCode = "AZ"
	CountryCodeBA CountryCode = "BA"
	CountryCodeBB CountryCode = "BB"
	CountryCodeBD CountryCode = "BD"
	CountryCodeBE CountryCode = "BE"
	CountryCodeBF CountryCode = "BF"
	CountryCodeBG CountryCode = "BG"
	CountryCodeBH CountryCode = "BH"
	CountryCodeBI CountryCode = "BI"
	CountryCodeBJ CountryCode = "BJ"
	CountryCodeBL CountryCode = "BL"
	CountryCodeBM CountryCode = "BM"
	CountryCodeBN CountryCode = "BN"
	CountryCodeBO CountryCode = "BO"
	CountryCodeBQ CountryCode = "BQ"
	CountryCodeBR CountryCode = "BR"
	CountryCodeBS CountryCode = "BS"
	CountryCodeBT CountryCode = "BT"
	CountryCodeBV CountryCode = "BV"
	CountryCodeBW CountryCode = "BW"
	CountryCodeBY CountryCode = "BY"
	CountryCodeBZ CountryCode = "BZ"
	CountryCodeCA CountryCode = "CA"
	CountryCodeCC CountryCode = "CC"
	CountryCodeCD CountryCode = "CD"
	CountryCodeCF CountryCode = "CF"
	CountryCodeCG CountryCode = "CG"
	CountryCodeCH CountryCode = "CH"
	CountryCodeCI CountryCode = "CI"
	CountryCodeCK CountryCode = "CK"
	CountryCodeCL CountryCode = "CL"
	CountryCodeCM CountryCode = "CM"
	CountryCodeCN CountryCode = "CN"
	CountryCodeCO CountryCode = "CO"
	CountryCodeCR CountryCode = "CR"
	CountryCodeCU CountryCode = "CU"
	CountryCodeCV CountryCode = "CV"
	CountryCodeCW CountryCode = "CW"
	CountryCodeCX CountryCode = "CX"
	CountryCodeCY CountryCode = "CY"
	CountryCodeCZ CountryCode = "CZ"
	CountryCodeDE CountryCode = "DE"
	CountryCodeDJ CountryCode = "DJ"
	CountryCodeDK CountryCode = "DK"
	CountryCodeDM CountryCode = "DM"
	CountryCodeDO CountryCode = "DO"
	CountryCodeDZ CountryCode = "DZ"
	CountryCodeEC CountryCode = "EC"
	CountryCodeEE CountryCode = "EE"
	CountryCodeEG CountryCode = "EG"
	CountryCodeEH CountryCode = "EH"
	CountryCodeER CountryCode = "ER"
	CountryCodeES CountryCode = "ES"
	CountryCodeET CountryCode = "ET"
	CountryCodeFI CountryCode = "FI"
	CountryCodeFJ CountryCode = "FJ"
	CountryCodeFK CountryCode = "FK"
	CountryCodeFM CountryCode = "FM"
	CountryCodeFO CountryCode = "FO"
	CountryCodeFR CountryCode = "FR"
	CountryCodeGA CountryCode = "GA"
	CountryCodeGB CountryCode = "GB"
	CountryCodeGD CountryCode = "GD"
	CountryCodeGE CountryCode = "GE"
	CountryCodeGF CountryCode = "GF"
	CountryCodeGG CountryCode = "GG"
	CountryCodeGH CountryCode = "GH"
	CountryCodeGI CountryCode = "GI"
	CountryCodeGL CountryCode = "GL"
	CountryCodeGM CountryCode = "GM"
	CountryCodeGN CountryCode = "GN"
	CountryCodeGP CountryCode = "GP"
	CountryCodeGQ CountryCode = "GQ"
	CountryCodeGR CountryCode = "GR"
	CountryCodeGS CountryCode = "GS"
	CountryCodeGT CountryCode = "GT"
	CountryCodeGU CountryCode = "GU"
	CountryCodeGW CountryCode = "GW"
	CountryCodeGY CountryCode = "GY"
	CountryCodeHK CountryCode = "HK"
	CountryCodeHM CountryCode = "HM"
	CountryCodeHN CountryCode = "HN"
	CountryCodeHR CountryCode = "HR"
	CountryCodeHT CountryCode = "HT"
	CountryCodeHU CountryCode = "HU"
	CountryCodeID CountryCode = "ID"
	CountryCodeIE CountryCode = "IE"
	CountryCodeIL CountryCode = "IL"
	CountryCodeIM CountryCode = "IM"
	CountryCodeIN CountryCode = "IN"
	CountryCodeIO CountryCode = "IO"
	CountryCodeIQ CountryCode = "IQ"
	CountryCodeIR CountryCode = "IR"
	CountryCodeIS CountryCode = "IS"
	CountryCodeIT CountryCode = "IT"
	CountryCodeJE CountryCode = "JE"
	CountryCodeJM CountryCode = "JM"
	CountryCodeJO CountryCode = "JO"
	CountryCodeJP CountryCode = "JP"
	CountryCodeKE CountryCode = "KE"
	CountryCodeKG CountryCode = "KG"
	CountryCodeKH CountryCode = "KH"
	CountryCodeKI CountryCode = "KI"
	CountryCodeKM CountryCode = "KM"
	CountryCodeKN CountryCode = "KN"
	CountryCodeKP CountryCode = "KP"
	CountryCodeKR CountryCode = "KR"
	CountryCodeKW CountryCode = "KW"
	CountryCodeKY CountryCode = "KY"
	CountryCodeKZ CountryCode = "KZ"
	CountryCodeLA CountryCode = "LA"
	CountryCodeLB CountryCode = "LB"
	CountryCodeLC CountryCode = "LC"
	CountryCodeLI CountryCode = "LI"
	CountryCodeLK CountryCode = "LK"
	CountryCodeLR CountryCode = "LR"
	CountryCodeLS CountryCode = "LS"
	CountryCodeLT CountryCode = "LT"
	CountryCodeLU CountryCode = "LU"
	CountryCodeLV CountryCode = "LV"
	CountryCodeLY CountryCode = "LY"
	CountryCodeMA CountryCode = "MA"
	CountryCodeMC CountryCode = "MC"
	CountryCodeMD CountryCode = "MD"
	CountryCodeME CountryCode = "ME"
	CountryCodeMF CountryCode = "MF"
	CountryCodeMG CountryCode = "MG"
	CountryCodeMH CountryCode = "MH"
	CountryCodeMK CountryCode = "MK"
	CountryCodeML CountryCode = "ML"
	CountryCodeMM CountryCode = "MM"
	CountryCodeMN CountryCode = "MN"
	CountryCodeMO CountryCode = "MO"
	CountryCodeMP CountryCode = "MP"
	CountryCodeMQ CountryCode = "MQ"
	CountryCodeMR CountryCode = "MR"
	CountryCodeMS CountryCode = "MS"
	CountryCodeMT CountryCode = "MT"
	CountryCodeMU CountryCode = "MU"
	CountryCodeMV CountryCode = "MV"
	CountryCodeMW CountryCode = "MW"
	CountryCodeMX CountryCode = "MX"
	CountryCodeMY CountryCode = "MY"
	CountryCodeMZ CountryCode = "MZ"
	CountryCodeNA CountryCode = "NA"
	CountryCodeNC CountryCode = "NC"
	CountryCodeNE CountryCode = "NE"
	CountryCodeNF CountryCode = "NF"
	CountryCodeNG CountryCode = "NG"
	CountryCodeNI CountryCode = "NI"
	CountryCodeNL CountryCode = "NL"
	CountryCodeNO CountryCode = "NO"
	CountryCodeNP CountryCode = "NP"
	CountryCodeNR CountryCode = "NR"
	CountryCodeNU CountryCode = "NU"
	CountryCodeNZ CountryCode = "NZ"
	CountryCodeOM CountryCode = "OM"
	CountryCodePA CountryCode = "PA"
	CountryCodePE CountryCode = "PE"
	CountryCodePF CountryCode = "PF"
	CountryCodePG CountryCode = "PG"
	CountryCodePH CountryCode = "PH"
	CountryCodePK CountryCode = "PK"
	CountryCodePL CountryCode = "PL"
	CountryCodePM CountryCode = "PM"
	CountryCodePN CountryCode = "PN"
	CountryCodePR CountryCode = "PR"
	CountryCodePS CountryCode = "PS"
	CountryCodePT CountryCode = "PT"
	CountryCodePW CountryCode = "PW"
	CountryCodePY CountryCode = "PY"
	CountryCodeQA CountryCode = "QA"
	CountryCodeRE CountryCode = "RE"
	CountryCodeRO CountryCode = "RO"
	CountryCodeRS CountryCode = "RS"
	CountryCodeRU CountryCode = "RU"
	CountryCodeRW CountryCode = "RW"
	CountryCodeSA CountryCode = "SA"
	CountryCodeSB CountryCode = "SB"
	CountryCodeSC CountryCode = "SC"
	CountryCodeSD CountryCode = "SD"
	CountryCodeSE CountryCode = "SE"
	CountryCodeSG CountryCode = "SG"
	CountryCodeSH CountryCode = "SH"
	CountryCodeSI CountryCode = "SI"
	CountryCodeSJ CountryCode = "SJ"
	CountryCodeSK CountryCode = "SK"
	CountryCodeSL CountryCode = "SL"
	CountryCodeSM CountryCode = "SM"
	CountryCodeSN CountryCode = "SN"
	CountryCodeSO CountryCode = "SO"
	CountryCodeSR CountryCode = "SR"
	CountryCodeSS CountryCode = "SS"
	CountryCodeST CountryCode = "ST"
	CountryCodeSV CountryCode = "SV"
	CountryCodeSX CountryCode = "SX"
	CountryCodeSY CountryCode = "SY"
	CountryCodeSZ CountryCode = "SZ"
	CountryCodeTC CountryCode = "TC"
	CountryCodeTD CountryCode = "TD"
	CountryCodeTF CountryCode = "TF"
	CountryCodeTG CountryCode = "TG"
	CountryCodeTH CountryCode = "TH"
	CountryCodeTJ CountryCode = "TJ"
	CountryCodeTK CountryCode = "TK"
	CountryCodeTL CountryCode = "TL"
	CountryCodeTM CountryCode = "TM"
	CountryCodeTN CountryCode = "TN"
	CountryCodeTO CountryCode = "TO"
	CountryCodeTR CountryCode = "TR"
	CountryCodeTT CountryCode = "TT"
	CountryCodeTV CountryCode = "TV"
	CountryCodeTW CountryCode = "TW"
	CountryCodeTZ CountryCode = "TZ"
	CountryCodeUA CountryCode = "UA"
	CountryCodeUG CountryCode = "UG"
	CountryCodeUM CountryCode = "UM"
	CountryCodeUS CountryCode = "US"
	CountryCodeUY CountryCode = "UY"
	CountryCodeUZ CountryCode = "UZ"
	CountryCodeVA CountryCode = "VA"
	CountryCodeVC CountryCode = "VC"
	CountryCodeVE CountryCode = "VE"
	CountryCodeVG CountryCode = "VG"
	CountryCodeVI CountryCode = "VI"
	CountryCodeVN CountryCode = "VN"
	CountryCodeVU CountryCode = "VU"
	CountryCodeWF CountryCode = "WF"
	CountryCodeWS CountryCode = "WS"
	CountryCodeXK CountryCode = "XK"
	CountryCodeYE CountryCode = "YE"
	CountryCodeYT CountryCode = "YT"
	CountryCodeZA CountryCode = "ZA"
	CountryCodeZM CountryCode = "ZM"
	CountryCodeZW CountryCode = "ZW"
)

// Defines values for CountryCode1.
const (
	CountryCode1AD CountryCode1 = "AD"
	CountryCode1AE CountryCode1 = "AE"
	CountryCode1AF CountryCode1 = "AF"
	CountryCode1AG CountryCode1 = "AG"
	CountryCode1AI CountryCode1 = "AI"
	CountryCode1AL CountryCode1 = "AL"
	CountryCode1AM CountryCode1 = "AM"
	CountryCode1AO CountryCode1 = "AO"
	CountryCode1AQ CountryCode1 = "AQ"
	CountryCode1AR CountryCode1 = "AR"
	CountryCode1AS CountryCode1 = "AS"
	CountryCode1AT CountryCode1 = "AT"
	CountryCode1AU CountryCode1 = "AU"
	CountryCode1AW CountryCode1 = "AW"
	CountryCode1AX CountryCode1 = "AX"
	CountryCode1AZ CountryCode1 = "AZ"
	CountryCode1BA CountryCode1 = "BA"
	CountryCode1BB CountryCode1 = "BB"
	CountryCode1BD CountryCode1 = "BD"
	CountryCode1BE CountryCode1 = "BE"
	CountryCode1BF CountryCode1 = "BF"
	CountryCode1BG CountryCode1 = "BG"
	CountryCode1BH CountryCode1 = "BH"
	CountryCode1BI CountryCode1 = "BI"
	CountryCode1BJ CountryCode1 = "BJ"
	CountryCode1BL CountryCode1 = "BL"
	CountryCode1BM CountryCode1 = "BM"
	CountryCode1BN CountryCode1 = "BN"
	CountryCode1BO CountryCode1 = "BO"
	CountryCode1BQ CountryCode1 = "BQ"
	CountryCode1BR CountryCode1 = "BR"
	CountryCode1BS CountryCode1 = "BS"
	CountryCode1BT CountryCode1 = "BT"
	CountryCode1BV CountryCode1 = "BV"
	CountryCode1BW CountryCode1 = "BW"
	CountryCode1BY CountryCode1 = "BY"
	CountryCode1BZ CountryCode1 = "BZ"
	CountryCode1CA CountryCode1 = "CA"
	CountryCode1CC CountryCode1 = "CC"
	CountryCode1CD CountryCode1 = "CD"
	CountryCode1CF CountryCode1 = "CF"
	CountryCode1CG CountryCode1 = "CG"
	CountryCode1CH CountryCode1 = "CH"
	CountryCode1CI CountryCode1 = "CI"
	CountryCode1CK CountryCode1 = "CK"
	CountryCode1CL CountryCode1 = "CL"
	CountryCode1CM CountryCode1 = "CM"
	CountryCode1CN CountryCode1 = "CN"
	CountryCode1CO CountryCode1 = "CO"
	CountryCode1CR CountryCode1 = "CR"
	CountryCode1CU CountryCode1 = "CU"
	CountryCode1CV CountryCode1 = "CV"
	CountryCode1CW CountryCode1 = "CW"
	CountryCode1CX CountryCode1 = "CX"
	CountryCode1CY CountryCode1 = "CY"
	CountryCode1CZ CountryCode1 = "CZ"
	CountryCode1DE CountryCode1 = "DE"
	CountryCode1DJ CountryCode1 = "DJ"
	CountryCode1DK CountryCode1 = "DK"
	CountryCode1DM CountryCode1 = "DM"
	CountryCode1DO CountryCode1 = "DO"
	CountryCode1DZ CountryCode1 = "DZ"
	CountryCode1EC CountryCode1 = "EC"
	CountryCode1EE CountryCode1 = "EE"
	CountryCode1EG CountryCode1 = "EG"
	CountryCode1EH CountryCode1 = "EH"
	CountryCode1ER CountryCode1 = "ER"
	CountryCode1ES CountryCode1 = "ES"
	CountryCode1ET CountryCode1 = "ET"
	CountryCode1FI CountryCode1 = "FI"
	CountryCode1FJ CountryCode1 = "FJ"
	CountryCode1FK CountryCode1 = "FK"
	CountryCode1FM CountryCode1 = "FM"
	CountryCode1FO CountryCode1 = "FO"
	CountryCode1FR CountryCode1 = "FR"
	CountryCode1GA CountryCode1 = "GA"
	CountryCode1GB CountryCode1 = "GB"
	CountryCode1GD CountryCode1 = "GD"
	CountryCode1GE CountryCode1 = "GE"
	CountryCode1GF CountryCode1 = "GF"
	CountryCode1GG CountryCode1 = "GG"
	CountryCode1GH CountryCode1 = "GH"
	CountryCode1GI CountryCode1 = "GI"
	CountryCode1GL CountryCode1 = "GL"
	CountryCode1GM CountryCode1 = "GM"
	CountryCode1GN CountryCode1 = "GN"
	CountryCode1GP CountryCode1 = "GP"
	CountryCode1GQ CountryCode1 = "GQ"
	CountryCode1GR CountryCode1 = "GR"
	CountryCode1GS CountryCode1 = "GS"
	CountryCode1GT CountryCode1 = "GT"
	CountryCode1GU CountryCode1 = "GU"
	CountryCode1GW CountryCode1 = "GW"
	CountryCode1GY CountryCode1 = "GY"
	CountryCode1HK CountryCode1 = "HK"
	CountryCode1HM CountryCode1 = "HM"
	CountryCode1HN CountryCode1 = "HN"
	CountryCode1HR CountryCode1 = "HR"
	CountryCode1HT CountryCode1 = "HT"
	CountryCode1HU CountryCode1 = "HU"
	CountryCode1ID CountryCode1 = "ID"
	CountryCode1IE CountryCode1 = "IE"
	CountryCode1IL CountryCode1 = "IL"
	CountryCode1IM CountryCode1 = "IM"
	CountryCode1IN CountryCode1 = "IN"
	CountryCode1IO CountryCode1 = "IO"
	CountryCode1IQ CountryCode1 = "IQ"
	CountryCode1IR CountryCode1 = "IR"
	CountryCode1IS CountryCode1 = "IS"
	CountryCode1IT CountryCode1 = "IT"
	CountryCode1JE CountryCode1 = "JE"
	CountryCode1JM CountryCode1 = "JM"
	CountryCode1JO CountryCode1 = "JO"
	CountryCode1JP CountryCode1 = "JP"
	CountryCode1KE CountryCode1 = "KE"
	CountryCode1KG CountryCode1 = "KG"
	CountryCode1KH CountryCode1 = "KH"
	CountryCode1KI CountryCode1 = "KI"
	CountryCode1KM CountryCode1 = "KM"
	CountryCode1KN CountryCode1 = "KN"
	CountryCode1KP CountryCode1 = "KP"
	CountryCode1KR CountryCode1 = "KR"
	CountryCode1KW CountryCode1 = "KW"
	CountryCode1KY CountryCode1 = "KY"
	CountryCode1KZ CountryCode1 = "KZ"
	CountryCode1LA CountryCode1 = "LA"
	CountryCode1LB CountryCode1 = "LB"
	CountryCode1LC CountryCode1 = "LC"
	CountryCode1LI CountryCode1 = "LI"
	CountryCode1LK CountryCode1 = "LK"
	CountryCode1LR CountryCode1 = "LR"
	CountryCode1LS CountryCode1 = "LS"
	CountryCode1LT CountryCode1 = "LT"
	CountryCode1LU CountryCode1 = "LU"
	CountryCode1LV CountryCode1 = "LV"
	CountryCode1LY CountryCode1 = "LY"
	CountryCode1MA CountryCode1 = "MA"
	CountryCode1MC CountryCode1 = "MC"
	CountryCode1MD CountryCode1 = "MD"
	CountryCode1ME CountryCode1 = "ME"
	CountryCode1MF CountryCode1 = "MF"
	CountryCode1MG CountryCode1 = "MG"
	CountryCode1MH CountryCode1 = "MH"
	CountryCode1MK CountryCode1 = "MK"
	CountryCode1ML CountryCode1 = "ML"
	CountryCode1MM CountryCode1 = "MM"
	CountryCode1MN CountryCode1 = "MN"
	CountryCode1MO CountryCode1 = "MO"
	CountryCode1MP CountryCode1 = "MP"
	CountryCode1MQ CountryCode1 = "MQ"
	CountryCode1MR CountryCode1 = "MR"
	CountryCode1MS CountryCode1 = "MS"
	CountryCode1MT CountryCode1 = "MT"
	CountryCode1MU CountryCode1 = "MU"
	CountryCode1MV CountryCode1 = "MV"
	CountryCode1MW CountryCode1 = "MW"
	CountryCode1MX CountryCode1 = "MX"
	CountryCode1MY CountryCode1 = "MY"
	CountryCode1MZ CountryCode1 = "MZ"
	CountryCode1NA CountryCode1 = "NA"
	CountryCode1NC CountryCode1 = "NC"
	CountryCode1NE CountryCode1 = "NE"
	CountryCode1NF CountryCode1 = "NF"
	CountryCode1NG CountryCode1 = "NG"
	CountryCode1NI CountryCode1 = "NI"
	CountryCode1NL CountryCode1 = "NL"
	CountryCode1NO CountryCode1 = "NO"
	CountryCode1NP CountryCode1 = "NP"
	CountryCode1NR CountryCode1 = "NR"
	CountryCode1NU CountryCode1 = "NU"
	CountryCode1NZ CountryCode1 = "NZ"
	CountryCode1OM CountryCode1 = "OM"
	CountryCode1PA CountryCode1 = "PA"
	CountryCode1PE CountryCode1 = "PE"
	CountryCode1PF CountryCode1 = "PF"
	CountryCode1PG CountryCode1 = "PG"
	CountryCode1PH CountryCode1 = "PH"
	CountryCode1PK CountryCode1 = "PK"
	CountryCode1PL CountryCode1 = "PL"
	CountryCode1PM CountryCode1 = "PM"
	CountryCode1PN CountryCode1 = "PN"
	CountryCode1PR CountryCode1 = "PR"
	CountryCode1PS CountryCode1 = "PS"
	CountryCode1PT CountryCode1 = "PT"
	CountryCode1PW CountryCode1 = "PW"
	CountryCode1PY CountryCode1 = "PY"
	CountryCode1QA CountryCode1 = "QA"
	CountryCode1RE CountryCode1 = "RE"
	CountryCode1RO CountryCode1 = "RO"
	CountryCode1RS CountryCode1 = "RS"
	CountryCode1RU CountryCode1 = "RU"
	CountryCode1RW CountryCode1 = "RW"
	CountryCode1SA CountryCode1 = "SA"
	CountryCode1SB CountryCode1 = "SB"
	CountryCode1SC CountryCode1 = "SC"
	CountryCode1SD CountryCode1 = "SD"
	CountryCode1SE CountryCode1 = "SE"
	CountryCode1SG CountryCode1 = "SG"
	CountryCode1SH CountryCode1 = "SH"
	CountryCode1SI CountryCode1 = "SI"
	CountryCode1SJ CountryCode1 = "SJ"
	CountryCode1SK CountryCode1 = "SK"
	CountryCode1SL CountryCode1 = "SL"
	CountryCode1SM CountryCode1 = "SM"
	CountryCode1SN CountryCode1 = "SN"
	CountryCode1SO CountryCode1 = "SO"
	CountryCode1SR CountryCode1 = "SR"
	CountryCode1SS CountryCode1 = "SS"
	CountryCode1ST CountryCode1 = "ST"
	CountryCode1SV CountryCode1 = "SV"
	CountryCode1SX CountryCode1 = "SX"
	CountryCode1SY CountryCode1 = "SY"
	CountryCode1SZ CountryCode1 = "SZ"
	CountryCode1TC CountryCode1 = "TC"
	CountryCode1TD CountryCode1 = "TD"
	CountryCode1TF CountryCode1 = "TF"
	CountryCode1TG CountryCode1 = "TG"
	CountryCode1TH CountryCode1 = "TH"
	CountryCode1TJ CountryCode1 = "TJ"
	CountryCode1TK CountryCode1 = "TK"
	CountryCode1TL CountryCode1 = "TL"
	CountryCode1TM CountryCode1 = "TM"
	CountryCode1TN CountryCode1 = "TN"
	CountryCode1TO CountryCode1 = "TO"
	CountryCode1TR CountryCode1 = "TR"
	CountryCode1TT CountryCode1 = "TT"
	CountryCode1TV CountryCode1 = "TV"
	CountryCode1TW CountryCode1 = "TW"
	CountryCode1TZ CountryCode1 = "TZ"
	CountryCode1UA CountryCode1 = "UA"
	CountryCode1UG CountryCode1 = "UG"
	CountryCode1UM CountryCode1 = "UM"
	CountryCode1US CountryCode1 = "US"
	CountryCode1UY CountryCode1 = "UY"
	CountryCode1UZ CountryCode1 = "UZ"
	CountryCode1VA CountryCode1 = "VA"
	CountryCode1VC CountryCode1 = "VC"
	CountryCode1VE CountryCode1 = "VE"
	CountryCode1VG CountryCode1 = "VG"
	CountryCode1VI CountryCode1 = "VI"
	CountryCode1VN CountryCode1 = "VN"
	CountryCode1VU CountryCode1 = "VU"
	CountryCode1WF CountryCode1 = "WF"
	CountryCode1WS CountryCode1 = "WS"
	CountryCode1XK CountryCode1 = "XK"
	CountryCode1YE CountryCode1 = "YE"
	CountryCode1YT CountryCode1 = "YT"
	CountryCode1ZA CountryCode1 = "ZA"
	CountryCode1ZM CountryCode1 = "ZM"
	CountryCode1ZW CountryCode1 = "ZW"
)

// Defines values for CountryCode2.
const (
	CountryCode2AD CountryCode2 = "AD"
	CountryCode2AE CountryCode2 = "AE"
	CountryCode2AF CountryCode2 = "AF"
	CountryCode2AG CountryCode2 = "AG"
	CountryCode2AI CountryCode2 = "AI"
	CountryCode2AL CountryCode2 = "AL"
	CountryCode2AM CountryCode2 = "AM"
	CountryCode2AO CountryCode2 = "AO"
	CountryCode2AQ CountryCode2 = "AQ"
	CountryCode2AR CountryCode2 = "AR"
	CountryCode2AS CountryCode2 = "AS"
	CountryCode2AT CountryCode2 = "AT"
	CountryCode2AU CountryCode2 = "AU"
	CountryCode2AW CountryCode2 = "AW"
	CountryCode2AX CountryCode2 = "AX"
	CountryCode2AZ CountryCode2 = "AZ"
	CountryCode2BA CountryCode2 = "BA"
	CountryCode2BB CountryCode2 = "BB"
	CountryCode2BD CountryCode2 = "BD"
	CountryCode2BE CountryCode2 = "BE"
	CountryCode2BF CountryCode2 = "BF"
	CountryCode2BG CountryCode2 = "BG"
	CountryCode2BH CountryCode2 = "BH"
	CountryCode2BI CountryCode2 = "BI"
	CountryCode2BJ CountryCode2 = "BJ"
	CountryCode2BL CountryCode2 = "BL"
	CountryCode2BM CountryCode2 = "BM"
	CountryCode2BN CountryCode2 = "BN"
	CountryCode2BO CountryCode2 = "BO"
	CountryCode2BQ CountryCode2 = "BQ"
	CountryCode2BR CountryCode2 = "BR"
	CountryCode2BS CountryCode2 = "BS"
	CountryCode2BT CountryCode2 = "BT"
	CountryCode2BV CountryCode2 = "BV"
	CountryCode2BW CountryCode2 = "BW"
	CountryCode2BY CountryCode2 = "BY"
	CountryCode2BZ CountryCode2 = "BZ"
	CountryCode2CA CountryCode2 = "CA"
	CountryCode2CC CountryCode2 = "CC"
	CountryCode2CD CountryCode2 = "CD"
	CountryCode2CF CountryCode2 = "CF"
	CountryCode2CG CountryCode2 = "CG"
	CountryCode2CH CountryCode2 = "CH"
	CountryCode2CI CountryCode2 = "CI"
	CountryCode2CK CountryCode2 = "CK"
	CountryCode2CL CountryCode2 = "CL"
	CountryCode2CM CountryCode2 = "CM"
	CountryCode2CN CountryCode2 = "CN"
	CountryCode2CO CountryCode2 = "CO"
	CountryCode2CR CountryCode2 = "CR"
	CountryCode2CU CountryCode2 = "CU"
	CountryCode2CV CountryCode2 = "CV"
	CountryCode2CW CountryCode2 = "CW"
	CountryCode2CX CountryCode2 = "CX"
	CountryCode2CY CountryCode2 = "CY"
	CountryCode2CZ CountryCode2 = "CZ"
	CountryCode2DE CountryCode2 = "DE"
	CountryCode2DJ CountryCode2 = "DJ"
	CountryCode2DK CountryCode2 = "DK"
	CountryCode2DM CountryCode2 = "DM"
	CountryCode2DO CountryCode2 = "DO"
	CountryCode2DZ CountryCode2 = "DZ"
	CountryCode2EC CountryCode2 = "EC"
	CountryCode2EE CountryCode2 = "EE"
	CountryCode2EG CountryCode2 = "EG"
	CountryCode2EH CountryCode2 = "EH"
	CountryCode2ER CountryCode2 = "ER"
	CountryCode2ES CountryCode2 = "ES"
	CountryCode2ET CountryCode2 = "ET"
	CountryCode2FI CountryCode2 = "FI"
	CountryCode2FJ CountryCode2 = "FJ"
	CountryCode2FK CountryCode2 = "FK"
	CountryCode2FM CountryCode2 = "FM"
	CountryCode2FO CountryCode2 = "FO"
	CountryCode2FR CountryCode2 = "FR"
	CountryCode2GA CountryCode2 = "GA"
	CountryCode2GB CountryCode2 = "GB"
	CountryCode2GD CountryCode2 = "GD"
	CountryCode2GE CountryCode2 = "GE"
	CountryCode2GF CountryCode2 = "GF"
	CountryCode2GG CountryCode2 = "GG"
	CountryCode2GH CountryCode2 = "GH"
	CountryCode2GI CountryCode2 = "GI"
	CountryCode2GL CountryCode2 = "GL"
	CountryCode2GM CountryCode2 = "GM"
	CountryCode2GN CountryCode2 = "GN"
	CountryCode2GP CountryCode2 = "GP"
	CountryCode2GQ CountryCode2 = "GQ"
	CountryCode2GR CountryCode2 = "GR"
	CountryCode2GS CountryCode2 = "GS"
	CountryCode2GT CountryCode2 = "GT"
	CountryCode2GU CountryCode2 = "GU"
	CountryCode2GW CountryCode2 = "GW"
	CountryCode2GY CountryCode2 = "GY"
	CountryCode2HK CountryCode2 = "HK"
	CountryCode2HM CountryCode2 = "HM"
	CountryCode2HN CountryCode2 = "HN"
	CountryCode2HR CountryCode2 = "HR"
	CountryCode2HT CountryCode2 = "HT"
	CountryCode2HU CountryCode2 = "HU"
	CountryCode2ID CountryCode2 = "ID"
	CountryCode2IE CountryCode2 = "IE"
	CountryCode2IL CountryCode2 = "IL"
	CountryCode2IM CountryCode2 = "IM"
	CountryCode2IN CountryCode2 = "IN"
	CountryCode2IO CountryCode2 = "IO"
	CountryCode2IQ CountryCode2 = "IQ"
	CountryCode2IR CountryCode2 = "IR"
	CountryCode2IS CountryCode2 = "IS"
	CountryCode2IT CountryCode2 = "IT"
	CountryCode2JE CountryCode2 = "JE"
	CountryCode2JM CountryCode2 = "JM"
	CountryCode2JO CountryCode2 = "JO"
	CountryCode2JP CountryCode2 = "JP"
	CountryCode2KE CountryCode2 = "KE"
	CountryCode2KG CountryCode2 = "KG"
	CountryCode2KH CountryCode2 = "KH"
	CountryCode2KI CountryCode2 = "KI"
	CountryCode2KM CountryCode2 = "KM"
	CountryCode2KN CountryCode2 = "KN"
	CountryCode2KP CountryCode2 = "KP"
	CountryCode2KR CountryCode2 = "KR"
	CountryCode2KW CountryCode2 = "KW"
	CountryCode2KY CountryCode2 = "KY"
	CountryCode2KZ CountryCode2 = "KZ"
	CountryCode2LA CountryCode2 = "LA"
	CountryCode2LB CountryCode2 = "LB"
	CountryCode2LC CountryCode2 = "LC"
	CountryCode2LI CountryCode2 = "LI"
	CountryCode2LK CountryCode2 = "LK"
	CountryCode2LR CountryCode2 = "LR"
	CountryCode2LS CountryCode2 = "LS"
	CountryCode2LT CountryCode2 = "LT"
	CountryCode2LU CountryCode2 = "LU"
	CountryCode2LV CountryCode2 = "LV"
	CountryCode2LY CountryCode2 = "LY"
	CountryCode2MA CountryCode2 = "MA"
	CountryCode2MC CountryCode2 = "MC"
	CountryCode2MD CountryCode2 = "MD"
	CountryCode2ME CountryCode2 = "ME"
	CountryCode2MF CountryCode2 = "MF"
	CountryCode2MG CountryCode2 = "MG"
	CountryCode2MH CountryCode2 = "MH"
	CountryCode2MK CountryCode2 = "MK"
	CountryCode2ML CountryCode2 = "ML"
	CountryCode2MM CountryCode2 = "MM"
	CountryCode2MN CountryCode2 = "MN"
	CountryCode2MO CountryCode2 = "MO"
	CountryCode2MP CountryCode2 = "MP"
	CountryCode2MQ CountryCode2 = "MQ"
	CountryCode2MR CountryCode2 = "MR"
	CountryCode2MS CountryCode2 = "MS"
	CountryCode2MT CountryCode2 = "MT"
	CountryCode2MU CountryCode2 = "MU"
	CountryCode2MV CountryCode2 = "MV"
	CountryCode2MW CountryCode2 = "MW"
	CountryCode2MX CountryCode2 = "MX"
	CountryCode2MY CountryCode2 = "MY"
	CountryCode2MZ CountryCode2 = "MZ"
	CountryCode2NA CountryCode2 = "NA"
	CountryCode2NC CountryCode2 = "NC"
	CountryCode2NE CountryCode2 = "NE"
	CountryCode2NF CountryCode2 = "NF"
	CountryCode2NG CountryCode2 = "NG"
	CountryCode2NI CountryCode2 = "NI"
	CountryCode2NL CountryCode2 = "NL"
	CountryCode2NO CountryCode2 = "NO"
	CountryCode2NP CountryCode2 = "NP"
	CountryCode2NR CountryCode2 = "NR"
	CountryCode2NU CountryCode2 = "NU"
	CountryCode2NZ CountryCode2 = "NZ"
	CountryCode2OM CountryCode2 = "OM"
	CountryCode2PA CountryCode2 = "PA"
	CountryCode2PE CountryCode2 = "PE"
	CountryCode2PF CountryCode2 = "PF"
	CountryCode2PG CountryCode2 = "PG"
	CountryCode2PH CountryCode2 = "PH"
	CountryCode2PK CountryCode2 = "PK"
	CountryCode2PL CountryCode2 = "PL"
	CountryCode2PM CountryCode2 = "PM"
	CountryCode2PN CountryCode2 = "PN"
	CountryCode2PR CountryCode2 = "PR"
	CountryCode2PS CountryCode2 = "PS"
	CountryCode2PT CountryCode2 = "PT"
	CountryCode2PW CountryCode2 = "PW"
	CountryCode2PY CountryCode2 = "PY"
	CountryCode2QA CountryCode2 = "QA"
	CountryCode2RE CountryCode2 = "RE"
	CountryCode2RO CountryCode2 = "RO"
	CountryCode2RS CountryCode2 = "RS"
	CountryCode2RU CountryCode2 = "RU"
	CountryCode2RW CountryCode2 = "RW"
	CountryCode2SA CountryCode2 = "SA"
	CountryCode2SB CountryCode2 = "SB"
	CountryCode2SC CountryCode2 = "SC"
	CountryCode2SD CountryCode2 = "SD"
	CountryCode2SE CountryCode2 = "SE"
	CountryCode2SG CountryCode2 = "SG"
	CountryCode2SH CountryCode2 = "SH"
	CountryCode2SI CountryCode2 = "SI"
	CountryCode2SJ CountryCode2 = "SJ"
	CountryCode2SK CountryCode2 = "SK"
	CountryCode2SL CountryCode2 = "SL"
	CountryCode2SM CountryCode2 = "SM"
	CountryCode2SN CountryCode2 = "SN"
	CountryCode2SO CountryCode2 = "SO"
	CountryCode2SR CountryCode2 = "SR"
	CountryCode2SS CountryCode2 = "SS"
	CountryCode2ST CountryCode2 = "ST"
	CountryCode2SV CountryCode2 = "SV"
	CountryCode2SX CountryCode2 = "SX"
	CountryCode2SY CountryCode2 = "SY"
	CountryCode2SZ CountryCode2 = "SZ"
	CountryCode2TC CountryCode2 = "TC"
	CountryCode2TD CountryCode2 = "TD"
	CountryCode2TF CountryCode2 = "TF"
	CountryCode2TG CountryCode2 = "TG"
	CountryCode2TH CountryCode2 = "TH"
	CountryCode2TJ CountryCode2 = "TJ"
	CountryCode2TK CountryCode2 = "TK"
	CountryCode2TL CountryCode2 = "TL"
	CountryCode2TM CountryCode2 = "TM"
	CountryCode2TN CountryCode2 = "TN"
	CountryCode2TO CountryCode2 = "TO"
	CountryCode2TR CountryCode2 = "TR"
	CountryCode2TT CountryCode2 = "TT"
	CountryCode2TV CountryCode2 = "TV"
	CountryCode2TW CountryCode2 = "TW"
	CountryCode2TZ CountryCode2 = "TZ"
	CountryCode2UA CountryCode2 = "UA"
	CountryCode2UG CountryCode2 = "UG"
	CountryCode2UM CountryCode2 = "UM"
	CountryCode2US CountryCode2 = "US"
	CountryCode2UY CountryCode2 = "UY"
	CountryCode2UZ CountryCode2 = "UZ"
	CountryCode2VA CountryCode2 = "VA"
	CountryCode2VC CountryCode2 = "VC"
	CountryCode2VE CountryCode2 = "VE"
	CountryCode2VG CountryCode2 = "VG"
	CountryCode2VI CountryCode2 = "VI"
	CountryCode2VN CountryCode2 = "VN"
	CountryCode2VU CountryCode2 = "VU"
	CountryCode2WF CountryCode2 = "WF"
	CountryCode2WS CountryCode2 = "WS"
	CountryCode2XK CountryCode2 = "XK"
	CountryCode2YE CountryCode2 = "YE"
	CountryCode2YT CountryCode2 = "YT"
	CountryCode2ZA CountryCode2 = "ZA"
	CountryCode2ZM CountryCode2 = "ZM"
	CountryCode2ZW CountryCode2 = "ZW"
)

// Defines values for CreateOrUpdateCustomerRequestIntegration.
const (
	CreateOrUpdateCustomerRequestIntegrationXero CreateOrUpdateCustomerRequestIntegration = "Xero"
)

// Defines values for CreditNoteStatus.
const (
	CreditNoteStatusDRAFT      CreditNoteStatus = "DRAFT"
	CreditNoteStatusFINAL      CreditNoteStatus = "FINAL"
	CreditNoteStatusINPROGRESS CreditNoteStatus = "IN_PROGRESS"
	CreditNoteStatusSENT       CreditNoteStatus = "SENT"
	CreditNoteStatusVOIDED     CreditNoteStatus = "VOIDED"
)

// Defines values for CreditType.
const (
	CreditTypeCASH  CreditType = "CASH"
	CreditTypeUSAGE CreditType = "USAGE"
)

// Defines values for CreditUnitType.
const (
	CURRENCY CreditUnitType = "CURRENCY"
	METRIC   CreditUnitType = "METRIC"
)

// Defines values for Currency.
const (
	ARS Currency = "ARS"
	AUD Currency = "AUD"
	BRL Currency = "BRL"
	CAD Currency = "CAD"
	CHF Currency = "CHF"
	CNY Currency = "CNY"
	COP Currency = "COP"
	CZK Currency = "CZK"
	DKK Currency = "DKK"
	EUR Currency = "EUR"
	GBP Currency = "GBP"
	HKD Currency = "HKD"
	ILS Currency = "ILS"
	JPY Currency = "JPY"
	KRW Currency = "KRW"
	MXN Currency = "MXN"
	NOK Currency = "NOK"
	NZD Currency = "NZD"
	PLN Currency = "PLN"
	SEK Currency = "SEK"
	SGD Currency = "SGD"
	THB Currency = "THB"
	USD Currency = "USD"
	UYU Currency = "UYU"
	ZAR Currency = "ZAR"
)

// Defines values for CustomParameterType.
const (
	INTEGER         CustomParameterType = "INTEGER"
	POSITIVEINTEGER CustomParameterType = "POSITIVE_INTEGER"
)

// Defines values for DiscountCalculationType.
const (
	DiscountCalculationTypeNOMINAL    DiscountCalculationType = "NOMINAL"
	DiscountCalculationTypePERCENTAGE DiscountCalculationType = "PERCENTAGE"
)

// Defines values for FixedPricingType.
const (
	FIXED FixedPricingType = "FIXED"
)

// Defines values for GetBillingScheduleEndpointApiBillingScheduleStatus.
const (
	GetBillingScheduleEndpointApiBillingScheduleStatusACTIVE    GetBillingScheduleEndpointApiBillingScheduleStatus = "ACTIVE"
	GetBillingScheduleEndpointApiBillingScheduleStatusCANCELLED GetBillingScheduleEndpointApiBillingScheduleStatus = "CANCELLED"
	GetBillingScheduleEndpointApiBillingScheduleStatusCOMPLETED GetBillingScheduleEndpointApiBillingScheduleStatus = "COMPLETED"
	GetBillingScheduleEndpointApiBillingScheduleStatusDRAFT     GetBillingScheduleEndpointApiBillingScheduleStatus = "DRAFT"
	GetBillingScheduleEndpointApiBillingScheduleStatusPENDING   GetBillingScheduleEndpointApiBillingScheduleStatus = "PENDING"
	GetBillingScheduleEndpointApiBillingScheduleStatusSUSPENDED GetBillingScheduleEndpointApiBillingScheduleStatus = "SUSPENDED"
)

// Defines values for GraduatedPricingType.
const (
	GRADUATED GraduatedPricingType = "GRADUATED"
)

// Defines values for IntegrationService.
const (
	IntegrationServiceAmazonRedshift   IntegrationService = "Amazon_Redshift"
	IntegrationServiceAnrok            IntegrationService = "Anrok"
	IntegrationServiceAvalara          IntegrationService = "Avalara"
	IntegrationServiceGoogleBigQuery   IntegrationService = "Google_BigQuery"
	IntegrationServiceGoogleSheets     IntegrationService = "Google_Sheets"
	IntegrationServiceHubSpot          IntegrationService = "HubSpot"
	IntegrationServiceNetSuite         IntegrationService = "NetSuite"
	IntegrationServiceQuickBooksOnline IntegrationService = "QuickBooks_Online"
	IntegrationServiceSalesforce       IntegrationService = "Salesforce"
	IntegrationServiceSlack            IntegrationService = "Slack"
	IntegrationServiceSnowflake        IntegrationService = "Snowflake"
	IntegrationServiceStripe           IntegrationService = "Stripe"
	IntegrationServiceXero             IntegrationService = "Xero"
)

// Defines values for InvoiceDunningStatus.
const (
	COMPLETED             InvoiceDunningStatus = "COMPLETED"
	FAILED                InvoiceDunningStatus = "FAILED"
	NOTREQUIRED           InvoiceDunningStatus = "NOT_REQUIRED"
	OVERDUECHECKSCHEDULED InvoiceDunningStatus = "OVERDUE_CHECK_SCHEDULED"
	SCHEDULED             InvoiceDunningStatus = "SCHEDULED"
)

// Defines values for InvoicePaymentOption.
const (
	BANKTRANSFER InvoicePaymentOption = "BANK_TRANSFER"
	LINK         InvoicePaymentOption = "LINK"
)

// Defines values for InvoicePaymentStatus.
const (
	PAID          InvoicePaymentStatus = "PAID"
	PARTIALLYPAID InvoicePaymentStatus = "PARTIALLY_PAID"
	UNCOLLECTIBLE InvoicePaymentStatus = "UNCOLLECTIBLE"
	UNPAID        InvoicePaymentStatus = "UNPAID"
)

// Defines values for InvoiceStatus.
const (
	DRAFT      InvoiceStatus = "DRAFT"
	FINAL      InvoiceStatus = "FINAL"
	INPROGRESS InvoiceStatus = "IN_PROGRESS"
	SENT       InvoiceStatus = "SENT"
	VOIDED     InvoiceStatus = "VOIDED"
)

// Defines values for LinearPricingType.
const (
	LINEAR LinearPricingType = "LINEAR"
)

// Defines values for MetricType.
const (
	GROUPED MetricType = "GROUPED"
	SIMPLE  MetricType = "SIMPLE"
)

// Defines values for NotificationChannel.
const (
	EMAIL   NotificationChannel = "EMAIL"
	WEBHOOK NotificationChannel = "WEBHOOK"
)

// Defines values for NotificationType.
const (
	NotificationTypeBILLINGSCHEDULEARCHIVED   NotificationType = "BILLING_SCHEDULE_ARCHIVED"
	NotificationTypeBILLINGSCHEDULECREATED    NotificationType = "BILLING_SCHEDULE_CREATED"
	NotificationTypeBILLINGSCHEDULEUPDATED    NotificationType = "BILLING_SCHEDULE_UPDATED"
	NotificationTypeCREDITNOTECREATED         NotificationType = "CREDIT_NOTE_CREATED"
	NotificationTypeCREDITNOTEISSUED          NotificationType = "CREDIT_NOTE_ISSUED"
	NotificationTypeCREDITNOTEUPDATED         NotificationType = "CREDIT_NOTE_UPDATED"
	NotificationTypeCUSTOMERARCHIVED          NotificationType = "CUSTOMER_ARCHIVED"
	NotificationTypeCUSTOMERCREATED           NotificationType = "CUSTOMER_CREATED"
	NotificationTypeCUSTOMERUPDATED           NotificationType = "CUSTOMER_UPDATED"
	NotificationTypeINTEGRATIONSYNCCOMPLETED  NotificationType = "INTEGRATION_SYNC_COMPLETED"
	NotificationTypeINTEGRATIONWEBHOOKHANDLED NotificationType = "INTEGRATION_WEBHOOK_HANDLED"
	NotificationTypeINVOICECREATED            NotificationType = "INVOICE_CREATED"
	NotificationTypeINVOICEISSUED             NotificationType = "INVOICE_ISSUED"
	NotificationTypeINVOICEUPDATED            NotificationType = "INVOICE_UPDATED"
	NotificationTypeMERCHANTUPDATED           NotificationType = "MERCHANT_UPDATED"
	NotificationTypeQUOTEACCEPTED             NotificationType = "QUOTE_ACCEPTED"
	NotificationTypeQUOTEPUBLISHED            NotificationType = "QUOTE_PUBLISHED"
)

// Defines values for OneTimePricingType.
const (
	OneTimePricingTypeONETIME OneTimePricingType = "ONE_TIME"
)

// Defines values for PackagePricingType.
const (
	PACKAGE PackagePricingType = "PACKAGE"
)

// Defines values for PaymentFailureNotificationOptions.
const (
	DONOTSENDNOTIFICATIONS PaymentFailureNotificationOptions = "DO_NOT_SEND_NOTIFICATIONS"
	SENDNOTIFICATIONS      PaymentFailureNotificationOptions = "SEND_NOTIFICATIONS"
)

// Defines values for PaymentLinkDisplayOption.
const (
	HIDEPAYMENTLINK PaymentLinkDisplayOption = "HIDE_PAYMENT_LINK"
	SHOWPAYMENTLINK PaymentLinkDisplayOption = "SHOW_PAYMENT_LINK"
)

// Defines values for PaymentProvider.
const (
	PaymentProviderNONE   PaymentProvider = "NONE"
	PaymentProviderSTRIPE PaymentProvider = "STRIPE"
)

// Defines values for PhaseRecurrencePreference.
const (
	CONTINUEFROMPREVIOUSPHASE PhaseRecurrencePreference = "CONTINUE_FROM_PREVIOUS_PHASE"
	RESET                     PhaseRecurrencePreference = "RESET"
)

// Defines values for RateDisplay.
const (
	RateDisplayABSOLUTE   RateDisplay = "ABSOLUTE"
	RateDisplayPERCENTAGE RateDisplay = "PERCENTAGE"
)

// Defines values for RevenueClassification.
const (
	BURNDOWN   RevenueClassification = "BURNDOWN"
	EARNED     RevenueClassification = "EARNED"
	PREPAYMENT RevenueClassification = "PREPAYMENT"
)

// Defines values for RevenueRecognitionMethod.
const (
	RevenueRecognitionMethodMILESTONE    RevenueRecognitionMethod = "MILESTONE"
	RevenueRecognitionMethodSTRAIGHTLINE RevenueRecognitionMethod = "STRAIGHT_LINE"
	RevenueRecognitionMethodUSAGE        RevenueRecognitionMethod = "USAGE"
)

// Defines values for SeatBasedPricingType.
const (
	SEATBASED SeatBasedPricingType = "SEAT_BASED"
)

// Defines values for SeatProrationStrategy.
const (
	PRORATEALLCHANGES SeatProrationStrategy = "PRORATE_ALL_CHANGES"
	PRORATEINCREMENTS SeatProrationStrategy = "PRORATE_INCREMENTS"
	USEMAXIMUM        SeatProrationStrategy = "USE_MAXIMUM"
)

// Defines values for SettingPreference.
const (
	DISABLED SettingPreference = "DISABLED"
	ENABLED  SettingPreference = "ENABLED"
)

// Defines values for State.
const (
	StateAB State = "AB"
	StateAK State = "AK"
	StateAL State = "AL"
	StateAR State = "AR"
	StateAZ State = "AZ"
	StateBC State = "BC"
	StateCA State = "CA"
	StateCO State = "CO"
	StateCT State = "CT"
	StateDC State = "DC"
	StateDE State = "DE"
	StateFL State = "FL"
	StateGA State = "GA"
	StateHI State = "HI"
	StateIA State = "IA"
	StateID State = "ID"
	StateIL State = "IL"
	StateIN State = "IN"
	StateKS State = "KS"
	StateKY State = "KY"
	StateLA State = "LA"
	StateMA State = "MA"
	StateMB State = "MB"
	StateMD State = "MD"
	StateME State = "ME"
	StateMI State = "MI"
	StateMN State = "MN"
	StateMO State = "MO"
	StateMS State = "MS"
	StateMT State = "MT"
	StateNB State = "NB"
	StateNC State = "NC"
	StateND State = "ND"
	StateNE State = "NE"
	StateNH State = "NH"
	StateNJ State = "NJ"
	StateNL State = "NL"
	StateNM State = "NM"
	StateNS State = "NS"
	StateNT State = "NT"
	StateNU State = "NU"
	StateNV State = "NV"
	StateNY State = "NY"
	StateOH State = "OH"
	StateOK State = "OK"
	StateON State = "ON"
	StateOR State = "OR"
	StatePA State = "PA"
	StatePE State = "PE"
	StateQC State = "QC"
	StateRI State = "RI"
	StateSC State = "SC"
	StateSD State = "SD"
	StateSK State = "SK"
	StateTN State = "TN"
	StateTX State = "TX"
	StateUT State = "UT"
	StateVA State = "VA"
	StateVT State = "VT"
	StateWA State = "WA"
	StateWI State = "WI"
	StateWV State = "WV"
	StateWY State = "WY"
	StateYT State = "YT"
)

// Defines values for State1.
const (
	State1AB State1 = "AB"
	State1AK State1 = "AK"
	State1AL State1 = "AL"
	State1AR State1 = "AR"
	State1AZ State1 = "AZ"
	State1BC State1 = "BC"
	State1CA State1 = "CA"
	State1CO State1 = "CO"
	State1CT State1 = "CT"
	State1DC State1 = "DC"
	State1DE State1 = "DE"
	State1FL State1 = "FL"
	State1GA State1 = "GA"
	State1HI State1 = "HI"
	State1IA State1 = "IA"
	State1ID State1 = "ID"
	State1IL State1 = "IL"
	State1IN State1 = "IN"
	State1KS State1 = "KS"
	State1KY State1 = "KY"
	State1LA State1 = "LA"
	State1MA State1 = "MA"
	State1MB State1 = "MB"
	State1MD State1 = "MD"
	State1ME State1 = "ME"
	State1MI State1 = "MI"
	State1MN State1 = "MN"
	State1MO State1 = "MO"
	State1MS State1 = "MS"
	State1MT State1 = "MT"
	State1NB State1 = "NB"
	State1NC State1 = "NC"
	State1ND State1 = "ND"
	State1NE State1 = "NE"
	State1NH State1 = "NH"
	State1NJ State1 = "NJ"
	State1NL State1 = "NL"
	State1NM State1 = "NM"
	State1NS State1 = "NS"
	State1NT State1 = "NT"
	State1NU State1 = "NU"
	State1NV State1 = "NV"
	State1NY State1 = "NY"
	State1OH State1 = "OH"
	State1OK State1 = "OK"
	State1ON State1 = "ON"
	State1OR State1 = "OR"
	State1PA State1 = "PA"
	State1PE State1 = "PE"
	State1QC State1 = "QC"
	State1RI State1 = "RI"
	State1SC State1 = "SC"
	State1SD State1 = "SD"
	State1SK State1 = "SK"
	State1TN State1 = "TN"
	State1TX State1 = "TX"
	State1UT State1 = "UT"
	State1VA State1 = "VA"
	State1VT State1 = "VT"
	State1WA State1 = "WA"
	State1WI State1 = "WI"
	State1WV State1 = "WV"
	State1WY State1 = "WY"
	State1YT State1 = "YT"
)

// Defines values for State2.
const (
	State2AB State2 = "AB"
	State2AK State2 = "AK"
	State2AL State2 = "AL"
	State2AR State2 = "AR"
	State2AZ State2 = "AZ"
	State2BC State2 = "BC"
	State2CA State2 = "CA"
	State2CO State2 = "CO"
	State2CT State2 = "CT"
	State2DC State2 = "DC"
	State2DE State2 = "DE"
	State2FL State2 = "FL"
	State2GA State2 = "GA"
	State2HI State2 = "HI"
	State2IA State2 = "IA"
	State2ID State2 = "ID"
	State2IL State2 = "IL"
	State2IN State2 = "IN"
	State2KS State2 = "KS"
	State2KY State2 = "KY"
	State2LA State2 = "LA"
	State2MA State2 = "MA"
	State2MB State2 = "MB"
	State2MD State2 = "MD"
	State2ME State2 = "ME"
	State2MI State2 = "MI"
	State2MN State2 = "MN"
	State2MO State2 = "MO"
	State2MS State2 = "MS"
	State2MT State2 = "MT"
	State2NB State2 = "NB"
	State2NC State2 = "NC"
	State2ND State2 = "ND"
	State2NE State2 = "NE"
	State2NH State2 = "NH"
	State2NJ State2 = "NJ"
	State2NL State2 = "NL"
	State2NM State2 = "NM"
	State2NS State2 = "NS"
	State2NT State2 = "NT"
	State2NU State2 = "NU"
	State2NV State2 = "NV"
	State2NY State2 = "NY"
	State2OH State2 = "OH"
	State2OK State2 = "OK"
	State2ON State2 = "ON"
	State2OR State2 = "OR"
	State2PA State2 = "PA"
	State2PE State2 = "PE"
	State2QC State2 = "QC"
	State2RI State2 = "RI"
	State2SC State2 = "SC"
	State2SD State2 = "SD"
	State2SK State2 = "SK"
	State2TN State2 = "TN"
	State2TX State2 = "TX"
	State2UT State2 = "UT"
	State2VA State2 = "VA"
	State2VT State2 = "VT"
	State2WA State2 = "WA"
	State2WI State2 = "WI"
	State2WV State2 = "WV"
	State2WY State2 = "WY"
	State2YT State2 = "YT"
)

// Defines values for TaxStatus.
const (
	REVERSECHARGED TaxStatus = "REVERSE_CHARGED"
	TAXED          TaxStatus = "TAXED"
	TAXEXEMPT      TaxStatus = "TAX_EXEMPT"
)

// Defines values for UsageCalculationFrequency.
const (
	UsageCalculationFrequencyHALFYEARLY UsageCalculationFrequency = "HALF_YEARLY"
	UsageCalculationFrequencyMONTHLY    UsageCalculationFrequency = "MONTHLY"
	UsageCalculationFrequencyQUARTERLY  UsageCalculationFrequency = "QUARTERLY"
	UsageCalculationFrequencyYEARLY     UsageCalculationFrequency = "YEARLY"
)

// Defines values for UsageCalculationFrequency1.
const (
	UsageCalculationFrequency1HALFYEARLY UsageCalculationFrequency1 = "HALF_YEARLY"
	UsageCalculationFrequency1MONTHLY    UsageCalculationFrequency1 = "MONTHLY"
	UsageCalculationFrequency1QUARTERLY  UsageCalculationFrequency1 = "QUARTERLY"
	UsageCalculationFrequency1YEARLY     UsageCalculationFrequency1 = "YEARLY"
)

// Defines values for UsageCalculationMode.
const (
	BILLINGPERIOD UsageCalculationMode = "BILLING_PERIOD"
	CUMULATIVE    UsageCalculationMode = "CUMULATIVE"
	PERIODIC      UsageCalculationMode = "PERIODIC"
)

// Defines values for VolumePricingType.
const (
	VOLUME VolumePricingType = "VOLUME"
)

// Defines values for GetBillingProductsParamsSequenceVersion.
const (
	GetBillingProductsParamsSequenceVersionN20240730 GetBillingProductsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetBillingSchedulesParamsSortBy.
const (
	STARTDATE GetBillingSchedulesParamsSortBy = "START_DATE"
)

// Defines values for GetBillingSchedulesParamsSequenceVersion.
const (
	GetBillingSchedulesParamsSequenceVersionN20240730 GetBillingSchedulesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostBillingSchedulesParamsSequenceVersion.
const (
	PostBillingSchedulesParamsSequenceVersionN20240730 PostBillingSchedulesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostBillingSchedulesValidateTaxesParamsSequenceVersion.
const (
	PostBillingSchedulesValidateTaxesParamsSequenceVersionN20240730 PostBillingSchedulesValidateTaxesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetBillingSchedulesByBillingScheduleIdParamsSequenceVersion.
const (
	GetBillingSchedulesByBillingScheduleIdParamsSequenceVersionN20240730 GetBillingSchedulesByBillingScheduleIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutBillingSchedulesByBillingScheduleIdParamsSequenceVersion.
const (
	PutBillingSchedulesByBillingScheduleIdParamsSequenceVersionN20240730 PutBillingSchedulesByBillingScheduleIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersion.
const (
	PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersionN20240730 PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersion.
const (
	PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersionN20240730 PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditNotesParamsSequenceVersion.
const (
	GetCreditNotesParamsSequenceVersionN20240730 GetCreditNotesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesParamsSequenceVersion.
const (
	PostCreditNotesParamsSequenceVersionN20240730 PostCreditNotesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion.
const (
	GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersionN20240730 GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion.
const (
	PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersionN20240730 PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion.
const (
	DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersionN20240730 DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion.
const (
	PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersionN20240730 PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditNotesByCreditnoteLineItemsParamsSequenceVersion.
const (
	GetCreditNotesByCreditnoteLineItemsParamsSequenceVersionN20240730 GetCreditNotesByCreditnoteLineItemsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByCreditnoteLineItemsParamsSequenceVersion.
const (
	PostCreditNotesByCreditnoteLineItemsParamsSequenceVersionN20240730 PostCreditNotesByCreditnoteLineItemsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion.
const (
	DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersionN20240730 DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion.
const (
	PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersionN20240730 PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteCreditNotesByIdParamsSequenceVersion.
const (
	DeleteCreditNotesByIdParamsSequenceVersionN20240730 DeleteCreditNotesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditNotesByIdParamsSequenceVersion.
const (
	GetCreditNotesByIdParamsSequenceVersionN20240730 GetCreditNotesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCreditNotesByIdParamsSequenceVersion.
const (
	PutCreditNotesByIdParamsSequenceVersionN20240730 PutCreditNotesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditNotesByIdDownloadParamsSequenceVersion.
const (
	GetCreditNotesByIdDownloadParamsSequenceVersionN20240730 GetCreditNotesByIdDownloadParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByIdFinalizeParamsSequenceVersion.
const (
	PostCreditNotesByIdFinalizeParamsSequenceVersionN20240730 PostCreditNotesByIdFinalizeParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByIdFinalizeAndSendParamsSequenceVersion.
const (
	PostCreditNotesByIdFinalizeAndSendParamsSequenceVersionN20240730 PostCreditNotesByIdFinalizeAndSendParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByIdSendParamsSequenceVersion.
const (
	PostCreditNotesByIdSendParamsSequenceVersionN20240730 PostCreditNotesByIdSendParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditNotesByIdVoidParamsSequenceVersion.
const (
	PostCreditNotesByIdVoidParamsSequenceVersionN20240730 PostCreditNotesByIdVoidParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditsParamsSequenceVersion.
const (
	GetCreditsParamsSequenceVersionN20240730 GetCreditsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCreditsParamsSequenceVersion.
const (
	PostCreditsParamsSequenceVersionN20240730 PostCreditsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditsByCustomerIdBalancesParamsSequenceVersion.
const (
	GetCreditsByCustomerIdBalancesParamsSequenceVersionN20240730 GetCreditsByCustomerIdBalancesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditsByCustomerIdGrantsParamsSequenceVersion.
const (
	GetCreditsByCustomerIdGrantsParamsSequenceVersionN20240730 GetCreditsByCustomerIdGrantsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCreditsByIdParamsSequenceVersion.
const (
	GetCreditsByIdParamsSequenceVersionN20240730 GetCreditsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomerAliasesParamsSequenceVersion.
const (
	GetCustomerAliasesParamsSequenceVersionN20240730 GetCustomerAliasesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomerAliasesParamsSequenceVersion.
const (
	PostCustomerAliasesParamsSequenceVersionN20240730 PostCustomerAliasesParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteCustomerAliasesByIdParamsSequenceVersion.
const (
	DeleteCustomerAliasesByIdParamsSequenceVersionN20240730 DeleteCustomerAliasesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCustomerAliasesByIdParamsSequenceVersion.
const (
	PutCustomerAliasesByIdParamsSequenceVersionN20240730 PutCustomerAliasesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomerOrganizationsParamsSequenceVersion.
const (
	PostCustomerOrganizationsParamsSequenceVersionN20240730 PostCustomerOrganizationsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomerOrganizationsByIdMembersParamsSequenceVersion.
const (
	PostCustomerOrganizationsByIdMembersParamsSequenceVersionN20240730 PostCustomerOrganizationsByIdMembersParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCustomerOrganizationsByIdMembersParamsSequenceVersion.
const (
	PutCustomerOrganizationsByIdMembersParamsSequenceVersionN20240730 PutCustomerOrganizationsByIdMembersParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomersParamsSequenceVersion.
const (
	GetCustomersParamsSequenceVersionN20240730 GetCustomersParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomersParamsSequenceVersion.
const (
	PostCustomersParamsSequenceVersionN20240730 PostCustomersParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomersByAliasByAliasParamsSequenceVersion.
const (
	GetCustomersByAliasByAliasParamsSequenceVersionN20240730 GetCustomersByAliasByAliasParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomersByCustomerContactsParamsSequenceVersion.
const (
	GetCustomersByCustomerContactsParamsSequenceVersionN20240730 GetCustomersByCustomerContactsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomersByCustomerContactsParamsSequenceVersion.
const (
	PostCustomersByCustomerContactsParamsSequenceVersionN20240730 PostCustomersByCustomerContactsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCustomersByCustomerContactsByIdParamsSequenceVersion.
const (
	PutCustomersByCustomerContactsByIdParamsSequenceVersionN20240730 PutCustomersByCustomerContactsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersion.
const (
	PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersionN20240730 PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomersByIdParamsSequenceVersion.
const (
	GetCustomersByIdParamsSequenceVersionN20240730 GetCustomersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutCustomersByIdParamsSequenceVersion.
const (
	PutCustomersByIdParamsSequenceVersionN20240730 PutCustomersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetCustomersByIdAliasesParamsSequenceVersion.
const (
	GetCustomersByIdAliasesParamsSequenceVersionN20240730 GetCustomersByIdAliasesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostCustomersByIdArchiveParamsSequenceVersion.
const (
	PostCustomersByIdArchiveParamsSequenceVersionN20240730 PostCustomersByIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetDiscountsParamsSequenceVersion.
const (
	GetDiscountsParamsSequenceVersionN20240730 GetDiscountsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteDiscountsByIdParamsSequenceVersion.
const (
	DeleteDiscountsByIdParamsSequenceVersionN20240730 DeleteDiscountsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetDiscountsByIdParamsSequenceVersion.
const (
	GetDiscountsByIdParamsSequenceVersionN20240730 GetDiscountsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutDiscountsByIdParamsSequenceVersion.
const (
	PutDiscountsByIdParamsSequenceVersionN20240730 PutDiscountsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesParamsSequenceVersion.
const (
	GetInvoicesParamsSequenceVersionN20240730 GetInvoicesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesParamsSequenceVersion.
const (
	PostInvoicesParamsSequenceVersionN20240730 PostInvoicesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesRenderSettingsParamsSequenceVersion.
const (
	GetInvoicesRenderSettingsParamsSequenceVersionN20240730 GetInvoicesRenderSettingsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutInvoicesRenderSettingsByIdParamsSequenceVersion.
const (
	PutInvoicesRenderSettingsByIdParamsSequenceVersionN20240730 PutInvoicesRenderSettingsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteInvoicesByIdParamsSequenceVersion.
const (
	DeleteInvoicesByIdParamsSequenceVersionN20240730 DeleteInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesByIdParamsSequenceVersion.
const (
	GetInvoicesByIdParamsSequenceVersionN20240730 GetInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PatchInvoicesByIdParamsSequenceVersion.
const (
	PatchInvoicesByIdParamsSequenceVersionN20240730 PatchInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutInvoicesByIdParamsSequenceVersion.
const (
	PutInvoicesByIdParamsSequenceVersionN20240730 PutInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesByIdDownloadParamsSequenceVersion.
const (
	GetInvoicesByIdDownloadParamsSequenceVersionN20240730 GetInvoicesByIdDownloadParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdDraftParamsSequenceVersion.
const (
	PostInvoicesByIdDraftParamsSequenceVersionN20240730 PostInvoicesByIdDraftParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdFinalizeParamsSequenceVersion.
const (
	PostInvoicesByIdFinalizeParamsSequenceVersionN20240730 PostInvoicesByIdFinalizeParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdFinalizeAndSendParamsSequenceVersion.
const (
	PostInvoicesByIdFinalizeAndSendParamsSequenceVersionN20240730 PostInvoicesByIdFinalizeAndSendParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutInvoicesByIdPaymentStatusParamsSequenceVersion.
const (
	PutInvoicesByIdPaymentStatusParamsSequenceVersionN20240730 PutInvoicesByIdPaymentStatusParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdSendParamsSequenceVersion.
const (
	PostInvoicesByIdSendParamsSequenceVersionN20240730 PostInvoicesByIdSendParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdSendPaymentReminderParamsSequenceVersion.
const (
	PostInvoicesByIdSendPaymentReminderParamsSequenceVersionN20240730 PostInvoicesByIdSendPaymentReminderParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByIdVoidParamsSequenceVersion.
const (
	PostInvoicesByIdVoidParamsSequenceVersionN20240730 PostInvoicesByIdVoidParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersion.
const (
	GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersionN20240730 GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersion.
const (
	PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersionN20240730 PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion.
const (
	DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersionN20240730 DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion.
const (
	PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersionN20240730 PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetInvoicesByInvoiceLineItemsParamsSequenceVersion.
const (
	GetInvoicesByInvoiceLineItemsParamsSequenceVersionN20240730 GetInvoicesByInvoiceLineItemsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostInvoicesByInvoiceLineItemsParamsSequenceVersion.
const (
	PostInvoicesByInvoiceLineItemsParamsSequenceVersionN20240730 PostInvoicesByInvoiceLineItemsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersion.
const (
	DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersionN20240730 DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersion.
const (
	PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersionN20240730 PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetListPricesParamsSequenceVersion.
const (
	GetListPricesParamsSequenceVersionN20240730 GetListPricesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostListPricesParamsSequenceVersion.
const (
	PostListPricesParamsSequenceVersionN20240730 PostListPricesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetListPricesByIdParamsSequenceVersion.
const (
	GetListPricesByIdParamsSequenceVersionN20240730 GetListPricesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutListPricesByIdParamsSequenceVersion.
const (
	PutListPricesByIdParamsSequenceVersionN20240730 PutListPricesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostListPricesByIdArchiveParamsSequenceVersion.
const (
	PostListPricesByIdArchiveParamsSequenceVersionN20240730 PostListPricesByIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetNotificationsPoliciesParamsSequenceVersion.
const (
	GetNotificationsPoliciesParamsSequenceVersionN20240730 GetNotificationsPoliciesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostNotificationsPoliciesParamsSequenceVersion.
const (
	PostNotificationsPoliciesParamsSequenceVersionN20240730 PostNotificationsPoliciesParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteNotificationsPoliciesByIdParamsSequenceVersion.
const (
	DeleteNotificationsPoliciesByIdParamsSequenceVersionN20240730 DeleteNotificationsPoliciesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetNotificationsPoliciesByIdParamsSequenceVersion.
const (
	GetNotificationsPoliciesByIdParamsSequenceVersionN20240730 GetNotificationsPoliciesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersion.
const (
	PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersionN20240730 PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersion.
const (
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersionN20240730 DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType.
const (
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeBILLINGSCHEDULEARCHIVED   DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "BILLING_SCHEDULE_ARCHIVED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeBILLINGSCHEDULECREATED    DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "BILLING_SCHEDULE_CREATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeBILLINGSCHEDULEUPDATED    DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "BILLING_SCHEDULE_UPDATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCREDITNOTECREATED         DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CREDIT_NOTE_CREATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCREDITNOTEISSUED          DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CREDIT_NOTE_ISSUED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCREDITNOTEUPDATED         DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CREDIT_NOTE_UPDATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCUSTOMERARCHIVED          DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CUSTOMER_ARCHIVED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCUSTOMERCREATED           DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CUSTOMER_CREATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeCUSTOMERUPDATED           DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "CUSTOMER_UPDATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeINTEGRATIONSYNCCOMPLETED  DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "INTEGRATION_SYNC_COMPLETED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeINTEGRATIONWEBHOOKHANDLED DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "INTEGRATION_WEBHOOK_HANDLED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeINVOICECREATED            DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "INVOICE_CREATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeINVOICEISSUED             DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "INVOICE_ISSUED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeINVOICEUPDATED            DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "INVOICE_UPDATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeMERCHANTUPDATED           DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "MERCHANT_UPDATED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeQUOTEACCEPTED             DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "QUOTE_ACCEPTED"
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsTypeQUOTEPUBLISHED            DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType = "QUOTE_PUBLISHED"
)

// Defines values for PostNotificationsPoliciesByIdRecipientsParamsSequenceVersion.
const (
	PostNotificationsPoliciesByIdRecipientsParamsSequenceVersionN20240730 PostNotificationsPoliciesByIdRecipientsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersion.
const (
	DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersionN20240730 DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsParamsSequenceVersion.
const (
	GetPaymentsSettingsParamsSequenceVersionN20240730 GetPaymentsSettingsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostPaymentsSettingsBillingSchedulesParamsSequenceVersion.
const (
	PostPaymentsSettingsBillingSchedulesParamsSequenceVersionN20240730 PostPaymentsSettingsBillingSchedulesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersion.
const (
	GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersionN20240730 GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersion.
const (
	DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersionN20240730 DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion.
const (
	GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersionN20240730 GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion.
const (
	PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersionN20240730 PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostPaymentsSettingsCustomersParamsSequenceVersion.
const (
	PostPaymentsSettingsCustomersParamsSequenceVersionN20240730 PostPaymentsSettingsCustomersParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeletePaymentsSettingsCustomersByIdParamsSequenceVersion.
const (
	DeletePaymentsSettingsCustomersByIdParamsSequenceVersionN20240730 DeletePaymentsSettingsCustomersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsCustomersByIdParamsSequenceVersion.
const (
	GetPaymentsSettingsCustomersByIdParamsSequenceVersionN20240730 GetPaymentsSettingsCustomersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutPaymentsSettingsCustomersByIdParamsSequenceVersion.
const (
	PutPaymentsSettingsCustomersByIdParamsSequenceVersionN20240730 PutPaymentsSettingsCustomersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostPaymentsSettingsInvoicesParamsSequenceVersion.
const (
	PostPaymentsSettingsInvoicesParamsSequenceVersionN20240730 PostPaymentsSettingsInvoicesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersion.
const (
	GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersionN20240730 GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeletePaymentsSettingsInvoicesByIdParamsSequenceVersion.
const (
	DeletePaymentsSettingsInvoicesByIdParamsSequenceVersionN20240730 DeletePaymentsSettingsInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPaymentsSettingsInvoicesByIdParamsSequenceVersion.
const (
	GetPaymentsSettingsInvoicesByIdParamsSequenceVersionN20240730 GetPaymentsSettingsInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutPaymentsSettingsInvoicesByIdParamsSequenceVersion.
const (
	PutPaymentsSettingsInvoicesByIdParamsSequenceVersionN20240730 PutPaymentsSettingsInvoicesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutPaymentsSettingsByIdParamsSequenceVersion.
const (
	PutPaymentsSettingsByIdParamsSequenceVersionN20240730 PutPaymentsSettingsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPricesParamsSequenceVersion.
const (
	GetPricesParamsSequenceVersionN20240730 GetPricesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostPricesParamsSequenceVersion.
const (
	PostPricesParamsSequenceVersionN20240730 PostPricesParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeletePricesByIdParamsSequenceVersion.
const (
	DeletePricesByIdParamsSequenceVersionN20240730 DeletePricesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetPricesByIdParamsSequenceVersion.
const (
	GetPricesByIdParamsSequenceVersionN20240730 GetPricesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutPricesByIdParamsSequenceVersion.
const (
	PutPricesByIdParamsSequenceVersionN20240730 PutPricesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetProductsParamsSequenceVersion.
const (
	GetProductsParamsSequenceVersionN20240730 GetProductsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostProductsParamsSequenceVersion.
const (
	PostProductsParamsSequenceVersionN20240730 PostProductsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetProductsByIdParamsSequenceVersion.
const (
	GetProductsByIdParamsSequenceVersionN20240730 GetProductsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutProductsByIdParamsSequenceVersion.
const (
	PutProductsByIdParamsSequenceVersionN20240730 PutProductsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostProductsByIdArchiveParamsSequenceVersion.
const (
	PostProductsByIdArchiveParamsSequenceVersionN20240730 PostProductsByIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSeatBalancesParamsSequenceVersion.
const (
	GetSeatBalancesParamsSequenceVersionN20240730 GetSeatBalancesParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSeatEventsParamsSequenceVersion.
const (
	GetSeatEventsParamsSequenceVersionN20240730 GetSeatEventsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostSeatEventsParamsSequenceVersion.
const (
	PostSeatEventsParamsSequenceVersionN20240730 PostSeatEventsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSeatEventsByIdParamsSequenceVersion.
const (
	GetSeatEventsByIdParamsSequenceVersionN20240730 GetSeatEventsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSeatMetricsParamsSequenceVersion.
const (
	GetSeatMetricsParamsSequenceVersionN20240730 GetSeatMetricsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostSeatMetricsParamsSequenceVersion.
const (
	PostSeatMetricsParamsSequenceVersionN20240730 PostSeatMetricsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteSeatMetricsByIdParamsSequenceVersion.
const (
	DeleteSeatMetricsByIdParamsSequenceVersionN20240730 DeleteSeatMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSeatMetricsByIdParamsSequenceVersion.
const (
	GetSeatMetricsByIdParamsSequenceVersionN20240730 GetSeatMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutSeatMetricsByIdParamsSequenceVersion.
const (
	PutSeatMetricsByIdParamsSequenceVersionN20240730 PutSeatMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSequenceAccountsParamsSequenceVersion.
const (
	GetSequenceAccountsParamsSequenceVersionN20240730 GetSequenceAccountsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetSequenceAccountsByIdParamsSequenceVersion.
const (
	GetSequenceAccountsByIdParamsSequenceVersionN20240730 GetSequenceAccountsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutSequenceAccountsByIdParamsSequenceVersion.
const (
	PutSequenceAccountsByIdParamsSequenceVersionN20240730 PutSequenceAccountsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRatesParamsSequenceVersion.
const (
	GetTaxRatesParamsSequenceVersionN20240730 GetTaxRatesParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostTaxRatesParamsSequenceVersion.
const (
	PostTaxRatesParamsSequenceVersionN20240730 PostTaxRatesParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteTaxRatesByIdParamsSequenceVersion.
const (
	DeleteTaxRatesByIdParamsSequenceVersionN20240730 DeleteTaxRatesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRatesByIdParamsSequenceVersion.
const (
	GetTaxRatesByIdParamsSequenceVersionN20240730 GetTaxRatesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutTaxRatesByIdParamsSequenceVersion.
const (
	PutTaxRatesByIdParamsSequenceVersionN20240730 PutTaxRatesByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostTaxRatesByIdArchiveParamsSequenceVersion.
const (
	PostTaxRatesByIdArchiveParamsSequenceVersionN20240730 PostTaxRatesByIdArchiveParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRegistrationsParamsSequenceVersion.
const (
	GetTaxRegistrationsParamsSequenceVersionN20240730 GetTaxRegistrationsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostTaxRegistrationsParamsSequenceVersion.
const (
	PostTaxRegistrationsParamsSequenceVersionN20240730 PostTaxRegistrationsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRegistrationsForCustomerByIdParamsSequenceVersion.
const (
	GetTaxRegistrationsForCustomerByIdParamsSequenceVersionN20240730 GetTaxRegistrationsForCustomerByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRegistrationsForMerchantByIdParamsSequenceVersion.
const (
	GetTaxRegistrationsForMerchantByIdParamsSequenceVersionN20240730 GetTaxRegistrationsForMerchantByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteTaxRegistrationsByIdParamsSequenceVersion.
const (
	DeleteTaxRegistrationsByIdParamsSequenceVersionN20240730 DeleteTaxRegistrationsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetTaxRegistrationsByIdParamsSequenceVersion.
const (
	GetTaxRegistrationsByIdParamsSequenceVersionN20240730 GetTaxRegistrationsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutTaxRegistrationsByIdParamsSequenceVersion.
const (
	PutTaxRegistrationsByIdParamsSequenceVersionN20240730 PutTaxRegistrationsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsageEventsParamsSequenceVersion.
const (
	GetUsageEventsParamsSequenceVersionN20240730 GetUsageEventsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostUsageEventsParamsSequenceVersion.
const (
	PostUsageEventsParamsSequenceVersionN20240730 PostUsageEventsParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsageMetricsParamsSequenceVersion.
const (
	GetUsageMetricsParamsSequenceVersionN20240730 GetUsageMetricsParamsSequenceVersion = "2024-07-30"
)

// Defines values for PostUsageMetricsParamsSequenceVersion.
const (
	PostUsageMetricsParamsSequenceVersionN20240730 PostUsageMetricsParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteUsageMetricsByIdParamsSequenceVersion.
const (
	DeleteUsageMetricsByIdParamsSequenceVersionN20240730 DeleteUsageMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsageMetricsByIdParamsSequenceVersion.
const (
	GetUsageMetricsByIdParamsSequenceVersionN20240730 GetUsageMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutUsageMetricsByIdParamsSequenceVersion.
const (
	PutUsageMetricsByIdParamsSequenceVersionN20240730 PutUsageMetricsByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersion.
const (
	GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersionN20240730 GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsersParamsSequenceVersion.
const (
	GetUsersParamsSequenceVersionN20240730 GetUsersParamsSequenceVersion = "2024-07-30"
)

// Defines values for DeleteUsersByIdParamsSequenceVersion.
const (
	DeleteUsersByIdParamsSequenceVersionN20240730 DeleteUsersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for GetUsersByIdParamsSequenceVersion.
const (
	GetUsersByIdParamsSequenceVersionN20240730 GetUsersByIdParamsSequenceVersion = "2024-07-30"
)

// Defines values for PutUsersByIdParamsSequenceVersion.
const (
	N20240730 PutUsersByIdParamsSequenceVersion = "2024-07-30"
)

// AccountPaymentSettings defines model for AccountPaymentSettings.
type AccountPaymentSettings struct {
	// FailureNotifications The failure notification settings for the account
	FailureNotifications PaymentFailureNotifications `json:"failureNotifications"`

	// Id The ID of the account's payment settings
	Id string `json:"id"`
}

// AddNotificationTypesToPolicyRequest defines model for AddNotificationTypesToPolicyRequest.
type AddNotificationTypesToPolicyRequest struct {
	// NotificationTypes The notification types to add to this policy
	NotificationTypes []NotificationType `json:"notificationTypes"`
}

// AddRecipientsToPolicyRequest defines model for AddRecipientsToPolicyRequest.
type AddRecipientsToPolicyRequest struct {
	// Recipients The webhook URLs or email addresses to add to the policy, depending on its channel
	Recipients []string `json:"recipients"`
}

// Address Address
type Address struct {
	Country CountryCode1 `json:"country"`

	// Line1 Address line 1
	Line1 string `json:"line1"`

	// Postcode Postal code
	Postcode string `json:"postcode"`
	State    *State `json:"state,omitempty"`

	// Town Town or city
	Town string `json:"town"`
}

// Address1 Customer's billing address
type Address1 struct {
	Country CountryCode2 `json:"country"`

	// Line1 Address line 1
	Line1 string `json:"line1"`

	// Line2 Address line 2
	Line2 *string `json:"line2,omitempty"`

	// Postcode Postal code
	Postcode string  `json:"postcode"`
	State    *State2 `json:"state,omitempty"`

	// Town Town or city
	Town string `json:"town"`
}

// AggregationType defines model for AggregationType.
type AggregationType string

// ArchiveTaxRateEndpointProductArchiveTaxRateResponseModel defines model for ArchiveTaxRateEndpointProductArchiveTaxRateResponseModel.
type ArchiveTaxRateEndpointProductArchiveTaxRateResponseModel struct {
	// Amount The tax rate. Must be between 0 and 100. If this tax rate has any sub-rates, then all sub-rates must add up to this amount.
	Amount  string      `json:"amount"`
	Country CountryCode `json:"country"`

	// Description The description of the tax rate
	Description *string `json:"description,omitempty"`

	// Id Tax Rate ID
	Id string `json:"id"`

	// InvoiceName The long name used on the invoice, e.g. "Value Added Tax"
	InvoiceName string `json:"invoiceName"`

	// InvoiceShortName The short name used on the invoice, e.g. "VAT"
	InvoiceShortName string `json:"invoiceShortName"`

	// IsArchived Archived
	IsArchived bool `json:"isArchived"`

	// IsPublished Tax Rate status
	IsPublished bool `json:"isPublished"`

	// Name The full name of the tax rate, e.g. "Sales tax"
	Name string `json:"name"`

	// Region The region that this tax rate applies to
	Region *string `json:"region,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// SubRates The sub rates of this tax rate
	SubRates *[]interface{} `json:"subRates,omitempty"`

	// TaxCategoryId The Tax Category Version ID that this Tax Rate is part of
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`

	// Version Tax Rate version
	Version int64 `json:"version"`

	// VersionId Tax Rate Version ID
	VersionId string `json:"versionId"`
}

// AssetFormat defines model for AssetFormat.
type AssetFormat string

// AssetResponse defines model for AssetResponse.
type AssetResponse struct {
	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// CreatedBy The Sequence user who created this asset
	CreatedBy string `json:"createdBy"`

	// FileName Filename of the uploaded file
	FileName string `json:"fileName"`

	// FileSizeBytes Size of the uploaded file in bytes
	FileSizeBytes int32       `json:"fileSizeBytes"`
	Format        AssetFormat `json:"format"`

	// Id Unique ID
	Id   string    `json:"id"`
	Type AssetType `json:"type"`

	// Url URL to download the asset
	Url string `json:"url"`
}

// AssetType defines model for AssetType.
type AssetType string

// AustralianBankAccountDestination Merchant's account details, for receiving payment to a Canadian bank via Australian bank transfer
type AustralianBankAccountDestination struct {
	AccountNumber string `json:"accountNumber"`
	Bsb           string `json:"bsb"`
	LegalName     string `json:"legalName"`
	SwiftCode     string `json:"swiftCode"`
}

// BillingFrequency defines model for BillingFrequency.
type BillingFrequency string

// BillingProduct defines model for BillingProduct.
type BillingProduct struct {
	// CreatedAt Created at
	CreatedAt string `json:"createdAt"`

	// Id Unique Product ID
	Id string `json:"id"`

	// Label The internal descriptive name of this item
	Label string `json:"label"`

	// Name The customer-facing name of this Product
	Name string `json:"name"`

	// Prices Prices
	Prices            []interface{}            `json:"prices"`
	RecognitionMethod RevenueRecognitionMethod `json:"recognitionMethod"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// TaxCategoryName The tax category associated with the product
	TaxCategoryName *string `json:"taxCategoryName,omitempty"`

	// UpdatedAt Updated At
	UpdatedAt string `json:"updatedAt"`
}

// BillingScheduleResponse defines model for BillingScheduleResponse.
type BillingScheduleResponse struct {
	// ArchivedAt Time at which the schedule was archived, in ISO 8601 format.
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// AttachmentAssets Assets attached to this billing schedule
	AttachmentAssets []AssetResponse `json:"attachmentAssets"`

	// AutoIssueInvoices If true, invoices will be automatically sent for this billing schedule
	AutoIssueInvoices bool `json:"autoIssueInvoices"`

	// CreatedAt Time at which the schedule was initially created, in ISO 8601 format.
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// EndDate End date
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// FirstBillingDate First billing date
	FirstBillingDate *openapi_types.Date `json:"firstBillingDate,omitempty"`

	// Id Billing Schedule ID
	Id string `json:"id"`

	// IntegrationIds External services which are linked to this customer
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// Label Optional label
	Label *string `json:"label,omitempty"`

	// LastInvoiceId ID of the last invoice (if there has been one)
	LastInvoiceId *string `json:"lastInvoiceId,omitempty"`

	// Phases Phases
	Phases []Phase `json:"phases"`

	// Prices Prices
	Prices []PriceResponse `json:"prices"`

	// PurchaseOrderNumber Optional purchase order number to be added to invoices
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// RecurrenceDayOfMonth The day of the month on which billing recurs
	RecurrenceDayOfMonth *int32 `json:"recurrenceDayOfMonth,omitempty"`

	// Reference Optional reference to be added to invoices
	Reference *string `json:"reference,omitempty"`

	// RollUpBilling Roll up billing
	RollUpBilling bool `json:"rollUpBilling"`

	// StartDate Start date
	StartDate openapi_types.Date                                 `json:"startDate"`
	Status    GetBillingScheduleEndpointApiBillingScheduleStatus `json:"status"`

	// TaxRates Tax Rate for each Product
	TaxRates *[]ProductTaxRateRepresentation `json:"taxRates,omitempty"`

	// UpdatedAt Time at which the schedule was last updated, in ISO 8601 format.
	UpdatedAt string `json:"updatedAt"`
}

// BillingScheduleSettings defines model for BillingScheduleSettings.
type BillingScheduleSettings struct {
	// AutoCharge Automatically collect payments if payment details are available
	AutoCharge bool `json:"autoCharge"`

	// BillingScheduleId Unique payment provider ID.
	BillingScheduleId string `json:"billingScheduleId"`

	// Id Unique payment provider ID.
	Id              string          `json:"id"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Unique Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// BillingType defines model for BillingType.
type BillingType string

// CanadianBankAccountDestination Merchant's Canadian account details, for receiving payment by Canadian bank transfer
type CanadianBankAccountDestination struct {
	AccountNumber     string `json:"accountNumber"`
	InstitutionNumber string `json:"institutionNumber"`
	TransitNumber     string `json:"transitNumber"`
}

// CanadianInternationalDestination Merchant's account details, for receiving payment to a Canadian bank via Wire transfer
type CanadianInternationalDestination struct {
	AccountNumber string `json:"accountNumber"`

	// BankAddress Customer's billing address
	BankAddress       Address1          `json:"bankAddress"`
	BankName          string            `json:"bankName"`
	InstitutionNumber string            `json:"institutionNumber"`
	IntermediaryBank  *IntermediaryBank `json:"intermediaryBank,omitempty"`
	LegalName         string            `json:"legalName"`
	SwiftCode         string            `json:"swiftCode"`
	TransitNumber     string            `json:"transitNumber"`
}

// Contact defines model for Contact.
type Contact struct {
	// ArchivedAt Time of archive. Formatted as an ISO 8601 timestamp.
	ArchivedAt        *string                  `json:"archivedAt,omitempty"`
	BillingPreference ContactBillingPreference `json:"billingPreference"`

	// CreatedAt Time of creation. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// Email Email address of this contact
	Email string `json:"email"`

	// Id Unique ID
	Id string `json:"id"`

	// Name Full name of this contact
	Name string `json:"name"`

	// UpdatedAt Time of last update. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// ContactBillingPreference defines model for ContactBillingPreference.
type ContactBillingPreference string

// ContactRequestModel defines model for ContactRequestModel.
type ContactRequestModel struct {
	BillingPreference ContactBillingPreference `json:"billingPreference"`

	// Email Email address of this contact
	Email string `json:"email"`

	// Name Full name of this contact
	Name string `json:"name"`
}

// CountryCode defines model for CountryCode.
type CountryCode string

// CountryCode1 defines model for CountryCode1.
type CountryCode1 string

// CountryCode2 defines model for CountryCode2.
type CountryCode2 string

// CreateBillingScheduleRequest defines model for CreateBillingScheduleRequest.
type CreateBillingScheduleRequest struct {
	// AttachmentAssetIds IDs of assets that are attached to this schedule
	AttachmentAssetIds *[]string `json:"attachmentAssetIds,omitempty"`

	// AutoCharge Automatically collect payments if payment details are available
	AutoCharge *bool `json:"autoCharge,omitempty"`

	// AutoIssueInvoices Auto-issue invoices for this billing schedule
	AutoIssueInvoices bool `json:"autoIssueInvoices"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// EndDate End date. A null end date denotes an open-ended schedule.
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// IsDraft Create in draft status
	IsDraft         bool             `json:"isDraft"`
	PaymentProvider *PaymentProvider `json:"paymentProvider,omitempty"`

	// Phases Phases
	Phases []PhaseRequest `json:"phases"`

	// PurchaseOrderNumber Optional purchase order number to be added to invoices
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// RecurrenceDayOfMonth Recurrence day of month
	RecurrenceDayOfMonth *int32 `json:"recurrenceDayOfMonth,omitempty"`

	// RollUpBilling Toggles Roll-up billing
	RollUpBilling bool `json:"rollUpBilling"`

	// StartDate Start date
	StartDate openapi_types.Date `json:"startDate"`

	// TaxRates Tax Rate for each Product
	TaxRates []ProductTaxRateRepresentation `json:"taxRates"`
}

// CreateBillingScheduleSettingsEndpointCreateBillingScheduleSettingsRequestModel defines model for CreateBillingScheduleSettingsEndpointCreateBillingScheduleSettingsRequestModel.
type CreateBillingScheduleSettingsEndpointCreateBillingScheduleSettingsRequestModel struct {
	// AutoCharge Automatically collect this payment if payment details are available
	AutoCharge *bool `json:"autoCharge,omitempty"`

	// BillingScheduleId Unique payment provider ID.
	BillingScheduleId string          `json:"billingScheduleId"`
	PaymentProvider   PaymentProvider `json:"paymentProvider"`
}

// CreateCreditGrantEndpointCreateCreditGrantRequestModel defines model for CreateCreditGrantEndpointCreateCreditGrantRequestModel.
type CreateCreditGrantEndpointCreateCreditGrantRequestModel struct {
	// Amount Amount of Units Granted
	Amount float32 `json:"amount"`

	// CostOfCredit Cost of Credit Grant, to be Invoiced to the Customer
	CostOfCredit *float32 `json:"costOfCredit,omitempty"`

	// CreateInvoice If true we will create an invoice to charge the customer for this grant
	CreateInvoice  *bool          `json:"createInvoice,omitempty"`
	CreditUnitType CreditUnitType `json:"creditUnitType"`
	Currency       Currency       `json:"currency"`

	// CustomerId The ID of the Customer Credit is granted to
	CustomerId string `json:"customerId"`

	// EffectiveDate First Day Credit Grant can be consumed
	EffectiveDate *openapi_types.Date `json:"effectiveDate,omitempty"`

	// ExpiryDate Last Day Credit Grant can be consumed
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// MetricId Metric ID (if CreditUnitType is METRIC)
	MetricId *string `json:"metricId,omitempty"`

	// Name Name of the Credit Grant
	Name string `json:"name"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`
}

// CreateCreditGrantEndpointProductCreateCreditGrantResponseModel defines model for CreateCreditGrantEndpointProductCreateCreditGrantResponseModel.
type CreateCreditGrantEndpointProductCreateCreditGrantResponseModel struct {
	// Amount Amount of Units Granted
	Amount float32 `json:"amount"`

	// CostOfCredit Cost of Credit Grant, to be Invoiced to the Customer
	CostOfCredit *float32 `json:"costOfCredit,omitempty"`

	// CreatedAt The created at
	CreatedAt      string         `json:"createdAt"`
	CreditUnitType CreditUnitType `json:"creditUnitType"`
	Currency       *Currency      `json:"currency,omitempty"`

	// CustomerId The ID of the Customer Credit is granted to
	CustomerId string `json:"customerId"`

	// EffectiveDate First Day Credit Grant can be consumed
	EffectiveDate *openapi_types.Date `json:"effectiveDate,omitempty"`

	// ExpiryDate Last Day Credit Grant can be consumed
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// Id Credit Grant ID
	Id string `json:"id"`

	// IntegrationIds IDs in external integrations
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// MetricId Metric ID (if CreditUnitType is METRIC)
	MetricId *string `json:"metricId,omitempty"`

	// Name Name of the Credit Grant
	Name string `json:"name"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`
}

// CreateCreditNoteEndpointCreateCreditNoteRequestModel defines model for CreateCreditNoteEndpointCreateCreditNoteRequestModel.
type CreateCreditNoteEndpointCreateCreditNoteRequestModel struct {
	// BillingPeriodEnd Billing period end
	BillingPeriodEnd *string `json:"billingPeriodEnd,omitempty"`

	// BillingPeriodStart Billing period start
	BillingPeriodStart *string  `json:"billingPeriodStart,omitempty"`
	Currency           Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress *Address1 `json:"customerBillingAddress,omitempty"`

	// CustomerEmails Customer's email addresses, used for sending the Credit Note if provided
	CustomerEmails *[]string `json:"customerEmails,omitempty"`

	// CustomerId The ID of the Customer this Credit Note is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName *string `json:"customerLegalCompanyName,omitempty"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress *Address1 `json:"customerShippingAddress,omitempty"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId *string `json:"customerTaxId,omitempty"`

	// InvoiceId Invoice ID
	InvoiceId *string `json:"invoiceId,omitempty"`

	// Memo Credit Note memo
	Memo *string `json:"memo,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Credit Note. These are not interpreted by Sequence; they are present for your use alone.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// CreateCreditNoteLineItemEndpointCreateCreditNoteLineItemRequestModel defines model for CreateCreditNoteLineItemEndpointCreateCreditNoteLineItemRequestModel.
type CreateCreditNoteLineItemEndpointCreateCreditNoteLineItemRequestModel struct {
	// CreditNoteId Credit Note Line Item ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GroupId Credit Note Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// LineItemId Line Item ID
	LineItemId *string `json:"lineItemId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string       `json:"rate"`
	RateDisplay *RateDisplay `json:"rateDisplay,omitempty"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`
}

// CreateCreditNoteLineItemEndpointProductCreateCreditNoteLineItemResponseModel defines model for CreateCreditNoteLineItemEndpointProductCreateCreditNoteLineItemResponseModel.
type CreateCreditNoteLineItemEndpointProductCreateCreditNoteLineItemResponseModel struct {
	// CreditNoteId Credit Note Line Item ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GrossTotal Gross Total
	GrossTotal string `json:"grossTotal"`

	// GroupId Credit Note Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// Id Credit Note Line Item ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemId Line Item ID
	LineItemId *string `json:"lineItemId,omitempty"`

	// NetTotal Net Total
	NetTotal string `json:"netTotal"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string      `json:"rate"`
	RateDisplay RateDisplay `json:"rateDisplay"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`

	// TotalTax Total Tax
	TotalTax string `json:"totalTax"`
}

// CreateCreditNoteLineItemGroupEndpointCreateCreditNoteLineItemGroupRequestModel defines model for CreateCreditNoteLineItemGroupEndpointCreateCreditNoteLineItemGroupRequestModel.
type CreateCreditNoteLineItemGroupEndpointCreateCreditNoteLineItemGroupRequestModel struct {
	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// LineItemGroupId Line Item Group ID
	LineItemGroupId *string `json:"lineItemGroupId,omitempty"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`
}

// CreateCreditNoteLineItemGroupEndpointProductCreateCreditNoteLineItemGroupResponseModel defines model for CreateCreditNoteLineItemGroupEndpointProductCreateCreditNoteLineItemGroupResponseModel.
type CreateCreditNoteLineItemGroupEndpointProductCreateCreditNoteLineItemGroupResponseModel struct {
	// CreditNoteId Credit Note ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// GrossTotal Gross total
	GrossTotal string `json:"grossTotal"`

	// Id Credit Note Line Item Group ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemGroupId Line Item Group ID
	LineItemGroupId *string `json:"lineItemGroupId,omitempty"`

	// NetTotal Net total
	NetTotal string `json:"netTotal"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`

	// TotalTax Total tax
	TotalTax string `json:"totalTax"`
}

// CreateCustomerAliasEndpointCreateCustomerAliasRequestModel defines model for CreateCustomerAliasEndpointCreateCustomerAliasRequestModel.
type CreateCustomerAliasEndpointCreateCustomerAliasRequestModel struct {
	// ArchivedAt Archived At
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// DeletedAt Deleted At
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Label Alias label
	Label *string `json:"label,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// CreateCustomerAliasEndpointProductCreateCustomerAliasResponseModel defines model for CreateCustomerAliasEndpointProductCreateCustomerAliasResponseModel.
type CreateCustomerAliasEndpointProductCreateCustomerAliasResponseModel struct {
	// ArchivedAt Archived At
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// CreatedAt Created At
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// DeletedAt Deleted At
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// Label Alias label
	Label *string `json:"label,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// CreateCustomerSettingsEndpointCreateCustomerSettingsRequestModel defines model for CreateCustomerSettingsEndpointCreateCustomerSettingsRequestModel.
type CreateCustomerSettingsEndpointCreateCustomerSettingsRequestModel struct {
	// CustomerId Customer Account ID.
	CustomerId      string          `json:"customerId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`
}

// CreateCustomerSettingsEndpointProductCreateCustomerSettingsResponseModel defines model for CreateCustomerSettingsEndpointProductCreateCustomerSettingsResponseModel.
type CreateCustomerSettingsEndpointProductCreateCustomerSettingsResponseModel struct {
	// CustomerId Customer Account ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id              string          `json:"id"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// CreateInvoiceSettingsEndpointCreateInvoiceSettingsRequestModel defines model for CreateInvoiceSettingsEndpointCreateInvoiceSettingsRequestModel.
type CreateInvoiceSettingsEndpointCreateInvoiceSettingsRequestModel struct {
	// CustomerId Customer ID.
	CustomerId *string `json:"customerId,omitempty"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`
}

// CreateInvoiceSettingsEndpointProductCreateInvoiceSettingsResponseModel defines model for CreateInvoiceSettingsEndpointProductCreateInvoiceSettingsResponseModel.
type CreateInvoiceSettingsEndpointProductCreateInvoiceSettingsResponseModel struct {
	// CustomerId Customer ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id string `json:"id"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// CreateLineItemGroupRequestModel defines model for CreateLineItemGroupRequestModel.
type CreateLineItemGroupRequestModel struct {
	// Description Line Item Group Description
	Description *string `json:"description,omitempty"`

	// TaxCategoryId The tax category for all line items in this line item group
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`

	// Title Line Item Group Title
	Title string `json:"title"`
}

// CreateNotificationPolicyRequest defines model for CreateNotificationPolicyRequest.
type CreateNotificationPolicyRequest struct {
	Channel NotificationChannel `json:"channel"`

	// Name Human-readable name
	Name string `json:"name"`

	// NotificationTypes Set of notification types that this policy matches. If not provided, then this policy will apply to all notification types.
	NotificationTypes *[]NotificationType `json:"notificationTypes,omitempty"`

	// Recipients The webhook URLs or email addresses which will receive notifications, depending on the channel
	Recipients []string `json:"recipients"`

	// WebhookSecret Webhook secret used to generate a signature header that's sent with an outbound webhook.It can be used to verify the authenticity of received Sequence webhooks. Only available for webhook channel policies.
	WebhookSecret *string `json:"webhookSecret,omitempty"`
}

// CreateOrUpdateCustomerRequest defines model for CreateOrUpdateCustomerRequest.
type CreateOrUpdateCustomerRequest struct {
	// Address Address
	Address Address `json:"address"`

	// Contacts Contacts to create for this customer. This will replace all existing contacts for this customer.
	Contacts []ContactRequestModel `json:"contacts"`

	// CustomerAliases Customer aliases
	CustomerAliases *[]string `json:"customerAliases,omitempty"`

	// IntegrationIds IDs in external integrations
	IntegrationIds *[]GenerateIntegrationIdRequest `json:"integrationIds,omitempty"`

	// Label Label
	Label *string `json:"label,omitempty"`

	// LegalName Legal name
	LegalName string `json:"legalName"`

	// ParentId ID of a parent customer. Populate this field to create a new customeras a child customer of another, existing customer.
	ParentId *string `json:"parentId,omitempty"`

	// PushToIntegrations Automatically create customer in these linked integrations
	PushToIntegrations *[]CreateOrUpdateCustomerRequestIntegration `json:"pushToIntegrations,omitempty"`
	TaxStatus          TaxStatus                                   `json:"taxStatus"`

	// Url URL
	Url *string `json:"url,omitempty"`
}

// CreateOrUpdateCustomerRequestIntegration defines model for CreateOrUpdateCustomerRequestIntegration.
type CreateOrUpdateCustomerRequestIntegration string

// CreateSeatEventEndpointCreateSeatEventRequestModel defines model for CreateSeatEventEndpointCreateSeatEventRequestModel.
type CreateSeatEventEndpointCreateSeatEventRequestModel struct {
	// CustomerAlias End-customer alias or ID.
	CustomerAlias string `json:"customerAlias"`

	// CustomerEventId Unique ID provided by customer. Another event with the same customer event ID will supersede this one.
	CustomerEventId *string `json:"customerEventId,omitempty"`

	// EventTimestamp Event timestamp, in ISO 8601 format.
	EventTimestamp string `json:"eventTimestamp"`

	// SeatType Seat type. This can be referenced from a seat metric.
	SeatType string `json:"seatType"`

	// Total Total seats consumed for this seat type.
	Total int `json:"total"`
}

// CreateSeatEventEndpointProductCreateSeatEventResponseModel defines model for CreateSeatEventEndpointProductCreateSeatEventResponseModel.
type CreateSeatEventEndpointProductCreateSeatEventResponseModel struct {
	// CustomerAlias End-customer alias or ID.
	CustomerAlias string `json:"customerAlias"`

	// CustomerEventId Unique ID provided by customer. Another event with the same customer event ID will supersede this one.
	CustomerEventId string `json:"customerEventId"`

	// EventTimestamp Event timestamp, in ISO 8601 format.
	EventTimestamp string `json:"eventTimestamp"`

	// Id Unique ID for this seat event.
	Id string `json:"id"`

	// SeatType Seat type. This can be referenced from a seat metric.
	SeatType string `json:"seatType"`

	// SequenceAccountId Unique Sequence account ID.
	SequenceAccountId string `json:"sequenceAccountId"`

	// Total Total seats consumed for this seat type.
	Total int `json:"total"`
}

// CreateSeatMetricRequest defines model for CreateSeatMetricRequest.
type CreateSeatMetricRequest struct {
	// Description Optional description for this seat metric.
	Description *string `json:"description,omitempty"`

	// Label Friendly, customer-facing name for this seat metric.
	Label string `json:"label"`

	// SeatType E.g. `admin_user`. An immutable, unique value used to identify and refer to this seat type. It should be lower snakecase
	SeatType string `json:"seatType"`
}

// CreateTaxRateRequest defines model for CreateTaxRateRequest.
type CreateTaxRateRequest struct {
	// Amount The tax rate. Must be between 0 and 100.
	Amount  string      `json:"amount"`
	Country CountryCode `json:"country"`

	// Description The description of the tax rate
	Description *string `json:"description,omitempty"`

	// InvoiceName The long name used on the invoice, e.g. "Value Added Tax"
	InvoiceName string `json:"invoiceName"`

	// InvoiceShortName The short name used on the invoice, e.g. "VAT"
	InvoiceShortName string `json:"invoiceShortName"`

	// IsPublished Tax Rate status
	IsPublished bool `json:"isPublished"`

	// Name The full name of the tax rate, e.g. "Sales tax"
	Name string `json:"name"`

	// Region The region that this tax rate applies to
	Region *string `json:"region,omitempty"`

	// TaxCategoryId The Tax Category Version ID that this Tax Rate is part of
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`
}

// CreateTaxRegistrationEndpointCreateTaxRegistrationRequestModel defines model for CreateTaxRegistrationEndpointCreateTaxRegistrationRequestModel.
type CreateTaxRegistrationEndpointCreateTaxRegistrationRequestModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`
	State      *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// CreateTaxRegistrationEndpointProductCreateTaxRegistrationResponseModel defines model for CreateTaxRegistrationEndpointProductCreateTaxRegistrationResponseModel.
type CreateTaxRegistrationEndpointProductCreateTaxRegistrationResponseModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// CreateUsageEventEndpointCreateUsageEventRequestModel defines model for CreateUsageEventEndpointCreateUsageEventRequestModel.
type CreateUsageEventEndpointCreateUsageEventRequestModel struct {
	// CustomerAlias End-customer alias or ID
	CustomerAlias string `json:"customerAlias"`

	// CustomerEventId ID provided by customer. Another event with the same customer event ID will supersede this one.
	CustomerEventId *string `json:"customerEventId,omitempty"`

	// EventProperties Event properties. These can be referenced by a usage metric.
	EventProperties *map[string]map[string]interface{} `json:"eventProperties,omitempty"`

	// EventTimestamp Event timestamp, in ISO 8601 format.
	EventTimestamp *string `json:"eventTimestamp,omitempty"`

	// EventType Event type. This can be referenced from a usage metric.
	EventType string `json:"eventType"`
}

// CreateUsageEventEndpointProductCreateUsageEventResponseModel defines model for CreateUsageEventEndpointProductCreateUsageEventResponseModel.
type CreateUsageEventEndpointProductCreateUsageEventResponseModel struct {
	// CustomerAlias End-customer alias or ID
	CustomerAlias string `json:"customerAlias"`

	// CustomerEventId ID provided by customer. Another event with the same customer event ID will supersede this one.
	CustomerEventId string `json:"customerEventId"`

	// EventProperties Event properties. These can be referenced by a usage metric.
	EventProperties map[string]map[string]interface{} `json:"eventProperties"`

	// EventTimestamp Event timestamp, in ISO 8601 format.
	EventTimestamp string `json:"eventTimestamp"`

	// EventType Event type. This can be referenced from a usage metric.
	EventType string `json:"eventType"`

	// Id Unique ID
	Id string `json:"id"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string `json:"sequenceAccountId"`
}

// CreateUsageMetricEndpointCreateUsageMetricRequestModel defines model for CreateUsageMetricEndpointCreateUsageMetricRequestModel.
type CreateUsageMetricEndpointCreateUsageMetricRequestModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string    `json:"groupingProperty,omitempty"`
	MetricType       MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters *map[string]map[string]interface{} `json:"propertyFilters,omitempty"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// CreateUsageMetricEndpointProductCreateUsageMetricResponseModel defines model for CreateUsageMetricEndpointProductCreateUsageMetricResponseModel.
type CreateUsageMetricEndpointProductCreateUsageMetricResponseModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// CreatedAt Created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string `json:"groupingProperty,omitempty"`

	// Id Unique ID
	Id         string     `json:"id"`
	MetricType MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// Parameters Required parameters
	Parameters []CustomMetricParameter `json:"parameters"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters map[string]map[string]interface{} `json:"propertyFilters"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// CreditBalance defines model for CreditBalance.
type CreditBalance struct {
	// Balance Amount remaining of Credits Granted
	Balance string `json:"balance"`

	// Grants Related credit grants
	Grants []CreditGrant `json:"grants"`

	// Id Indicates the ID of Credit target, either a currency code or a metric id
	Id string `json:"id"`

	// Name Name of the Credit - will either be the currency or name of the metric
	Name string `json:"name"`

	// Transactions Related credit transactions
	Transactions []CreditTransaction `json:"transactions"`
	Type         CreditType          `json:"type"`
}

// CreditBalancesReply defines model for CreditBalancesReply.
type CreditBalancesReply struct {
	Items []CreditBalance `json:"items"`
}

// CreditGrant defines model for CreditGrant.
type CreditGrant struct {
	// CostOfCredit Cost of credit grant
	CostOfCredit string `json:"costOfCredit"`

	// CreatedAt The created at
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CurrentBalance Amount remaining of Credits Granted
	CurrentBalance string `json:"currentBalance"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// EffectiveDate First Day Credit Grant can be consumed
	EffectiveDate *openapi_types.Date `json:"effectiveDate,omitempty"`

	// ExpiryDate Last Day Credit Grant can be consumed
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// Id Credit Grant ID
	Id string `json:"id"`

	// MetricId Usage metric ID (if type is USAGE)
	MetricId *string `json:"metricId,omitempty"`

	// Name Name of the Credit - will either be the currency or name of the metric
	Name string `json:"name"`

	// OriginalAmount Amount of credits originally granted
	OriginalAmount string `json:"originalAmount"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// TaxRateId Tax Rate ID for Credit Purchase
	TaxRateId *string    `json:"taxRateId,omitempty"`
	Type      CreditType `json:"type"`
}

// CreditNote defines model for CreditNote.
type CreditNote struct {
	// AccountingDate Accounting date
	AccountingDate *openapi_types.Date `json:"accountingDate,omitempty"`

	// BillingPeriodEnd Billing period end
	BillingPeriodEnd *string `json:"billingPeriodEnd,omitempty"`

	// BillingPeriodStart Billing period start
	BillingPeriodStart *string `json:"billingPeriodStart,omitempty"`

	// BillingScheduleId Subscription ID
	BillingScheduleId *string `json:"billingScheduleId,omitempty"`

	// CreditNoteNumber Credit Note number
	CreditNoteNumber *string  `json:"creditNoteNumber,omitempty"`
	Currency         Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress Address1 `json:"customerBillingAddress"`

	// CustomerEmails Customer's email addresses, used for sending the Credit Note if provided
	CustomerEmails []string `json:"customerEmails"`

	// CustomerId The ID of the Customer this Credit Note is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName string `json:"customerLegalCompanyName"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress Address1 `json:"customerShippingAddress"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId *string `json:"customerTaxId,omitempty"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// Id Credit Note ID
	Id string `json:"id"`

	// InvoiceId Invoice ID
	InvoiceId *string `json:"invoiceId,omitempty"`

	// InvoiceNumber Invoice Number
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IssueDate Issue date
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// LinkedServices External services which are linked to this credit note
	LinkedServices []LinkInfo `json:"linkedServices"`

	// Memo Credit Note memo
	Memo *string `json:"memo,omitempty"`

	// MerchantDetails Merchant details
	MerchantDetails *InvoiceMerchantDetails `json:"merchantDetails,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Credit Note. These are not interpreted by Sequence; they are present for your use alone.
	Metadata []KeyValuePair `json:"metadata"`

	// NetTotal Net total, in decimal format of the Credit Note's currency
	NetTotal string `json:"netTotal"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Settings Credit note settings
	Settings CreditNoteSettings `json:"settings"`
	Status   CreditNoteStatus   `json:"status"`

	// TotalTax Total tax, in decimal format of the Credit Note's currency
	TotalTax string `json:"totalTax"`
}

// CreditNoteSettings Credit note settings
type CreditNoteSettings struct {
	GenerateCashCreditGrant SettingPreference `json:"generateCashCreditGrant"`
}

// CreditNoteStatus defines model for CreditNoteStatus.
type CreditNoteStatus string

// CreditTransaction defines model for CreditTransaction.
type CreditTransaction struct {
	// Amount Number of units added or consumed
	Amount string `json:"amount"`

	// BillingRunId Billing Run ID where Credit was consumed
	BillingRunId *string `json:"billingRunId,omitempty"`

	// Date Date of transaction
	Date openapi_types.Date `json:"date"`

	// GrantId Credit Grant ID
	GrantId string `json:"grantId"`

	// Id Credit Transaction ID
	Id *string `json:"id,omitempty"`

	// InvoiceId Invoice ID where Credit was consumed
	InvoiceId *string `json:"invoiceId,omitempty"`

	// Reason Transaction Reason
	Reason *string `json:"reason,omitempty"`

	// Type Credit Transaction Type
	Type string `json:"type"`
}

// CreditType defines model for CreditType.
type CreditType string

// CreditUnitType defines model for CreditUnitType.
type CreditUnitType string

// Currency defines model for Currency.
type Currency string

// CustomMetricParameter defines model for CustomMetricParameter.
type CustomMetricParameter struct {
	DefaultValue  string              `json:"defaultValue"`
	Description   string              `json:"description"`
	Id            string              `json:"id"`
	Name          string              `json:"name"`
	Type          CustomParameterType `json:"type"`
	UsageMetricId string              `json:"usageMetricId"`
}

// CustomParameterType defines model for CustomParameterType.
type CustomParameterType string

// Customer defines model for Customer.
type Customer struct {
	// Address Address
	Address Address `json:"address"`

	// Contacts Contacts for this customer
	Contacts []Contact `json:"contacts"`

	// CreatedAt Time at which the customer was initially created, in ISO 8601 format
	CreatedAt string `json:"createdAt"`

	// Domain Customer's primary domain name
	Domain *string `json:"domain,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds External services which are linked to this customer
	IntegrationIds []IntegrationId `json:"integrationIds"`

	// Label Label
	Label *string `json:"label,omitempty"`

	// LegalName Legal name
	LegalName string `json:"legalName"`

	// Organizations Organizations that this customer is a member of
	Organizations []CustomerOrganization `json:"organizations"`
	TaxStatus     TaxStatus              `json:"taxStatus"`

	// Url URL
	Url *string `json:"url,omitempty"`
}

// Customer20240509 defines model for Customer20240509.
type Customer20240509 struct {
	// Address Address
	Address Address `json:"address"`

	// ArchivedAt Date and time the Customer was archived
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// BillingEmails Billing email addresses
	BillingEmails []string `json:"billingEmails"`

	// ContactName Contact Name
	ContactName *string `json:"contactName,omitempty"`

	// CreatedAt Created at
	CreatedAt string `json:"createdAt"`

	// Email Main contact email address
	Email string `json:"email"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds External services which are linked to this customer
	IntegrationIds []IntegrationId `json:"integrationIds"`

	// Label Label
	Label *string `json:"label,omitempty"`

	// LegalName Legal name
	LegalName string    `json:"legalName"`
	TaxStatus TaxStatus `json:"taxStatus"`

	// Telephone Telephone
	Telephone *string `json:"telephone,omitempty"`

	// Url URL
	Url *string `json:"url,omitempty"`
}

// CustomerAlias defines model for CustomerAlias.
type CustomerAlias struct {
	// CreatedAt Created At
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// Id Unique ID
	Id string `json:"id"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// CustomerIdWithName ID of the customer that will own the organization.
type CustomerIdWithName struct {
	// Id Customer ID
	Id string `json:"id"`

	// Name Customer legal name
	Name string `json:"name"`
}

// CustomerOrganization defines model for CustomerOrganization.
type CustomerOrganization struct {
	// Id Organization ID
	Id string `json:"id"`

	// Members Members of the customer organization, excluding the owner. These are the children in a parent-child relationship.
	Members []CustomerIdWithName `json:"members"`

	// Owner ID of the customer that will own the organization.
	Owner CustomerIdWithName `json:"owner"`
}

// CustomerOrganizationMembers defines model for CustomerOrganizationMembers.
type CustomerOrganizationMembers struct {
	// CustomerIds IDs of customers to add to an existing organization.
	CustomerIds []string `json:"customerIds"`
}

// CustomerOrganizationRequest defines model for CustomerOrganizationRequest.
type CustomerOrganizationRequest struct {
	// MemberIds IDs of the customers who are members of this organization, excluding the owner. These are the children in a parent-child relationship. You can pass an empty array if they are not yet known.
	MemberIds []string `json:"memberIds"`

	// OwnerId ID of the customer that will own the organization.
	OwnerId string `json:"ownerId"`
}

// CustomerSeatBalances defines model for CustomerSeatBalances.
type CustomerSeatBalances struct {
	// Balances Seat balance per seat type
	Balances []SeatBalance `json:"balances"`

	// ChangeTimestamp Timestamp of when the customer seats last changed
	ChangeTimestamp string   `json:"changeTimestamp"`
	CustomerAliases []string `json:"customerAliases"`

	// Id Customer ID
	Id string `json:"id"`

	// LegalName Legal name
	LegalName string `json:"legalName"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Total Total seats balance
	Total int `json:"total"`
}

// DatabaseErrors defines model for DatabaseErrors.
type DatabaseErrors struct {
	Errors []interface{} `json:"errors"`
}

// DateRange Service Period
type DateRange struct {
	EndDate   openapi_types.Date `json:"endDate"`
	StartDate openapi_types.Date `json:"startDate"`
}

// DeleteCreditNoteLineItemEndpointProductDeleteCreditNoteLineItemResponseModel defines model for DeleteCreditNoteLineItemEndpointProductDeleteCreditNoteLineItemResponseModel.
type DeleteCreditNoteLineItemEndpointProductDeleteCreditNoteLineItemResponseModel struct {
	// CreditNoteId Credit Note Line Item ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GrossTotal Gross Total
	GrossTotal string `json:"grossTotal"`

	// GroupId Credit Note Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// Id Credit Note Line Item ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemId Line Item ID
	LineItemId *string `json:"lineItemId,omitempty"`

	// NetTotal Net Total
	NetTotal string `json:"netTotal"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string      `json:"rate"`
	RateDisplay RateDisplay `json:"rateDisplay"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`

	// TotalTax Total Tax
	TotalTax string `json:"totalTax"`
}

// DeleteCreditNoteLineItemGroupEndpointProductDeleteCreditNoteLineItemGroupResponseModel defines model for DeleteCreditNoteLineItemGroupEndpointProductDeleteCreditNoteLineItemGroupResponseModel.
type DeleteCreditNoteLineItemGroupEndpointProductDeleteCreditNoteLineItemGroupResponseModel struct {
	// CreditNoteId Credit Note ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// GrossTotal Gross total
	GrossTotal string `json:"grossTotal"`

	// Id Credit Note Line Item Group ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemGroupId Line Item Group ID
	LineItemGroupId *string `json:"lineItemGroupId,omitempty"`

	// NetTotal Net total
	NetTotal string `json:"netTotal"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`

	// TotalTax Total tax
	TotalTax string `json:"totalTax"`
}

// DeleteCustomerAliasEndpointProductDeleteCustomerAliasResponseModel defines model for DeleteCustomerAliasEndpointProductDeleteCustomerAliasResponseModel.
type DeleteCustomerAliasEndpointProductDeleteCustomerAliasResponseModel struct {
	// ArchivedAt Archived At
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// CreatedAt Created At
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// DeletedAt Deleted At
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// Label Alias label
	Label *string `json:"label,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// DeleteCustomerSettingsEndpointProductDeleteCustomerSettingsResponseModel defines model for DeleteCustomerSettingsEndpointProductDeleteCustomerSettingsResponseModel.
type DeleteCustomerSettingsEndpointProductDeleteCustomerSettingsResponseModel struct {
	// CustomerId Customer Account ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id              string          `json:"id"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// DeleteDiscountEndpointProductDeleteDiscountResponseModel defines model for DeleteDiscountEndpointProductDeleteDiscountResponseModel.
type DeleteDiscountEndpointProductDeleteDiscountResponseModel struct {
	// Amount Amount to be reduced
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt               string                  `json:"createdAt"`
	DiscountCalculationType DiscountCalculationType `json:"discountCalculationType"`

	// Id Discount ID
	Id string `json:"id"`

	// Message Message to appear on the Invoice
	Message string `json:"message"`

	// PhaseId Phase ID
	PhaseId *string `json:"phaseId,omitempty"`

	// PriceIds Price IDs this discount applies to. If not populated, the discount applies to all prices on the billing schedule
	PriceIds []string `json:"priceIds"`

	// SeparateLineItem Indicates whether the discount should appear as a separate line item in the invoice
	SeparateLineItem bool `json:"separateLineItem"`

	// SequenceAccountId The Sequence Account to which this Discount belongs
	SequenceAccountId string `json:"sequenceAccountId"`

	// UpdatedAt Updated At
	UpdatedAt string `json:"updatedAt"`

	// ValidFrom First Day Discount is Valid
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// ValidTo Last Day Discount is Valid
	ValidTo *openapi_types.Date `json:"validTo,omitempty"`
}

// DeleteInvoiceEndpointProductDeleteInvoiceResponseModel defines model for DeleteInvoiceEndpointProductDeleteInvoiceResponseModel.
type DeleteInvoiceEndpointProductDeleteInvoiceResponseModel struct {
	// AccountingDate Accounting date
	AccountingDate openapi_types.Date `json:"accountingDate"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId *string `json:"billingScheduleId,omitempty"`

	// CalculatedAt Time this invoice was last calculated (applicable for invoices generated by billing engine only)
	CalculatedAt *string `json:"calculatedAt,omitempty"`

	// CreatedAt Creation time
	CreatedAt string `json:"createdAt"`

	// CreditBalances Credit balances
	CreditBalances *string `json:"creditBalances,omitempty"`

	// CreditNoteIds IDs of linked credit notes (if any)
	CreditNoteIds []string `json:"creditNoteIds"`
	Currency      Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress Address1 `json:"customerBillingAddress"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails []string `json:"customerEmails"`

	// CustomerId The ID of the Customer this invoice is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName string `json:"customerLegalCompanyName"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress Address1 `json:"customerShippingAddress"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId     *string    `json:"customerTaxId,omitempty"`
	CustomerTaxStatus *TaxStatus `json:"customerTaxStatus,omitempty"`

	// DueDate Due date
	DueDate       *openapi_types.Date   `json:"dueDate,omitempty"`
	DunningStatus *InvoiceDunningStatus `json:"dunningStatus,omitempty"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// Id Invoice ID
	Id string `json:"id"`

	// InvoiceNumber Invoice number
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsCustomerArchived isCustomerArchived
	IsCustomerArchived bool `json:"isCustomerArchived"`

	// IssueDate Issue date
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// LinkedServices External services which are linked to this invoice
	LinkedServices []LinkInfo `json:"linkedServices"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// MerchantDetails Merchant details
	MerchantDetails *InvoiceMerchantDetails `json:"merchantDetails,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata []KeyValuePair `json:"metadata"`

	// NetTotal Net total, in decimal format of the Invoice's currency
	NetTotal string `json:"netTotal"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`
	PaymentStatus  InvoicePaymentStatus    `json:"paymentStatus"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`

	// RenderSettings Settings that control how the invoice is rendered.
	RenderSettings InvoiceRenderSettingsInlineAggregate `json:"renderSettings"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string        `json:"sequenceAccountId"`
	Status            InvoiceStatus `json:"status"`

	// TotalTax Total tax, in decimal format of the Invoice's currency
	TotalTax string `json:"totalTax"`
}

// DeleteInvoiceSettingsEndpointProductDeleteInvoiceSettingsResponseModel defines model for DeleteInvoiceSettingsEndpointProductDeleteInvoiceSettingsResponseModel.
type DeleteInvoiceSettingsEndpointProductDeleteInvoiceSettingsResponseModel struct {
	// CustomerId Customer ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id string `json:"id"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// DeleteTaxRegistrationEndpointProductDeleteTaxRegistrationResponseModel defines model for DeleteTaxRegistrationEndpointProductDeleteTaxRegistrationResponseModel.
type DeleteTaxRegistrationEndpointProductDeleteTaxRegistrationResponseModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// DeleteUsageMetricEndpointProductDeleteUsageMetricResponseModel defines model for DeleteUsageMetricEndpointProductDeleteUsageMetricResponseModel.
type DeleteUsageMetricEndpointProductDeleteUsageMetricResponseModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// CreatedAt Created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string `json:"groupingProperty,omitempty"`

	// Id Unique ID
	Id         string     `json:"id"`
	MetricType MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// Parameters Required parameters
	Parameters []CustomMetricParameter `json:"parameters"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters map[string]map[string]interface{} `json:"propertyFilters"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// DiscountCalculationType defines model for DiscountCalculationType.
type DiscountCalculationType string

// EmbeddableDiscount defines model for EmbeddableDiscount.
type EmbeddableDiscount struct {
	// Amount The discount amount
	Amount float32 `json:"amount"`

	// Message The message to show on an invoice
	Message string `json:"message"`

	// RestrictToPrices Price IDs to which this discount applies
	RestrictToPrices *[]string `json:"restrictToPrices,omitempty"`

	// SeparateLineItem If true the discount will show as a separate line item on an invoice
	SeparateLineItem bool                    `json:"separateLineItem"`
	Type             DiscountCalculationType `json:"type"`
}

// FixedListPriceRequest defines model for FixedListPriceRequest.
type FixedListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure FixedPricingStructure `json:"structure"`
}

// FixedListPriceResponse defines model for FixedListPriceResponse.
type FixedListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure FixedPricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// FixedPriceRequest defines model for FixedPriceRequest.
type FixedPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure FixedPricingStructure1 `json:"structure"`
}

// FixedPriceResponse defines model for FixedPriceResponse.
type FixedPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure FixedPricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// FixedPricingStructure The pricing structure
type FixedPricingStructure struct {
	// Price A fixed amount that is charged once every billing period.
	Price       string           `json:"price"`
	PricingType FixedPricingType `json:"pricingType"`
}

// FixedPricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type FixedPricingStructure1 struct {
	// Price A fixed amount that is charged once every billing period.
	Price       string           `json:"price"`
	PricingType FixedPricingType `json:"pricingType"`
}

// FixedPricingType defines model for FixedPricingType.
type FixedPricingType string

// GenerateIntegrationIdRequest defines model for GenerateIntegrationIdRequest.
type GenerateIntegrationIdRequest struct {
	Id      string             `json:"id"`
	Service IntegrationService `json:"service"`
}

// GenerateIntegrationIdRequest1 defines model for GenerateIntegrationIdRequest1.
type GenerateIntegrationIdRequest1 struct {
	Id      string             `json:"id"`
	Service IntegrationService `json:"service"`
}

// GenerateIntegrationIdRequest2 defines model for GenerateIntegrationIdRequest2.
type GenerateIntegrationIdRequest2 struct {
	Id      string             `json:"id"`
	Service IntegrationService `json:"service"`
}

// GetBillingScheduleEndpointApiBillingScheduleStatus defines model for GetBillingScheduleEndpointApiBillingScheduleStatus.
type GetBillingScheduleEndpointApiBillingScheduleStatus string

// GetByInvoiceIdProductGetInvoiceSettingsResponseModel defines model for GetByInvoiceIdProductGetInvoiceSettingsResponseModel.
type GetByInvoiceIdProductGetInvoiceSettingsResponseModel struct {
	// Id Unique payment provider id.
	Id string `json:"id"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// GetCustomerAliasesEndpointEndpointResponse defines model for GetCustomerAliasesEndpointEndpointResponse.
type GetCustomerAliasesEndpointEndpointResponse struct {
	Items []CustomerAlias `json:"items"`
}

// GetCustomerSettingsEndpointProductGetCustomerSettingsResponseModel defines model for GetCustomerSettingsEndpointProductGetCustomerSettingsResponseModel.
type GetCustomerSettingsEndpointProductGetCustomerSettingsResponseModel struct {
	// CustomerId Customer Account ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id              string          `json:"id"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// GetDiscountEndpointProductGetDiscountResponseModel defines model for GetDiscountEndpointProductGetDiscountResponseModel.
type GetDiscountEndpointProductGetDiscountResponseModel struct {
	// Amount Amount to be reduced
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt               string                  `json:"createdAt"`
	DiscountCalculationType DiscountCalculationType `json:"discountCalculationType"`

	// Id Discount ID
	Id string `json:"id"`

	// Message Message to appear on the Invoice
	Message string `json:"message"`

	// PhaseId Phase ID
	PhaseId *string `json:"phaseId,omitempty"`

	// PriceIds Price IDs this discount applies to. If not populated, the discount applies to all prices on the billing schedule
	PriceIds []string `json:"priceIds"`

	// SeparateLineItem Indicates whether the discount should appear as a separate line item in the invoice
	SeparateLineItem bool `json:"separateLineItem"`

	// SequenceAccountId The Sequence Account to which this Discount belongs
	SequenceAccountId string `json:"sequenceAccountId"`

	// UpdatedAt Updated At
	UpdatedAt string `json:"updatedAt"`

	// ValidFrom First Day Discount is Valid
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// ValidTo Last Day Discount is Valid
	ValidTo *openapi_types.Date `json:"validTo,omitempty"`
}

// GetInvoiceEndpointProductGetInvoiceResponseModel defines model for GetInvoiceEndpointProductGetInvoiceResponseModel.
type GetInvoiceEndpointProductGetInvoiceResponseModel struct {
	// AccountingDate Accounting date
	AccountingDate openapi_types.Date `json:"accountingDate"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId *string `json:"billingScheduleId,omitempty"`

	// CalculatedAt Time this invoice was last calculated (applicable for invoices generated by billing engine only)
	CalculatedAt *string `json:"calculatedAt,omitempty"`

	// CreatedAt Creation time
	CreatedAt string `json:"createdAt"`

	// CreditBalances Credit balances
	CreditBalances *string `json:"creditBalances,omitempty"`

	// CreditNoteIds IDs of linked credit notes (if any)
	CreditNoteIds []string `json:"creditNoteIds"`
	Currency      Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress Address1 `json:"customerBillingAddress"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails []string `json:"customerEmails"`

	// CustomerId The ID of the Customer this invoice is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName string `json:"customerLegalCompanyName"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress Address1 `json:"customerShippingAddress"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId     *string    `json:"customerTaxId,omitempty"`
	CustomerTaxStatus *TaxStatus `json:"customerTaxStatus,omitempty"`

	// DueDate Due date
	DueDate       *openapi_types.Date   `json:"dueDate,omitempty"`
	DunningStatus *InvoiceDunningStatus `json:"dunningStatus,omitempty"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// Id Invoice ID
	Id string `json:"id"`

	// InvoiceNumber Invoice number
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`

	// IsCustomerArchived isCustomerArchived
	IsCustomerArchived bool `json:"isCustomerArchived"`

	// IssueDate Issue date
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// LinkedServices External services which are linked to this invoice
	LinkedServices []LinkInfo `json:"linkedServices"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// MerchantDetails Merchant details
	MerchantDetails *InvoiceMerchantDetails `json:"merchantDetails,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata []KeyValuePair `json:"metadata"`

	// NetTotal Net total, in decimal format of the Invoice's currency
	NetTotal string `json:"netTotal"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`
	PaymentStatus  InvoicePaymentStatus    `json:"paymentStatus"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`

	// RenderSettings Settings that control how the invoice is rendered.
	RenderSettings InvoiceRenderSettingsInlineAggregate `json:"renderSettings"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string        `json:"sequenceAccountId"`
	Status            InvoiceStatus `json:"status"`

	// TotalTax Total tax, in decimal format of the Invoice's currency
	TotalTax string `json:"totalTax"`
}

// GetInvoiceSettingsEndpointProductGetInvoiceSettingsResponseModel defines model for GetInvoiceSettingsEndpointProductGetInvoiceSettingsResponseModel.
type GetInvoiceSettingsEndpointProductGetInvoiceSettingsResponseModel struct {
	// CustomerId Customer ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id string `json:"id"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// GetOrCreateInvoiceRenderSettingsEndpointProductCreateInvoiceRenderSettingsResponseModel defines model for GetOrCreateInvoiceRenderSettingsEndpointProductCreateInvoiceRenderSettingsResponseModel.
type GetOrCreateInvoiceRenderSettingsEndpointProductCreateInvoiceRenderSettingsResponseModel struct {
	// Id Invoice settings ID
	Id                 string                   `json:"id"`
	PaymentLinkDisplay PaymentLinkDisplayOption `json:"paymentLinkDisplay"`
}

// GetSeatMetricEndpointProductGetSeatMetricResponseModel defines model for GetSeatMetricEndpointProductGetSeatMetricResponseModel.
type GetSeatMetricEndpointProductGetSeatMetricResponseModel struct {
	// CreatedAt The time at which this seat metric was created. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// CreatedBy The ID of the Sequence user who created this seat metric.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Optional description for this seat metric.
	Description *string `json:"description,omitempty"`

	// Id Unique ID for this seat metric.
	Id string `json:"id"`

	// Label Friendly, customer-facing name for this seat metric.
	Label string `json:"label"`

	// SeatType Immutable, unique value used to identify and refer to this seat type when submitting events.
	SeatType string `json:"seatType"`

	// UpdatedAt The time at which this seat metric was updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// GetTaxRegistrationEndpointProductGetTaxRegistrationResponseModel defines model for GetTaxRegistrationEndpointProductGetTaxRegistrationResponseModel.
type GetTaxRegistrationEndpointProductGetTaxRegistrationResponseModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// GetTaxRegistrationForCustomerCustomerTaxRegistration defines model for GetTaxRegistrationForCustomerCustomerTaxRegistration.
type GetTaxRegistrationForCustomerCustomerTaxRegistration struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId string `json:"customerId"`

	// Id Tax registration ID
	Id string `json:"id"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// GetTaxRegistrationForCustomerProductResponse defines model for GetTaxRegistrationForCustomerProductResponse.
type GetTaxRegistrationForCustomerProductResponse struct {
	// Items List of tax registrations for customer
	Items []GetTaxRegistrationForCustomerCustomerTaxRegistration `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse1 `json:"pagination"`
}

// GetTaxRegistrationForMerchantMerchantTaxRegistration defines model for GetTaxRegistrationForMerchantMerchantTaxRegistration.
type GetTaxRegistrationForMerchantMerchantTaxRegistration struct {
	Country CountryCode `json:"country"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId string `json:"merchantId"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// GetTaxRegistrationForMerchantProductResponse defines model for GetTaxRegistrationForMerchantProductResponse.
type GetTaxRegistrationForMerchantProductResponse struct {
	// Items List of tax registrations for merchant
	Items []GetTaxRegistrationForMerchantMerchantTaxRegistration `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse1 `json:"pagination"`
}

// GetUsageMetricEndpointProductGetUsageMetricResponseModel defines model for GetUsageMetricEndpointProductGetUsageMetricResponseModel.
type GetUsageMetricEndpointProductGetUsageMetricResponseModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// CreatedAt Created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string `json:"groupingProperty,omitempty"`

	// Id Unique ID
	Id         string     `json:"id"`
	MetricType MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// Parameters Required parameters
	Parameters []CustomMetricParameter `json:"parameters"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters map[string]map[string]interface{} `json:"propertyFilters"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// GraduatedListPriceRequest defines model for GraduatedListPriceRequest.
type GraduatedListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure GraduatedPricingStructure `json:"structure"`

	// UsageCalculationPeriod The period over which usage is aggregated. This value is only taken into consideration and required with graduated pricing structures with a usage calculation mode of 'PERIOD'. It will be ignored for all non-graduated prices.
	UsageCalculationPeriod *UsageCalculationPeriod `json:"usageCalculationPeriod,omitempty"`
}

// GraduatedListPriceResponse defines model for GraduatedListPriceResponse.
type GraduatedListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure GraduatedPricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`

	// UsageCalculationPeriod The period over which usage is aggregated. This value is only taken into consideration and required with graduated pricing structures with a usage calculation mode of 'PERIOD'. It will be ignored for all non-graduated prices.
	UsageCalculationPeriod *UsageCalculationPeriod `json:"usageCalculationPeriod,omitempty"`
}

// GraduatedPriceRequest defines model for GraduatedPriceRequest.
type GraduatedPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure GraduatedPricingStructure1 `json:"structure"`

	// UsageCalculationPeriod The period over which usage is aggregated.
	UsageCalculationPeriod *UsageCalculationPeriod1 `json:"usageCalculationPeriod,omitempty"`
}

// GraduatedPriceResponse defines model for GraduatedPriceResponse.
type GraduatedPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure GraduatedPricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UsageCalculationPeriod The period over which usage is aggregated.
	UsageCalculationPeriod *UsageCalculationPeriod1 `json:"usageCalculationPeriod,omitempty"`
}

// GraduatedPricingStructure The pricing structure
type GraduatedPricingStructure struct {
	PricingType GraduatedPricingType `json:"pricingType"`

	// Tiers A list of contiguous pricing tiers
	Tiers                []GraduatedUsageTier `json:"tiers"`
	UsageCalculationMode UsageCalculationMode `json:"usageCalculationMode"`

	// UsageMetricId The usage metric associated to this pricing structure
	UsageMetricId string `json:"usageMetricId"`
}

// GraduatedPricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type GraduatedPricingStructure1 struct {
	PricingType GraduatedPricingType `json:"pricingType"`

	// Tiers A list of contiguous pricing tiers
	Tiers                []GraduatedUsageTier `json:"tiers"`
	UsageCalculationMode UsageCalculationMode `json:"usageCalculationMode"`

	// UsageMetricId The usage metric associated to this pricing structure
	UsageMetricId string `json:"usageMetricId"`
}

// GraduatedPricingType defines model for GraduatedPricingType.
type GraduatedPricingType string

// GraduatedUsageTier defines model for GraduatedUsageTier.
type GraduatedUsageTier struct {
	// Fee The nominal fee associated with usage at this tier
	Fee *string `json:"fee,omitempty"`

	// IsPricePercentage Indicate whether the price attribute is to be considered as a percentage or an absolute value.
	IsPricePercentage bool `json:"isPricePercentage"`

	// Price The rate to apply to usage for this product in this tier. In the case of percentage pricing where `isPricePercentage` is set to `true`, a value of 1 represents 100%.
	Price string `json:"price"`

	// UpperBound The upper bound of usage for this tier. Set to null to if this is a final tier and is unbounded. The lower bound is set by the previous tier or 0 if it's the first one.
	UpperBound *string `json:"upperBound,omitempty"`
}

// InclusiveDateRange Billing period
type InclusiveDateRange struct {
	// EndInclusive End date, included in the whole range
	EndInclusive openapi_types.Date `json:"endInclusive"`

	// Start Start date, included in the whole range
	Start openapi_types.Date `json:"start"`
}

// IntegrationExternalIdentifier defines model for IntegrationExternalIdentifier.
type IntegrationExternalIdentifier struct {
	Key   IntegrationService `json:"key"`
	Value string             `json:"value"`
}

// IntegrationId defines model for IntegrationId.
type IntegrationId struct {
	Id         string             `json:"id"`
	IsPending  bool               `json:"isPending"`
	LastSynced *string            `json:"lastSynced,omitempty"`
	Service    IntegrationService `json:"service"`
}

// IntegrationId1 defines model for IntegrationId1.
type IntegrationId1 struct {
	Id        string             `json:"id"`
	IsPending bool               `json:"isPending"`
	Service   IntegrationService `json:"service"`
}

// IntegrationId2 defines model for IntegrationId2.
type IntegrationId2 struct {
	Id        string             `json:"id"`
	IsPending bool               `json:"isPending"`
	Service   IntegrationService `json:"service"`
}

// IntegrationService defines model for IntegrationService.
type IntegrationService string

// IntermediaryBank defines model for IntermediaryBank.
type IntermediaryBank struct {
	// BankAddress Customer's billing address
	BankAddress   Address1 `json:"bankAddress"`
	BankName      string   `json:"bankName"`
	RoutingNumber string   `json:"routingNumber"`
	SwiftCode     string   `json:"swiftCode"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	// AccountingDate Accounting date
	AccountingDate openapi_types.Date `json:"accountingDate"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId *string `json:"billingScheduleId,omitempty"`

	// CalculatedAt Time this invoice was last calculated (applicable for invoices generated by billing engine only)
	CalculatedAt *string `json:"calculatedAt,omitempty"`

	// CreatedAt Creation time
	CreatedAt string `json:"createdAt"`

	// CreditBalances Credit balances
	CreditBalances *string `json:"creditBalances,omitempty"`

	// CreditNoteIds IDs of linked credit notes (if any)
	CreditNoteIds []string `json:"creditNoteIds"`
	Currency      Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress Address1 `json:"customerBillingAddress"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails []string `json:"customerEmails"`

	// CustomerId The ID of the Customer this invoice is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName string `json:"customerLegalCompanyName"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress Address1 `json:"customerShippingAddress"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId     *string    `json:"customerTaxId,omitempty"`
	CustomerTaxStatus *TaxStatus `json:"customerTaxStatus,omitempty"`

	// DueDate Due date
	DueDate       *openapi_types.Date   `json:"dueDate,omitempty"`
	DunningStatus *InvoiceDunningStatus `json:"dunningStatus,omitempty"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// Id Invoice ID
	Id string `json:"id"`

	// InvoiceNumber Invoice number
	InvoiceNumber      *string `json:"invoiceNumber,omitempty"`
	IsCustomerArchived bool    `json:"isCustomerArchived"`

	// IssueDate Issue date
	IssueDate *openapi_types.Date `json:"issueDate,omitempty"`

	// LinkedServices External services which are linked to this invoice
	LinkedServices []LinkInfo `json:"linkedServices"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// MerchantDetails Merchant details
	MerchantDetails *InvoiceMerchantDetails `json:"merchantDetails,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata []KeyValuePair `json:"metadata"`

	// NetTotal Net total, in decimal format of the Invoice's currency
	NetTotal string `json:"netTotal"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`
	PaymentStatus  InvoicePaymentStatus    `json:"paymentStatus"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`

	// RenderSettings Settings that control how the invoice is rendered.
	RenderSettings InvoiceRenderSettingsInlineAggregate `json:"renderSettings"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string        `json:"sequenceAccountId"`
	Status            InvoiceStatus `json:"status"`

	// TotalTax Total tax, in decimal format of the Invoice's currency
	TotalTax string `json:"totalTax"`
}

// InvoiceDunningStatus defines model for InvoiceDunningStatus.
type InvoiceDunningStatus string

// InvoiceMerchantDetails Merchant details
type InvoiceMerchantDetails struct {
	// Address Customer's billing address
	Address Address1 `json:"address"`

	// AustralianDestination Merchant's account details, for receiving payment to a Canadian bank via Australian bank transfer
	AustralianDestination *AustralianBankAccountDestination `json:"australianDestination,omitempty"`

	// CaBankAccountDetails Merchant's Canadian account details, for receiving payment by Canadian bank transfer
	CaBankAccountDetails *CanadianBankAccountDestination `json:"caBankAccountDetails,omitempty"`

	// CanadianInternationalDestination Merchant's account details, for receiving payment to a Canadian bank via Wire transfer
	CanadianInternationalDestination *CanadianInternationalDestination `json:"canadianInternationalDestination,omitempty"`

	// CustomFields merchantCustomFields
	CustomFields []KeyValuePair `json:"customFields"`

	// Email Merchant's email
	Email string `json:"email"`

	// Iban Merchant's IBAN, for receiving payment by bank transfer
	Iban *string `json:"iban,omitempty"`

	// IncludeBeneficiaryAddressInPaymentDetails Include beneficiary address in payment details on invoice
	IncludeBeneficiaryAddressInPaymentDetails bool `json:"includeBeneficiaryAddressInPaymentDetails"`

	// LegalCompanyName Merchant's legal company name
	LegalCompanyName string `json:"legalCompanyName"`

	// LogoUrl Merchant's logo image URL
	LogoUrl *string `json:"logoUrl,omitempty"`

	// PhoneNumber Merchant's phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`

	// PrimaryColour Merchant's primary colour (for invoice rendering)
	PrimaryColour *string `json:"primaryColour,omitempty"`

	// TaxId Merchant's tax ID
	TaxId *string `json:"taxId,omitempty"`

	// UkAccountDetails Merchant's UK bank account details, for receiving payment by UK bank transfer
	UkAccountDetails *SortCodeAccountNumber `json:"ukAccountDetails,omitempty"`

	// UsAchDetails Merchant's US account details, for receiving payment by ACH
	UsAchDetails *UsAchDestination `json:"usAchDetails,omitempty"`

	// UsWireDetails Merchant's US account details, for receiving payment by wire transfer
	UsWireDetails *UsWireDestination `json:"usWireDetails,omitempty"`
}

// InvoicePaymentOption defines model for InvoicePaymentOption.
type InvoicePaymentOption string

// InvoicePaymentStatus defines model for InvoicePaymentStatus.
type InvoicePaymentStatus string

// InvoiceRenderSettingsInlineAggregate Settings that control how the invoice is rendered.
type InvoiceRenderSettingsInlineAggregate struct {
	PaymentLinkDisplay PaymentLinkDisplayOption `json:"paymentLinkDisplay"`
}

// InvoiceStatus defines model for InvoiceStatus.
type InvoiceStatus string

// KeyValuePair defines model for KeyValuePair.
type KeyValuePair struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// LineItemGroupResponseModel defines model for LineItemGroupResponseModel.
type LineItemGroupResponseModel struct {
	// Description Line Item Group Description
	Description *string `json:"description,omitempty"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// Id Line Item Group ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// InvoiceId Invoice ID
	InvoiceId string `json:"invoiceId"`

	// NetTotal Net total, in decimal format of the Invoice's currency
	NetTotal string `json:"netTotal"`

	// TaxCategory The tax category for all line items in this line item group
	TaxCategory *TaxCategoryResponse `json:"taxCategory,omitempty"`

	// Title Line Item Group Title
	Title string `json:"title"`

	// TotalTax Total tax, in decimal format of the Invoice's currency
	TotalTax string `json:"totalTax"`
}

// LinearListPriceRequest defines model for LinearListPriceRequest.
type LinearListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure LinearPricingStructure `json:"structure"`
}

// LinearListPriceResponse defines model for LinearListPriceResponse.
type LinearListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure LinearPricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// LinearPriceRequest defines model for LinearPriceRequest.
type LinearPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure LinearPricingStructure1 `json:"structure"`
}

// LinearPriceResponse defines model for LinearPriceResponse.
type LinearPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure LinearPricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// LinearPricingStructure The pricing structure
type LinearPricingStructure struct {
	// IsPricePercentage Indicate whether the price attribute is to be considered as a percentage or an absolute value.
	IsPricePercentage bool `json:"isPricePercentage"`

	// PricePerUnit The per unit rate to apply to usage for this product. In the case of percentage pricing where `isPricePercentage` is set to `true`, a value of 1 represents 100%.
	PricePerUnit string            `json:"pricePerUnit"`
	PricingType  LinearPricingType `json:"pricingType"`

	// UsageMetricId Usage metric associated to this pricing structure
	UsageMetricId string `json:"usageMetricId"`
}

// LinearPricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type LinearPricingStructure1 struct {
	// IsPricePercentage Indicate whether the price attribute is to be considered as a percentage or an absolute value.
	IsPricePercentage bool `json:"isPricePercentage"`

	// PricePerUnit The per unit rate to apply to usage for this product. In the case of percentage pricing where `isPricePercentage` is set to `true`, a value of 1 represents 100%.
	PricePerUnit string            `json:"pricePerUnit"`
	PricingType  LinearPricingType `json:"pricingType"`

	// UsageMetricId Usage metric associated to this pricing structure
	UsageMetricId string `json:"usageMetricId"`
}

// LinearPricingType defines model for LinearPricingType.
type LinearPricingType string

// LinkInfo defines model for LinkInfo.
type LinkInfo struct {
	// ExternalId The ID of the related entity in external system
	ExternalId      string             `json:"externalId"`
	ExternalService IntegrationService `json:"externalService"`

	// ExternalUrl External URL
	ExternalUrl *string `json:"externalUrl,omitempty"`

	// SyncTime The time that this was synced from the connected integration
	SyncTime string `json:"syncTime"`
}

// ListBillingProductsEndpointListProductResponsePaginatedResponseModel defines model for ListBillingProductsEndpointListProductResponsePaginatedResponseModel.
type ListBillingProductsEndpointListProductResponsePaginatedResponseModel struct {
	// Items Billing products
	Items []BillingProduct `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListBillingSchedulesResponse defines model for ListBillingSchedulesResponse.
type ListBillingSchedulesResponse struct {
	// Items Billing Schedules
	Items []BillingScheduleResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListContactEndpointContactResponseModel defines model for ListContactEndpointContactResponseModel.
type ListContactEndpointContactResponseModel struct {
	// Items Contacts
	Items []Contact `json:"items"`
}

// ListCreditGrantEndpointResponseModel defines model for ListCreditGrantEndpointResponseModel.
type ListCreditGrantEndpointResponseModel struct {
	// Items Credit grants
	Items []CreditGrant `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListCreditGrantsForCustomerEndpointCreditGrantResponse defines model for ListCreditGrantsForCustomerEndpointCreditGrantResponse.
type ListCreditGrantsForCustomerEndpointCreditGrantResponse struct {
	// Balance Amount remaining of Credits Granted
	Balance float32 `json:"balance"`

	// ExpiryDate Grant Expiry Date
	ExpiryDate *openapi_types.Date `json:"expiryDate,omitempty"`

	// GrantAmount Amount of Credits Granted
	GrantAmount float32 `json:"grantAmount"`

	// Id Credit Grant ID
	Id string `json:"id"`

	// IssueDate Grant Issue Date
	IssueDate openapi_types.Date `json:"issueDate"`

	// Name Credit Grant Name
	Name string `json:"name"`
}

// ListCreditGrantsForCustomerEndpointCreditGrantsResponse defines model for ListCreditGrantsForCustomerEndpointCreditGrantsResponse.
type ListCreditGrantsForCustomerEndpointCreditGrantsResponse struct {
	// Items Credit Grants
	Items []ListCreditGrantsForCustomerEndpointCreditGrantResponse `json:"items"`
}

// ListCreditNoteEndpointProductListCreditNotePaginatedResponseModel defines model for ListCreditNoteEndpointProductListCreditNotePaginatedResponseModel.
type ListCreditNoteEndpointProductListCreditNotePaginatedResponseModel struct {
	// Items CreditNotes
	Items []CreditNote `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse `json:"pagination"`
}

// ListCreditNoteLineItemEndpointProductListCreditNoteLineItemPaginatedResponseModel defines model for ListCreditNoteLineItemEndpointProductListCreditNoteLineItemPaginatedResponseModel.
type ListCreditNoteLineItemEndpointProductListCreditNoteLineItemPaginatedResponseModel struct {
	// Items CreditNoteLineItems
	Items []ListCreditNoteLineItemEndpointProductListCreditNoteLineItemResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListCreditNoteLineItemEndpointProductListCreditNoteLineItemResponseModel defines model for ListCreditNoteLineItemEndpointProductListCreditNoteLineItemResponseModel.
type ListCreditNoteLineItemEndpointProductListCreditNoteLineItemResponseModel struct {
	// CreditNoteId Credit Note Line Item ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GrossTotal Gross Total
	GrossTotal string `json:"grossTotal"`

	// GroupId Credit Note Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// Id Credit Note Line Item ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemId Line Item ID
	LineItemId *string `json:"lineItemId,omitempty"`

	// NetTotal Net Total
	NetTotal string `json:"netTotal"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string      `json:"rate"`
	RateDisplay RateDisplay `json:"rateDisplay"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`

	// TotalTax Total Tax
	TotalTax string `json:"totalTax"`
}

// ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupPaginatedResponseModel defines model for ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupPaginatedResponseModel.
type ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupPaginatedResponseModel struct {
	// Items CreditNoteLineItemGroups
	Items []ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupResponseModel defines model for ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupResponseModel.
type ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupResponseModel struct {
	// CreditNoteId Credit Note ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// GrossTotal Gross total
	GrossTotal string `json:"grossTotal"`

	// Id Credit Note Line Item Group ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemGroupId Line Item Group ID
	LineItemGroupId *string `json:"lineItemGroupId,omitempty"`

	// NetTotal Net total
	NetTotal string `json:"netTotal"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`

	// TotalTax Total tax
	TotalTax string `json:"totalTax"`
}

// ListCustomerAliasEndpointProductListCustomerAliasPaginatedResponseModel defines model for ListCustomerAliasEndpointProductListCustomerAliasPaginatedResponseModel.
type ListCustomerAliasEndpointProductListCustomerAliasPaginatedResponseModel struct {
	// Items CustomerAliass
	Items []ListCustomerAliasEndpointProductListCustomerAliasResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListCustomerAliasEndpointProductListCustomerAliasResponseModel defines model for ListCustomerAliasEndpointProductListCustomerAliasResponseModel.
type ListCustomerAliasEndpointProductListCustomerAliasResponseModel struct {
	// ArchivedAt Archived At
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// CreatedAt Created At
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// DeletedAt Deleted At
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// Label Alias label
	Label *string `json:"label,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// ListCustomerResponse defines model for ListCustomerResponse.
type ListCustomerResponse struct {
	// Items Customers
	Items []ListCustomerResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListCustomerResponseModel defines model for ListCustomerResponseModel.
type ListCustomerResponseModel struct {
	// Address Address
	Address Address `json:"address"`

	// CreatedAt Time at which the customer was initially created, in ISO 8601 format
	CreatedAt string `json:"createdAt"`

	// Domain Customer's primary domain name
	Domain *string `json:"domain,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds External services which are linked to this customer
	IntegrationIds []IntegrationId `json:"integrationIds"`

	// Label Label
	Label *string `json:"label,omitempty"`

	// LegalName Legal name
	LegalName string `json:"legalName"`

	// Organizations Organizations that this customer is a member of
	Organizations []CustomerOrganization `json:"organizations"`
	TaxStatus     TaxStatus              `json:"taxStatus"`

	// Url URL
	Url *string `json:"url,omitempty"`
}

// ListCustomerSeatBalancesEndpointListCustomerSeatBalancesPaginatedResponseModel defines model for ListCustomerSeatBalancesEndpointListCustomerSeatBalancesPaginatedResponseModel.
type ListCustomerSeatBalancesEndpointListCustomerSeatBalancesPaginatedResponseModel struct {
	// Items Seat balances
	Items []CustomerSeatBalances `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListDiscountEndpointProductListDiscountPaginatedResponseModel defines model for ListDiscountEndpointProductListDiscountPaginatedResponseModel.
type ListDiscountEndpointProductListDiscountPaginatedResponseModel struct {
	// Items Discounts
	Items []ListDiscountEndpointProductListDiscountResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListDiscountEndpointProductListDiscountResponseModel defines model for ListDiscountEndpointProductListDiscountResponseModel.
type ListDiscountEndpointProductListDiscountResponseModel struct {
	// Amount Amount to be reduced
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt               string                  `json:"createdAt"`
	DiscountCalculationType DiscountCalculationType `json:"discountCalculationType"`

	// Id Discount ID
	Id string `json:"id"`

	// Message Message to appear on the Invoice
	Message string `json:"message"`

	// PhaseId Phase ID
	PhaseId *string `json:"phaseId,omitempty"`

	// PriceIds Price IDs this discount applies to. If not populated, the discount applies to all prices on the billing schedule
	PriceIds []string `json:"priceIds"`

	// SeparateLineItem Indicates whether the discount should appear as a separate line item in the invoice
	SeparateLineItem bool `json:"separateLineItem"`

	// SequenceAccountId The Sequence Account to which this Discount belongs
	SequenceAccountId string `json:"sequenceAccountId"`

	// UpdatedAt Updated At
	UpdatedAt string `json:"updatedAt"`

	// ValidFrom First Day Discount is Valid
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// ValidTo Last Day Discount is Valid
	ValidTo *openapi_types.Date `json:"validTo,omitempty"`
}

// ListInvoiceEndpointListInvoicePaginatedResponseModel defines model for ListInvoiceEndpointListInvoicePaginatedResponseModel.
type ListInvoiceEndpointListInvoicePaginatedResponseModel struct {
	// Items Invoices
	Items []Invoice `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListLineItemEndpointPaginatedLineItemResponseModel defines model for ListLineItemEndpointPaginatedLineItemResponseModel.
type ListLineItemEndpointPaginatedLineItemResponseModel struct {
	// Items LineItems
	Items []Stable20240101LineItemResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListLineItemGroupEndpointProductListLineItemGroupPaginatedResponseModel defines model for ListLineItemGroupEndpointProductListLineItemGroupPaginatedResponseModel.
type ListLineItemGroupEndpointProductListLineItemGroupPaginatedResponseModel struct {
	// Items LineItemGroups
	Items []LineItemGroupResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListListPricesEndpointResponseModel defines model for ListListPricesEndpointResponseModel.
type ListListPricesEndpointResponseModel struct {
	// Items List prices
	Items []ListPrice `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListPrice defines model for ListPrice.
type ListPrice struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string              `json:"productId"`
	Structure ListPrice_Structure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`

	// UsageCalculationPeriod The period over which usage is aggregated. This value is only taken into consideration and required with graduated pricing structures with a usage calculation mode of 'PERIOD'. It will be ignored for all non-graduated prices.
	UsageCalculationPeriod *UsageCalculationPeriod `json:"usageCalculationPeriod,omitempty"`
}

// ListPrice_Structure defines model for ListPrice.Structure.
type ListPrice_Structure struct {
	union json.RawMessage
}

// ListResponse defines model for ListResponse.
type ListResponse struct {
	// Items TaxRates
	Items []TaxRateResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListSeatEventsEndpointEndpointResponseModel defines model for ListSeatEventsEndpointEndpointResponseModel.
type ListSeatEventsEndpointEndpointResponseModel struct {
	// Items Seat events
	Items []SeatEvent `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListSeatMetricEndpointProductListSeatMetricPaginatedResponseModel defines model for ListSeatMetricEndpointProductListSeatMetricPaginatedResponseModel.
type ListSeatMetricEndpointProductListSeatMetricPaginatedResponseModel struct {
	// Items SeatMetrics
	Items []ListSeatMetricEndpointProductListSeatMetricResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListSeatMetricEndpointProductListSeatMetricResponseModel defines model for ListSeatMetricEndpointProductListSeatMetricResponseModel.
type ListSeatMetricEndpointProductListSeatMetricResponseModel struct {
	// CreatedAt The time at which this seat metric was created. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// CreatedBy The ID of the Sequence user who created this seat metric.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Optional description for this seat metric.
	Description *string `json:"description,omitempty"`

	// Id Unique ID for this seat metric.
	Id string `json:"id"`

	// Label Friendly, customer-facing name for this seat metric.
	Label string `json:"label"`

	// SeatType Immutable, unique value used to identify and refer to this seat type when submitting events.
	SeatType string `json:"seatType"`

	// UpdatedAt The time at which this seat metric was updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// ListSequenceAccountsResponse defines model for ListSequenceAccountsResponse.
type ListSequenceAccountsResponse struct {
	// Items A list of Sequence accounts that you have access to.
	Items []SequenceAccount `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse `json:"pagination"`
}

// ListSequenceUsersResponse defines model for ListSequenceUsersResponse.
type ListSequenceUsersResponse struct {
	// Items A list of users.
	Items []SequenceUserResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse `json:"pagination"`
}

// ListTaxRegistrationEndpointProductListTaxRegistrationPaginatedResponseModel defines model for ListTaxRegistrationEndpointProductListTaxRegistrationPaginatedResponseModel.
type ListTaxRegistrationEndpointProductListTaxRegistrationPaginatedResponseModel struct {
	// Items TaxRegistrations
	Items []ListTaxRegistrationEndpointProductListTaxRegistrationResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListTaxRegistrationEndpointProductListTaxRegistrationResponseModel defines model for ListTaxRegistrationEndpointProductListTaxRegistrationResponseModel.
type ListTaxRegistrationEndpointProductListTaxRegistrationResponseModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// ListUsageEventEndpointEndpointResponseModel defines model for ListUsageEventEndpointEndpointResponseModel.
type ListUsageEventEndpointEndpointResponseModel struct {
	// Items Usage events
	Items []CreateUsageEventEndpointProductCreateUsageEventResponseModel `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ListUsageMetricEndpointProductResponseModel defines model for ListUsageMetricEndpointProductResponseModel.
type ListUsageMetricEndpointProductResponseModel struct {
	// Items Usage metrics
	Items []UsageMetric `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// MetricType defines model for MetricType.
type MetricType string

// Minimum defines model for Minimum.
type Minimum struct {
	// Amount Minimum amount
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt string `json:"createdAt"`

	// Id Minimum ID
	Id string `json:"id"`

	// PhaseId Phase ID
	PhaseId string `json:"phaseId"`

	// RestrictToPrices Price IDs the minimum is restricted to
	RestrictToPrices []string `json:"restrictToPrices"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// UpdatedAt Updated at
	UpdatedAt string `json:"updatedAt"`
}

// MinimumRequest defines model for MinimumRequest.
type MinimumRequest struct {
	// Amount The minimum amount
	Amount float32 `json:"amount"`

	// RestrictToPrices Price IDs to which this minimum applies
	RestrictToPrices *[]string `json:"restrictToPrices,omitempty"`
}

// NotificationChannel defines model for NotificationChannel.
type NotificationChannel string

// NotificationPolicies defines model for NotificationPolicies.
type NotificationPolicies struct {
	// Items Notification policies
	Items []NotificationPolicy `json:"items"`

	// Pagination Results pagination
	Pagination PaginationResponse `json:"pagination"`
}

// NotificationPolicy defines model for NotificationPolicy.
type NotificationPolicy struct {
	Channel NotificationChannel `json:"channel"`

	// CreatedAt Created at
	CreatedAt string `json:"createdAt"`

	// Id Unique ID
	Id string `json:"id"`

	// Name Human-readable name
	Name string `json:"name"`

	// NotificationTypes Set of notification types that this policy matches. If not present this policy will cover all notification types.
	NotificationTypes *[]NotificationType `json:"notificationTypes,omitempty"`

	// Recipients The webhook URLs or email addresses which will receive notifications, depending on the channel
	Recipients []string `json:"recipients"`

	// SequenceAccountId Sequence Account which this policy matches
	SequenceAccountId string `json:"sequenceAccountId"`

	// WebhookSecret Webhook secret used to generate a signature header that's sent with an outbound webhook.It can be used to verify the authenticity of received Sequence webhooks. Only available for webhook channel policies.
	WebhookSecret *string `json:"webhookSecret,omitempty"`
}

// NotificationType defines model for NotificationType.
type NotificationType string

// OneTimeListPriceRequest defines model for OneTimeListPriceRequest.
type OneTimeListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure OneTimePricingStructure `json:"structure"`
}

// OneTimeListPriceResponse defines model for OneTimeListPriceResponse.
type OneTimeListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure OneTimePricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// OneTimePriceRequest defines model for OneTimePriceRequest.
type OneTimePriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure OneTimePricingStructure1 `json:"structure"`
}

// OneTimePriceResponse defines model for OneTimePriceResponse.
type OneTimePriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure OneTimePricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// OneTimePricingStructure The pricing structure
type OneTimePricingStructure struct {
	// Price A fixed amount that is charged once.
	Price       string             `json:"price"`
	PricingType OneTimePricingType `json:"pricingType"`
}

// OneTimePricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type OneTimePricingStructure1 struct {
	// Price A fixed amount that is charged once.
	Price       string             `json:"price"`
	PricingType OneTimePricingType `json:"pricingType"`
}

// OneTimePricingType defines model for OneTimePricingType.
type OneTimePricingType string

// PackageListPriceRequest defines model for PackageListPriceRequest.
type PackageListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure PackagePricingStructure `json:"structure"`
}

// PackageListPriceResponse defines model for PackageListPriceResponse.
type PackageListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure PackagePricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// PackagePriceRequest defines model for PackagePriceRequest.
type PackagePriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure PackagePricingStructure1 `json:"structure"`
}

// PackagePriceResponse defines model for PackagePriceResponse.
type PackagePriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure PackagePricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// PackagePricingStructure The pricing structure
type PackagePricingStructure struct {
	// PackageSize The amount of usage allowed for the price in this structure
	PackageSize string `json:"packageSize"`

	// PricePerPackage The price charged for each package
	PricePerPackage string             `json:"pricePerPackage"`
	PricingType     PackagePricingType `json:"pricingType"`

	// UsageMetricId The usage metric associated to this tier
	UsageMetricId string `json:"usageMetricId"`
}

// PackagePricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type PackagePricingStructure1 struct {
	// PackageSize The amount of usage allowed for the price in this structure
	PackageSize string `json:"packageSize"`

	// PricePerPackage The price charged for each package
	PricePerPackage string             `json:"pricePerPackage"`
	PricingType     PackagePricingType `json:"pricingType"`

	// UsageMetricId The usage metric associated to this tier
	UsageMetricId string `json:"usageMetricId"`
}

// PackagePricingType defines model for PackagePricingType.
type PackagePricingType string

// PaginationMeta Results pagination
type PaginationMeta struct {
	// After Cursor for the page after this (if it exists)
	After *string `json:"after,omitempty"`

	// Before Cursor for the page before this (if it exists)
	Before *string `json:"before,omitempty"`

	// TotalResultSize Total number of entries across all pages
	TotalResultSize *int64 `json:"totalResultSize,omitempty"`
}

// PaginationResponse Results pagination
type PaginationResponse struct {
	// After Copy this value to the `after` parameter of your next request to retrieve the next page of results
	After *string `json:"after,omitempty"`

	// Before Copy this value to the `before` parameter of your next request to retrieve the next page of results
	Before *string `json:"before,omitempty"`

	// TotalResultSize Total number of entries across all pages
	TotalResultSize *int64 `json:"totalResultSize,omitempty"`
}

// PaginationResponse1 Results pagination
type PaginationResponse1 struct {
	// After Copy this value to the `after` parameter of your next request to retrieve the next page of results
	After *string `json:"after,omitempty"`

	// Before Copy this value to the `before` parameter of your next request to retrieve the next page of results
	Before *string `json:"before,omitempty"`

	// TotalResultSize Total number of entries across all pages
	TotalResultSize *int64 `json:"totalResultSize,omitempty"`
}

// PaymentFailureNotificationOptions defines model for PaymentFailureNotificationOptions.
type PaymentFailureNotificationOptions string

// PaymentFailureNotifications The failure notification settings for the account
type PaymentFailureNotifications struct {
	CustomerNotifications PaymentFailureNotificationOptions `json:"customerNotifications"`
	MerchantNotifications PaymentFailureNotificationOptions `json:"merchantNotifications"`
}

// PaymentLinkDisplayOption defines model for PaymentLinkDisplayOption.
type PaymentLinkDisplayOption string

// PaymentProvider defines model for PaymentProvider.
type PaymentProvider string

// Phase defines model for Phase.
type Phase struct {
	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt string `json:"createdAt"`

	// Discounts Discounts in Phase
	Discounts []EmbeddableDiscount `json:"discounts"`

	// EndDate End date
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// Id Phase ID
	Id       string    `json:"id"`
	Minimums []Minimum `json:"minimums"`

	// Name Name
	Name *string `json:"name,omitempty"`

	// PriceIds Price IDs
	PriceIds             []string                  `json:"priceIds"`
	RecurrencePreference PhaseRecurrencePreference `json:"recurrencePreference"`

	// StartDate Start Date
	StartDate openapi_types.Date `json:"startDate"`
}

// PhaseRecurrencePreference defines model for PhaseRecurrencePreference.
type PhaseRecurrencePreference string

// PhaseRequest defines model for PhaseRequest.
type PhaseRequest struct {
	// Discounts Discounts applicable to this phase
	Discounts *[]EmbeddableDiscount `json:"discounts,omitempty"`

	// EndDate Phase end date. A null end date denotes an open-ended phase. Only the last phase can be open-ended.
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// ListPriceIds IDs of list prices from which to create prices for this phase
	ListPriceIds *[]string `json:"listPriceIds,omitempty"`

	// Minimums Minimums applicable to this phase
	Minimums *[]MinimumRequest `json:"minimums,omitempty"`

	// Name Optional name for the Phase
	Name *string `json:"name,omitempty"`

	// PriceIds The price IDs included in this phase
	PriceIds             []string                   `json:"priceIds"`
	RecurrencePreference *PhaseRecurrencePreference `json:"recurrencePreference,omitempty"`

	// StartDate Phase start date
	StartDate openapi_types.Date `json:"startDate"`
}

// PriceParameter defines model for PriceParameter.
type PriceParameter struct {
	// ParameterId Custom metric parameter ID
	ParameterId string `json:"parameterId"`

	// Value Parameter value
	Value string `json:"value"`
}

// PriceResponse defines model for PriceResponse.
type PriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string                  `json:"productId"`
	Structure PriceResponse_Structure `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// UsageCalculationPeriod The period over which usage is aggregated.
	UsageCalculationPeriod *UsageCalculationPeriod1 `json:"usageCalculationPeriod,omitempty"`
}

// PriceResponse_Structure defines model for PriceResponse.Structure.
type PriceResponse_Structure struct {
	union json.RawMessage
}

// PriceResponsePaginatedPriceResponseModel defines model for PriceResponsePaginatedPriceResponseModel.
type PriceResponsePaginatedPriceResponseModel struct {
	// Items Prices
	Items []PriceResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// ProductTaxRateRepresentation defines model for ProductTaxRateRepresentation.
type ProductTaxRateRepresentation struct {
	// PriceId ID of the Price
	PriceId string `json:"priceId"`

	// TaxRateId ID of the Tax Rate
	TaxRateId string `json:"taxRateId"`
}

// RateDisplay defines model for RateDisplay.
type RateDisplay string

// RevenueClassification defines model for RevenueClassification.
type RevenueClassification string

// RevenueRecognitionMethod defines model for RevenueRecognitionMethod.
type RevenueRecognitionMethod string

// SeatBalance defines model for SeatBalance.
type SeatBalance struct {
	// ChangeTimestamp Timestamp of change
	ChangeTimestamp string `json:"changeTimestamp"`

	// SeatType Seat type
	SeatType string `json:"seatType"`

	// Total Total seats for this seat type
	Total int `json:"total"`
}

// SeatBasedListPriceRequest defines model for SeatBasedListPriceRequest.
type SeatBasedListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure SeatBasedPricingStructure `json:"structure"`
}

// SeatBasedListPriceResponse defines model for SeatBasedListPriceResponse.
type SeatBasedListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure SeatBasedPricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// SeatBasedPriceRequest defines model for SeatBasedPriceRequest.
type SeatBasedPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure SeatBasedPricingStructure1 `json:"structure"`
}

// SeatBasedPriceResponse defines model for SeatBasedPriceResponse.
type SeatBasedPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure SeatBasedPricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// SeatBasedPricingStructure The pricing structure
type SeatBasedPricingStructure struct {
	// ContractedMinimumSeats The number of contractually agreed minimum seats
	ContractedMinimumSeats   int               `json:"contractedMinimumSeats"`
	OveragesBillingFrequency *BillingFrequency `json:"overagesBillingFrequency,omitempty"`

	// PricePerSeat Price charged per seat per full billing period
	PricePerSeat      string                `json:"pricePerSeat"`
	PricingType       SeatBasedPricingType  `json:"pricingType"`
	ProrationStrategy SeatProrationStrategy `json:"prorationStrategy"`

	// SeatMetricId Seat metric associated to this pricing structure
	SeatMetricId string `json:"seatMetricId"`

	// Tiers A list of contiguous pricing tiers
	Tiers []SeatUsageTier `json:"tiers"`
}

// SeatBasedPricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type SeatBasedPricingStructure1 struct {
	// ContractedMinimumSeats The number of contractually agreed minimum seats
	ContractedMinimumSeats   int               `json:"contractedMinimumSeats"`
	OveragesBillingFrequency *BillingFrequency `json:"overagesBillingFrequency,omitempty"`

	// PricePerSeat Price charged per seat per full billing period
	PricePerSeat      string                `json:"pricePerSeat"`
	PricingType       SeatBasedPricingType  `json:"pricingType"`
	ProrationStrategy SeatProrationStrategy `json:"prorationStrategy"`

	// SeatMetricId Seat metric associated to this pricing structure
	SeatMetricId string `json:"seatMetricId"`

	// Tiers A list of contiguous pricing tiers
	Tiers []SeatUsageTier `json:"tiers"`
}

// SeatBasedPricingType defines model for SeatBasedPricingType.
type SeatBasedPricingType string

// SeatEvent defines model for SeatEvent.
type SeatEvent struct {
	// CustomerAlias End-customer alias or ID. This is a unique value provided by you and is an identifier to your customer who consumed the seats.
	CustomerAlias string `json:"customerAlias"`

	// CustomerEventId Unique ID provided by you. Another event with the same customer event ID will supersede this one. This ID usually corresponds to the event ID you use internally.
	CustomerEventId string `json:"customerEventId"`

	// EventTimestamp Event timestamp, in ISO 8601 format.
	EventTimestamp string `json:"eventTimestamp"`

	// Id Unique ID for this seat event.
	Id string `json:"id"`

	// SeatType Seat type. This can be referenced from a seat metric.
	SeatType string `json:"seatType"`

	// SequenceAccountId Unique Sequence account ID.
	SequenceAccountId string `json:"sequenceAccountId"`

	// Total Total seats consumed for this seat type.
	Total int `json:"total"`
}

// SeatMetric defines model for SeatMetric.
type SeatMetric struct {
	// CreatedAt The time at which this seat metric was created. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// CreatedBy The ID of the Sequence user who created this seat metric.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Optional description for this seat metric.
	Description *string `json:"description,omitempty"`

	// Id Unique ID for this seat metric.
	Id string `json:"id"`

	// Label Friendly, customer-facing name for this seat metric.
	Label string `json:"label"`

	// SeatType Immutable, unique value used to identify and refer to this seat type when submitting events.
	SeatType string `json:"seatType"`

	// UpdatedAt The time at which this seat metric was updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// SeatProrationStrategy defines model for SeatProrationStrategy.
type SeatProrationStrategy string

// SeatUsageTier defines model for SeatUsageTier.
type SeatUsageTier struct {
	// Fee The nominal fee associated with usage at this tier
	Fee *string `json:"fee,omitempty"`

	// Price The rate to apply to usage for this product in this tier. In the case of percentage pricing where `isPricePercentage` is set to `true`, a value of 1 represents 100%.
	Price string `json:"price"`

	// UpperBound The upper bound of usage for this tier. Set to null to if this is a final tier and is unbounded. The lower bound is set by the previous tier or 0 if it's the first one.
	UpperBound *string `json:"upperBound,omitempty"`
}

// SequenceAccount defines model for SequenceAccount.
type SequenceAccount struct {
	// AlertEmailAddresses List of email addresses to which alert notifications will be sent.
	AlertEmailAddresses []string `json:"alertEmailAddresses"`

	// CompanyName The company name of the company that owns this Sequence account.
	CompanyName string `json:"companyName"`

	// CompanyNumber The company number of the company that owns this Sequence account.
	CompanyNumber string      `json:"companyNumber"`
	Country       CountryCode `json:"country"`

	// CreatedAt The time at which the account was created. Formatted as an ISO 8601 timestamp.
	CreatedAt string `json:"createdAt"`

	// Id Unique identifier for the Sequence account.
	Id string `json:"id"`

	// SendCustomerNotifications True if Sequence should send customer notifications on your behalf.
	SendCustomerNotifications bool `json:"sendCustomerNotifications"`

	// SequenceOrganisationId The Sequence organisation ID that this account belongs to.
	SequenceOrganisationId string `json:"sequenceOrganisationId"`
}

// SequenceUserResponse defines model for SequenceUserResponse.
type SequenceUserResponse struct {
	// Email The email address of this user.
	Email string `json:"email"`

	// Id The unique ID of this user.
	Id string `json:"id"`

	// SequenceAccountIds A list of Sequence account IDs. These account IDs represent the accounts this user has access to.
	SequenceAccountIds []string `json:"sequenceAccountIds"`

	// State The state of this user.
	State string `json:"state"`
}

// SettingPreference defines model for SettingPreference.
type SettingPreference string

// SortCodeAccountNumber Merchant's UK bank account details, for receiving payment by UK bank transfer
type SortCodeAccountNumber struct {
	// AccountNumber UK account number. 8 digits.
	AccountNumber string `json:"accountNumber"`

	// SortCode UK sort code. 6 digits.
	SortCode string `json:"sortCode"`
}

// Stable20240101CreateInvoiceRequest defines model for Stable20240101CreateInvoiceRequest.
type Stable20240101CreateInvoiceRequest struct {
	// AccountingDate Accounting date
	AccountingDate *openapi_types.Date `json:"accountingDate,omitempty"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingRunId Billing Run ID
	BillingRunId *string `json:"billingRunId,omitempty"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId *string `json:"billingScheduleId,omitempty"`

	// CreditBalances Credit balances
	CreditBalances *string  `json:"creditBalances,omitempty"`
	Currency       Currency `json:"currency"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress *Address1 `json:"customerBillingAddress,omitempty"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails *[]string `json:"customerEmails,omitempty"`

	// CustomerId The ID of the Customer this invoice is linked to
	CustomerId string `json:"customerId"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName *string `json:"customerLegalCompanyName,omitempty"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress *Address1 `json:"customerShippingAddress,omitempty"`

	// DueDate Due date
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`
}

// Stable20240101CreateOrUpdateLineItem defines model for Stable20240101CreateOrUpdateLineItem.
type Stable20240101CreateOrUpdateLineItem struct {
	// CreditGrantId Credit Grant ID
	CreditGrantId *string `json:"creditGrantId,omitempty"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GroupId Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Price per Item
	Rate                  string                 `json:"rate"`
	RateDisplay           *RateDisplay           `json:"rateDisplay,omitempty"`
	RevenueClassification *RevenueClassification `json:"revenueClassification,omitempty"`

	// ServicePeriod Service Period
	ServicePeriod *DateRange `json:"servicePeriod,omitempty"`

	// ServicePeriodEnd End of the service period (the time period in which the service was provided)
	ServicePeriodEnd *string `json:"servicePeriodEnd,omitempty"`

	// ServicePeriodStart Start of the service period (the time period in which the service was provided)
	ServicePeriodStart *string `json:"servicePeriodStart,omitempty"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`
}

// Stable20240101LineItemResponse defines model for Stable20240101LineItemResponse.
type Stable20240101LineItemResponse struct {
	// CreditGrantId Credit Grant ID
	CreditGrantId *string `json:"creditGrantId,omitempty"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GrossTotal Gross total, in decimal format of the Invoice's currency
	GrossTotal string `json:"grossTotal"`

	// GroupId Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// Id Line Item ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// InvoiceId Invoice ID
	InvoiceId string `json:"invoiceId"`

	// NetTotal Net total, in decimal format of the Invoice's currency
	NetTotal string `json:"netTotal"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Price per Item
	Rate                  string                 `json:"rate"`
	RateDisplay           RateDisplay            `json:"rateDisplay"`
	RevenueClassification *RevenueClassification `json:"revenueClassification,omitempty"`

	// ServicePeriod Service Period
	ServicePeriod *DateRange `json:"servicePeriod,omitempty"`

	// ServicePeriodEnd End of the service period (the time period in which the service was provided)
	ServicePeriodEnd *string `json:"servicePeriodEnd,omitempty"`

	// ServicePeriodStart Start of the service period (the time period in which the service was provided)
	ServicePeriodStart *string `json:"servicePeriodStart,omitempty"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`

	// TotalTax Total tax, in decimal format of the Invoice's currency
	TotalTax string `json:"totalTax"`
}

// Stable20240101PatchInvoiceRequest defines model for Stable20240101PatchInvoiceRequest.
type Stable20240101PatchInvoiceRequest struct {
	// AccountingDate Accounting date
	AccountingDate *openapi_types.Date `json:"accountingDate,omitempty"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingRunId Billing Run ID
	BillingRunId *string `json:"billingRunId,omitempty"`

	// CreditBalances Credit balances
	CreditBalances *string `json:"creditBalances,omitempty"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress *Address1 `json:"customerBillingAddress,omitempty"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails *[]string `json:"customerEmails,omitempty"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName *string `json:"customerLegalCompanyName,omitempty"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress *Address1 `json:"customerShippingAddress,omitempty"`

	// DueDate Due date
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`
}

// Stable20240101UpdateInvoiceRequest defines model for Stable20240101UpdateInvoiceRequest.
type Stable20240101UpdateInvoiceRequest struct {
	// AccountingDate Accounting date
	AccountingDate *openapi_types.Date `json:"accountingDate,omitempty"`

	// BillingPeriod Billing period
	BillingPeriod *InclusiveDateRange `json:"billingPeriod,omitempty"`

	// BillingRunId Billing Run ID
	BillingRunId *string `json:"billingRunId,omitempty"`

	// CreditBalances Credit balances
	CreditBalances *string `json:"creditBalances,omitempty"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress *Address1 `json:"customerBillingAddress,omitempty"`

	// CustomerEmails Customer email addresses, used for sending the Invoice if provided
	CustomerEmails *[]string `json:"customerEmails,omitempty"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName *string `json:"customerLegalCompanyName,omitempty"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress *Address1 `json:"customerShippingAddress,omitempty"`

	// DueDate Due date
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// Memo Invoice memo
	Memo *string `json:"memo,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Invoice. These are not interpreted by Sequence; they are present for your use alone.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`

	// PaymentOptions Invoice payment options
	PaymentOptions *[]InvoicePaymentOption `json:"paymentOptions,omitempty"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Reference Reference
	Reference *string `json:"reference,omitempty"`
}

// Stable20240509ListResponseModel defines model for Stable20240509ListResponseModel.
type Stable20240509ListResponseModel struct {
	// Items Products
	Items []Stable20240509ProductResponse `json:"items"`

	// Pagination Results pagination
	Pagination PaginationMeta `json:"pagination"`
}

// Stable20240509ProductRequest defines model for Stable20240509ProductRequest.
type Stable20240509ProductRequest struct {
	// Label The internal description of the product. This can be used to maintain some explanation or comments regarding the product.
	Label *string `json:"label,omitempty"`

	// Name Name of the Product, this appears within Sequence's dashboard.
	Name string `json:"name"`
}

// Stable20240509ProductResponse defines model for Stable20240509ProductResponse.
type Stable20240509ProductResponse struct {
	// CreatedAt Time at which the Product was first created, in ISO 8601 format (UTC). This is set by the server and cannot be changed. Expect millisecond precision.
	CreatedAt string `json:"createdAt"`

	// Id Product ID
	Id string `json:"id"`

	// Label The internal description of the product. This can be used to maintain some explanation or comments regarding the product.
	Label *string `json:"label,omitempty"`

	// Name Name of the Product, this appears within Sequence's dashboard.
	Name string `json:"name"`

	// UpdatedAt Time at which the Product was last updated, in ISO 8601 format (UTC). Expect millisecond precision.
	UpdatedAt string `json:"updatedAt"`
}

// State defines model for State.
type State string

// State1 defines model for State1.
type State1 string

// State2 defines model for State2.
type State2 string

// TaxCategoryResponse The tax category for all line items in this line item group
type TaxCategoryResponse struct {
	// Id Tax Category ID
	Id string `json:"id"`

	// Name Tax Category name
	Name string `json:"name"`
}

// TaxRateResponse defines model for TaxRateResponse.
type TaxRateResponse struct {
	// Amount The tax rate. Must be between 0 and 100.
	Amount  string      `json:"amount"`
	Country CountryCode `json:"country"`

	// Description The description of the tax rate
	Description *string `json:"description,omitempty"`

	// Id Tax Rate ID
	Id string `json:"id"`

	// InvoiceName The long name used on the invoice, e.g. "Value Added Tax"
	InvoiceName string `json:"invoiceName"`

	// InvoiceShortName The short name used on the invoice, e.g. "VAT"
	InvoiceShortName string `json:"invoiceShortName"`

	// IsArchived Whether this tax rate is archived
	IsArchived bool `json:"isArchived"`

	// IsPublished Tax Rate status
	IsPublished bool `json:"isPublished"`

	// Name The full name of the tax rate, e.g. "Sales tax"
	Name string `json:"name"`

	// Region The region that this tax rate applies to
	Region *string `json:"region,omitempty"`

	// TaxCategoryId The Tax Category ID that this Tax Rate is part of
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`

	// UpdatedAt The last time this tax rate was updated
	UpdatedAt *string `json:"updatedAt,omitempty"`

	// Version Tax Rate version
	Version int64 `json:"version"`

	// VersionId Tax Rate Version ID
	VersionId string `json:"versionId"`
}

// TaxStatus defines model for TaxStatus.
type TaxStatus string

// UpdateAccountPaymentSettingsEndpointUpdateAccountPaymentSettingsRequest defines model for UpdateAccountPaymentSettingsEndpointUpdateAccountPaymentSettingsRequest.
type UpdateAccountPaymentSettingsEndpointUpdateAccountPaymentSettingsRequest struct {
	// FailureNotifications The failure notification settings for the account
	FailureNotifications PaymentFailureNotifications `json:"failureNotifications"`
}

// UpdateBillingScheduleRequest defines model for UpdateBillingScheduleRequest.
type UpdateBillingScheduleRequest struct {
	// AttachmentAssetIds IDs of assets that are attached to this schedule
	AttachmentAssetIds *[]string `json:"attachmentAssetIds,omitempty"`

	// AutoIssueInvoices Auto-issue invoices for this billing schedule
	AutoIssueInvoices bool `json:"autoIssueInvoices"`

	// EndDate End date
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// Phases Phases
	Phases []PhaseRequest `json:"phases"`

	// PurchaseOrderNumber Optional purchase order number to be added to invoices
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// RecurrenceDayOfMonth Recurrence day of month
	RecurrenceDayOfMonth *int32 `json:"recurrenceDayOfMonth,omitempty"`

	// RollUpBilling Toggles Roll-up billing
	RollUpBilling bool `json:"rollUpBilling"`

	// StartDate Start date
	StartDate openapi_types.Date `json:"startDate"`

	// TaxRates Tax Rate for each Product
	TaxRates []ProductTaxRateRepresentation `json:"taxRates"`
}

// UpdateBillingScheduleSettingsEndpointUpdateBillingScheduleSettingsRequestModel defines model for UpdateBillingScheduleSettingsEndpointUpdateBillingScheduleSettingsRequestModel.
type UpdateBillingScheduleSettingsEndpointUpdateBillingScheduleSettingsRequestModel struct {
	// AutoCharge Automatically collect this payment if payment details are available
	AutoCharge      *bool           `json:"autoCharge,omitempty"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`
}

// UpdateCreditNoteEndpointUpdateCreditNoteRequestModel defines model for UpdateCreditNoteEndpointUpdateCreditNoteRequestModel.
type UpdateCreditNoteEndpointUpdateCreditNoteRequestModel struct {
	// BillingPeriodEnd Billing period end
	BillingPeriodEnd *string `json:"billingPeriodEnd,omitempty"`

	// BillingPeriodStart Billing period start
	BillingPeriodStart *string `json:"billingPeriodStart,omitempty"`

	// CustomerBillingAddress Customer's billing address
	CustomerBillingAddress *Address1 `json:"customerBillingAddress,omitempty"`

	// CustomerEmails Customer's email addresses, used for sending the Credit Note if provided
	CustomerEmails *[]string `json:"customerEmails,omitempty"`

	// CustomerLegalCompanyName Customer's legal company name
	CustomerLegalCompanyName *string `json:"customerLegalCompanyName,omitempty"`

	// CustomerShippingAddress Customer's billing address
	CustomerShippingAddress *Address1 `json:"customerShippingAddress,omitempty"`

	// CustomerTaxId Customer's tax ID
	CustomerTaxId *string `json:"customerTaxId,omitempty"`

	// Memo Credit Note memo
	Memo *string `json:"memo,omitempty"`

	// Metadata Mapping of key-value pairs to attach to the Credit Note. These are not interpreted by Sequence; they are present for your use alone.
	Metadata *[]KeyValuePair `json:"metadata,omitempty"`

	// PurchaseOrderNumber Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`

	// Settings Credit note settings
	Settings *CreditNoteSettings `json:"settings,omitempty"`
}

// UpdateCreditNoteLineItemEndpointProductUpdateCreditNoteLineItemResponseModel defines model for UpdateCreditNoteLineItemEndpointProductUpdateCreditNoteLineItemResponseModel.
type UpdateCreditNoteLineItemEndpointProductUpdateCreditNoteLineItemResponseModel struct {
	// CreditNoteId Credit Note Line Item ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// GrossTotal Gross Total
	GrossTotal string `json:"grossTotal"`

	// GroupId Credit Note Line Item Group ID
	GroupId *string `json:"groupId,omitempty"`

	// Id Credit Note Line Item ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemId Line Item ID
	LineItemId *string `json:"lineItemId,omitempty"`

	// NetTotal Net Total
	NetTotal string `json:"netTotal"`

	// PriceId Price ID
	PriceId *string `json:"priceId,omitempty"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string      `json:"rate"`
	RateDisplay RateDisplay `json:"rateDisplay"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`

	// TotalTax Total Tax
	TotalTax string `json:"totalTax"`
}

// UpdateCreditNoteLineItemEndpointUpdateCreditNoteLineItemRequestModel defines model for UpdateCreditNoteLineItemEndpointUpdateCreditNoteLineItemRequestModel.
type UpdateCreditNoteLineItemEndpointUpdateCreditNoteLineItemRequestModel struct {
	// Description Item Description
	Description *string `json:"description,omitempty"`

	// ExternalIds IDs in external integrations
	ExternalIds []IntegrationExternalIdentifier `json:"externalIds"`

	// Quantity Quantity
	Quantity string `json:"quantity"`

	// Rate Rate per Item
	Rate        string       `json:"rate"`
	RateDisplay *RateDisplay `json:"rateDisplay,omitempty"`

	// TaxRate Tax Rate
	TaxRate string `json:"taxRate"`

	// Title Item Title
	Title string `json:"title"`
}

// UpdateCreditNoteLineItemGroupEndpointProductUpdateCreditNoteLineItemGroupResponseModel defines model for UpdateCreditNoteLineItemGroupEndpointProductUpdateCreditNoteLineItemGroupResponseModel.
type UpdateCreditNoteLineItemGroupEndpointProductUpdateCreditNoteLineItemGroupResponseModel struct {
	// CreditNoteId Credit Note ID
	CreditNoteId string `json:"creditNoteId"`

	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// GrossTotal Gross total
	GrossTotal string `json:"grossTotal"`

	// Id Credit Note Line Item Group ID
	Id string `json:"id"`

	// Index Index (for maintaining order)
	Index int `json:"index"`

	// LineItemGroupId Line Item Group ID
	LineItemGroupId *string `json:"lineItemGroupId,omitempty"`

	// NetTotal Net total
	NetTotal string `json:"netTotal"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`

	// TotalTax Total tax
	TotalTax string `json:"totalTax"`
}

// UpdateCreditNoteLineItemGroupEndpointUpdateCreditNoteLineItemGroupRequestModel defines model for UpdateCreditNoteLineItemGroupEndpointUpdateCreditNoteLineItemGroupRequestModel.
type UpdateCreditNoteLineItemGroupEndpointUpdateCreditNoteLineItemGroupRequestModel struct {
	// Description Credit Note Line Item Group Description
	Description *string `json:"description,omitempty"`

	// Title Credit Note Line Item Group Title
	Title string `json:"title"`
}

// UpdateCustomerAliasEndpointProductUpdateCustomerAliasResponseModel defines model for UpdateCustomerAliasEndpointProductUpdateCustomerAliasResponseModel.
type UpdateCustomerAliasEndpointProductUpdateCustomerAliasResponseModel struct {
	// ArchivedAt Archived At
	ArchivedAt *string `json:"archivedAt,omitempty"`

	// CreatedAt Created At
	CreatedAt string `json:"createdAt"`

	// CustomerId Customer ID
	CustomerId string `json:"customerId"`

	// DeletedAt Deleted At
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Id Unique ID
	Id string `json:"id"`

	// Label Alias label
	Label *string `json:"label,omitempty"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Value Alias value
	Value string `json:"value"`
}

// UpdateCustomerAliasEndpointUpdateCustomerAliasRequestModel defines model for UpdateCustomerAliasEndpointUpdateCustomerAliasRequestModel.
type UpdateCustomerAliasEndpointUpdateCustomerAliasRequestModel struct {
	// Label Alias label
	Label *string `json:"label,omitempty"`
}

// UpdateCustomerSettingsEndpointProductUpdateCustomerSettingsResponseModel defines model for UpdateCustomerSettingsEndpointProductUpdateCustomerSettingsResponseModel.
type UpdateCustomerSettingsEndpointProductUpdateCustomerSettingsResponseModel struct {
	// CustomerId Customer Account ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id              string          `json:"id"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// UpdateCustomerSettingsEndpointUpdateCustomerSettingsRequestModel defines model for UpdateCustomerSettingsEndpointUpdateCustomerSettingsRequestModel.
type UpdateCustomerSettingsEndpointUpdateCustomerSettingsRequestModel struct {
	PaymentProvider PaymentProvider `json:"paymentProvider"`
}

// UpdateDiscountEndpointProductUpdateDiscountResponseModel defines model for UpdateDiscountEndpointProductUpdateDiscountResponseModel.
type UpdateDiscountEndpointProductUpdateDiscountResponseModel struct {
	// Amount Amount to be reduced
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId string `json:"billingScheduleId"`

	// CreatedAt Created at
	CreatedAt               string                  `json:"createdAt"`
	DiscountCalculationType DiscountCalculationType `json:"discountCalculationType"`

	// Id Discount ID
	Id string `json:"id"`

	// Message Message to appear on the Invoice
	Message string `json:"message"`

	// PhaseId Phase ID
	PhaseId *string `json:"phaseId,omitempty"`

	// PriceIds Price IDs this discount applies to. If not populated, the discount applies to all prices on the billing schedule
	PriceIds []string `json:"priceIds"`

	// SeparateLineItem Indicates whether the discount should appear as a separate line item in the invoice
	SeparateLineItem bool `json:"separateLineItem"`

	// SequenceAccountId The Sequence Account to which this Discount belongs
	SequenceAccountId string `json:"sequenceAccountId"`

	// UpdatedAt Updated At
	UpdatedAt string `json:"updatedAt"`

	// ValidFrom First Day Discount is Valid
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// ValidTo Last Day Discount is Valid
	ValidTo *openapi_types.Date `json:"validTo,omitempty"`
}

// UpdateDiscountEndpointUpdateDiscountRequestModel defines model for UpdateDiscountEndpointUpdateDiscountRequestModel.
type UpdateDiscountEndpointUpdateDiscountRequestModel struct {
	// Amount Amount to be reduced
	Amount float32 `json:"amount"`

	// BillingScheduleId Billing Schedule ID
	BillingScheduleId       string                  `json:"billingScheduleId"`
	DiscountCalculationType DiscountCalculationType `json:"discountCalculationType"`

	// Message Message to appear on the Invoice
	Message string `json:"message"`

	// PriceIds Price IDs this discount applies to. If not populated, the discount applies to all prices on the billing schedule
	PriceIds []string `json:"priceIds"`

	// SeparateLineItem Indicates whether the discount should appear as a separate line item in the invoice
	SeparateLineItem bool `json:"separateLineItem"`

	// ValidFrom First Day Discount is Valid
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// ValidTo Last Day Discount is Valid
	ValidTo *openapi_types.Date `json:"validTo,omitempty"`
}

// UpdateInvoicePaymentStatusEndpointRequestModel defines model for UpdateInvoicePaymentStatusEndpointRequestModel.
type UpdateInvoicePaymentStatusEndpointRequestModel struct {
	PaymentStatus InvoicePaymentStatus `json:"paymentStatus"`
}

// UpdateInvoiceRenderSettingsEndpointProductUpdateInvoiceRenderSettingsResponseModel defines model for UpdateInvoiceRenderSettingsEndpointProductUpdateInvoiceRenderSettingsResponseModel.
type UpdateInvoiceRenderSettingsEndpointProductUpdateInvoiceRenderSettingsResponseModel struct {
	// Id Invoice settings ID
	Id                 string                   `json:"id"`
	PaymentLinkDisplay PaymentLinkDisplayOption `json:"paymentLinkDisplay"`
}

// UpdateInvoiceRenderSettingsEndpointUpdateInvoiceRenderSettingsRequestModel defines model for UpdateInvoiceRenderSettingsEndpointUpdateInvoiceRenderSettingsRequestModel.
type UpdateInvoiceRenderSettingsEndpointUpdateInvoiceRenderSettingsRequestModel struct {
	PaymentLinkDisplay PaymentLinkDisplayOption `json:"paymentLinkDisplay"`
}

// UpdateInvoiceSettingsEndpointProductUpdateInvoiceSettingsResponseModel defines model for UpdateInvoiceSettingsEndpointProductUpdateInvoiceSettingsResponseModel.
type UpdateInvoiceSettingsEndpointProductUpdateInvoiceSettingsResponseModel struct {
	// CustomerId Customer ID.
	CustomerId string `json:"customerId"`

	// Id Unique payment provider id.
	Id string `json:"id"`

	// InvoiceId Invoice ID.
	InvoiceId       string          `json:"invoiceId"`
	PaymentProvider PaymentProvider `json:"paymentProvider"`

	// SequenceAccountId Sequence Account ID.
	SequenceAccountId string `json:"sequenceAccountId"`
}

// UpdateInvoiceSettingsEndpointUpdateInvoiceSettingsRequestModel defines model for UpdateInvoiceSettingsEndpointUpdateInvoiceSettingsRequestModel.
type UpdateInvoiceSettingsEndpointUpdateInvoiceSettingsRequestModel struct {
	PaymentProvider PaymentProvider `json:"paymentProvider"`
}

// UpdateLineItemGroupRequestModel defines model for UpdateLineItemGroupRequestModel.
type UpdateLineItemGroupRequestModel struct {
	// Description Line Item Group Description
	Description *string `json:"description,omitempty"`

	// TaxCategoryId The tax category for all line items in this line item group
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`

	// Title Line Item Group Title
	Title string `json:"title"`
}

// UpdatePriceEndpointUpdatePriceRequestModel defines model for UpdatePriceEndpointUpdatePriceRequestModel.
type UpdatePriceEndpointUpdatePriceRequestModel struct {
	// Name The customer-facing name of this Price
	Name string `json:"name"`
}

// UpdateSeatMetricRequest defines model for UpdateSeatMetricRequest.
type UpdateSeatMetricRequest struct {
	// Description Optional description
	Description *string `json:"description,omitempty"`

	// Label Friendly, customer-facing name for this seat metric.
	Label string `json:"label"`
}

// UpdateSequenceAccountProductEndpointUpdateSequenceAccountRequest defines model for UpdateSequenceAccountProductEndpointUpdateSequenceAccountRequest.
type UpdateSequenceAccountProductEndpointUpdateSequenceAccountRequest struct {
	// AlertEmailAddresses Email address to which alert notifications will be sent
	AlertEmailAddresses []string `json:"alertEmailAddresses"`
}

// UpdateSequenceUserRequest defines model for UpdateSequenceUserRequest.
type UpdateSequenceUserRequest struct {
	// SequenceAccountIds A list of Sequence account IDs. These account IDs represent the accounts this user has access to.
	SequenceAccountIds []string `json:"sequenceAccountIds"`
}

// UpdateSequenceUserResponse defines model for UpdateSequenceUserResponse.
type UpdateSequenceUserResponse struct {
	// Id Unique user ID
	Id string `json:"id"`

	// SequenceAccountIds A list of Sequence account IDs. These account IDs represent the accounts this user has access to.
	SequenceAccountIds []string `json:"sequenceAccountIds"`
}

// UpdateTaxRateRequest defines model for UpdateTaxRateRequest.
type UpdateTaxRateRequest struct {
	// Amount The tax rate. Must be between 0 and 100.
	Amount  string      `json:"amount"`
	Country CountryCode `json:"country"`

	// Description The description of the tax rate
	Description *string `json:"description,omitempty"`

	// Id Tax Rate ID
	Id string `json:"id"`

	// InvoiceName The long name used on the invoice, e.g. "Value Added Tax"
	InvoiceName string `json:"invoiceName"`

	// InvoiceShortName The short name used on the invoice, e.g. "VAT"
	InvoiceShortName string `json:"invoiceShortName"`

	// IsPublished Tax Rate status
	IsPublished bool `json:"isPublished"`

	// Name The full name of the tax rate, e.g. "Sales tax"
	Name string `json:"name"`

	// Region The region that this tax rate applies to
	Region *string `json:"region,omitempty"`

	// TaxCategoryId The Tax Category Version ID that this Tax Rate is part of
	TaxCategoryId *string `json:"taxCategoryId,omitempty"`
}

// UpdateTaxRegistrationEndpointProductUpdateTaxRegistrationResponseModel defines model for UpdateTaxRegistrationEndpointProductUpdateTaxRegistrationResponseModel.
type UpdateTaxRegistrationEndpointProductUpdateTaxRegistrationResponseModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// Id Tax registration ID
	Id string `json:"id"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`

	// SequenceAccountId Sequence account ID
	SequenceAccountId string  `json:"sequenceAccountId"`
	State             *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// UpdateTaxRegistrationEndpointUpdateTaxRegistrationRequestModel defines model for UpdateTaxRegistrationEndpointUpdateTaxRegistrationRequestModel.
type UpdateTaxRegistrationEndpointUpdateTaxRegistrationRequestModel struct {
	Country CountryCode `json:"country"`

	// CustomerId The customer that this tax registration belongs to
	CustomerId *string `json:"customerId,omitempty"`

	// MerchantId The merchant that this tax registration belongs to
	MerchantId *string `json:"merchantId,omitempty"`
	State      *State1 `json:"state,omitempty"`

	// TaxIdentifier The unique identifier for this tax registration
	TaxIdentifier string `json:"taxIdentifier"`
}

// UpdateUsageMetricEndpointProductUpdateUsageMetricResponseModel defines model for UpdateUsageMetricEndpointProductUpdateUsageMetricResponseModel.
type UpdateUsageMetricEndpointProductUpdateUsageMetricResponseModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// CreatedAt Created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string `json:"groupingProperty,omitempty"`

	// Id Unique ID
	Id         string     `json:"id"`
	MetricType MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// Parameters Required parameters
	Parameters []CustomMetricParameter `json:"parameters"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters map[string]map[string]interface{} `json:"propertyFilters"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// UpdateUsageMetricEndpointUpdateUsageMetricRequestModel defines model for UpdateUsageMetricEndpointUpdateUsageMetricRequestModel.
type UpdateUsageMetricEndpointUpdateUsageMetricRequestModel struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`

	// CaseSensitive caseSensitive
	CaseSensitive *bool `json:"caseSensitive,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string    `json:"groupingProperty,omitempty"`
	MetricType       MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// PropertiesToNegate propertiesToNegate
	PropertiesToNegate *[]string `json:"propertiesToNegate,omitempty"`

	// PropertyFilters propertyFilters
	PropertyFilters *map[string]map[string]interface{} `json:"propertyFilters,omitempty"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// UsAchDestination Merchant's US account details, for receiving payment by ACH
type UsAchDestination struct {
	AccountName       string `json:"accountName"`
	AccountNumber     string `json:"accountNumber"`
	BankName          string `json:"bankName"`
	BankRoutingNumber string `json:"bankRoutingNumber"`
}

// UsWireDestination Merchant's US account details, for receiving payment by wire transfer
type UsWireDestination struct {
	AccountName   string `json:"accountName"`
	AccountNumber string `json:"accountNumber"`

	// BankAddress Customer's billing address
	BankAddress       Address1 `json:"bankAddress"`
	BankName          string   `json:"bankName"`
	BankRoutingNumber string   `json:"bankRoutingNumber"`
	SwiftCode         string   `json:"swiftCode"`
}

// UsageCalculationFrequency defines model for UsageCalculationFrequency.
type UsageCalculationFrequency string

// UsageCalculationFrequency1 defines model for UsageCalculationFrequency1.
type UsageCalculationFrequency1 string

// UsageCalculationMode defines model for UsageCalculationMode.
type UsageCalculationMode string

// UsageCalculationPeriod The period over which usage is aggregated. This value is only taken into consideration and required with graduated pricing structures with a usage calculation mode of 'PERIOD'. It will be ignored for all non-graduated prices.
type UsageCalculationPeriod struct {
	Frequency UsageCalculationFrequency `json:"frequency"`

	// Interval Interval determines the time period over which usage is aggregated. For example, if the frequency is MONTHLY and the interval is 3, the usage is aggregated over 3 months before starting at 0 again.
	Interval int32 `json:"interval"`
}

// UsageCalculationPeriod1 The period over which usage is aggregated.
type UsageCalculationPeriod1 struct {
	Frequency UsageCalculationFrequency1 `json:"frequency"`

	// Interval Interval determines the time period over which usage is aggregated. For example, if the frequency is MONTHLY and the interval is 3, the usage is aggregated over 3 months before starting at 0 again.
	Interval int32 `json:"interval"`
}

// UsageMetric defines model for UsageMetric.
type UsageMetric struct {
	// AggregationProperty Property within the event to aggregate
	AggregationProperty *string         `json:"aggregationProperty,omitempty"`
	AggregationType     AggregationType `json:"aggregationType"`
	CaseSensitive       *bool           `json:"caseSensitive,omitempty"`

	// CreatedAt Created at
	CreatedAt *string `json:"createdAt,omitempty"`

	// DeletedAt Created at
	DeletedAt *string `json:"deletedAt,omitempty"`

	// Description Description for this metric
	Description *string `json:"description,omitempty"`

	// EventType The `eventType` of the Usage Event to be aggregated
	EventType string `json:"eventType"`

	// GroupingProperty Property within the event to group results by
	GroupingProperty *string `json:"groupingProperty,omitempty"`

	// Id Unique ID
	Id         string     `json:"id"`
	MetricType MetricType `json:"metricType"`

	// Name Human-readable name for this metric, which should be unique
	Name string `json:"name"`

	// Parameters Required parameters
	Parameters         []CustomMetricParameter           `json:"parameters"`
	PropertiesToNegate *[]string                         `json:"propertiesToNegate,omitempty"`
	PropertyFilters    map[string]map[string]interface{} `json:"propertyFilters"`

	// SequenceAccountId Sequence Account ID
	SequenceAccountId string `json:"sequenceAccountId"`

	// Unit Human-readable unit of the aggregated metric, eg. API calls)
	Unit *string `json:"unit,omitempty"`
}

// UsageMetricCalculationResponse defines model for UsageMetricCalculationResponse.
type UsageMetricCalculationResponse struct {
	AggregationType AggregationType `json:"aggregationType"`
	EventCount      int             `json:"eventCount"`
	EventType       string          `json:"eventType"`
	MaxEventId      *string         `json:"maxEventId,omitempty"`
	MetricType      MetricType      `json:"metricType"`
	MinEventId      *string         `json:"minEventId,omitempty"`
	Name            string          `json:"name"`
	Unit            *string         `json:"unit,omitempty"`
	Value           float32         `json:"value"`
}

// VolumeListPriceRequest defines model for VolumeListPriceRequest.
type VolumeListPriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []GenerateIntegrationIdRequest1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure VolumePricingStructure `json:"structure"`
}

// VolumeListPriceResponse defines model for VolumeListPriceResponse.
type VolumeListPriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Creation timestamp. Formatted as an ISO 8601 timestamp.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this price, and are only required when using a custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique ID
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this price in third-party integration systems
	IntegrationIds []IntegrationId1 `json:"integrationIds"`

	// Name The customer-facing name of this list price
	Name string `json:"name"`

	// ProductId The related product ID
	ProductId string `json:"productId"`

	// Structure The pricing structure
	Structure VolumePricingStructure `json:"structure"`

	// UpdatedAt Timestamp when price was last updated. Formatted as an ISO 8601 timestamp.
	UpdatedAt string `json:"updatedAt"`
}

// VolumePriceRequest defines model for VolumePriceRequest.
type VolumePriceRequest struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`
	Currency         Currency         `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters *[]PriceParameter `json:"customMetricParameters,omitempty"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds *[]GenerateIntegrationIdRequest2 `json:"integrationIds,omitempty"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure VolumePricingStructure1 `json:"structure"`
}

// VolumePriceResponse defines model for VolumePriceResponse.
type VolumePriceResponse struct {
	BillingFrequency BillingFrequency `json:"billingFrequency"`
	BillingType      BillingType      `json:"billingType"`

	// CreatedAt Time at which the Price was initially created, in ISO 8601 format.
	CreatedAt string   `json:"createdAt"`
	Currency  Currency `json:"currency"`

	// CustomMetricParameters Specific parameters to influence usage calculation for this Price, and are only required when using custom metric. Please speak to your Sequence contacts for further information prior to usage.
	CustomMetricParameters []PriceParameter `json:"customMetricParameters"`

	// Id Unique Price ID, generated by Sequence on creation.
	Id string `json:"id"`

	// IntegrationIds Alternate IDs for this Price in third-party integration systems
	IntegrationIds []IntegrationId2 `json:"integrationIds"`

	// ListPriceId The list price ID, if this price variant was created from a list price
	ListPriceId *string `json:"listPriceId,omitempty"`

	// Name A short form description of the price, which appears as the title of line items on invoices.
	Name string `json:"name"`

	// ProductId The ID of the Product that this Price is associated with.
	ProductId string `json:"productId"`

	// Structure The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
	Structure VolumePricingStructure1 `json:"structure"`

	// UpdatedAt Time at which the Price was last updated, in ISO 8601 format.
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// VolumePricingStructure The pricing structure
type VolumePricingStructure struct {
	PricingType VolumePricingType `json:"pricingType"`

	// Tiers A list of contiguous pricing tiers
	Tiers []VolumeUsageTier `json:"tiers"`

	// UsageMetricId The usage metric associated to this tier
	UsageMetricId string `json:"usageMetricId"`
}

// VolumePricingStructure1 The pricing structure for this price. This can be a simple fixed price, or a more complex structure that varies based on usage.
type VolumePricingStructure1 struct {
	PricingType VolumePricingType `json:"pricingType"`

	// Tiers A list of contiguous pricing tiers
	Tiers []VolumeUsageTier `json:"tiers"`

	// UsageMetricId The usage metric associated to this tier
	UsageMetricId string `json:"usageMetricId"`
}

// VolumePricingType defines model for VolumePricingType.
type VolumePricingType string

// VolumeUsageTier defines model for VolumeUsageTier.
type VolumeUsageTier struct {
	// Fee The nominal fee associated with usage at this tier
	Fee *string `json:"fee,omitempty"`

	// IsPricePercentage Indicate whether the price attribute is to be considered as a percentage or an absolute value.
	IsPricePercentage bool `json:"isPricePercentage"`

	// MaxPrice Maximum Price to Charge for each Unit if Price is Percentage Based
	MaxPrice *string `json:"maxPrice,omitempty"`

	// MinPrice Minimum Price to Charge for each Unit if Price is Percentage Based
	MinPrice *string `json:"minPrice,omitempty"`

	// Price The rate to apply to usage for this product in this tier. In the case of percentage pricing where `isPricePercentage` is set to `true`, a value of 1 represents 100%.
	Price string `json:"price"`

	// UpperBound The upper bound of usage for this tier. Set to null to if this is a final tier and is unbounded. The lower bound is set by the previous tier or 0 if it's the first one.
	UpperBound *string `json:"upperBound,omitempty"`
}

// GetBillingProductsParams defines parameters for GetBillingProducts.
type GetBillingProductsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetBillingProductsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetBillingProductsParamsSequenceVersion defines parameters for GetBillingProducts.
type GetBillingProductsParamsSequenceVersion string

// GetBillingSchedulesParams defines parameters for GetBillingSchedules.
type GetBillingSchedulesParams struct {
	// CustomerId Filter by customer ID.
	CustomerId *string `form:"customerId,omitempty" json:"customerId,omitempty"`

	// BillingScheduleStatus Filter by status.
	BillingScheduleStatus *string `form:"billingScheduleStatus,omitempty" json:"billingScheduleStatus,omitempty"`

	// AutoSendInvoices Filter by auto send invoices.
	AutoSendInvoices *string `form:"autoSendInvoices,omitempty" json:"autoSendInvoices,omitempty"`

	// Label Filter by label.
	Label *string `form:"label,omitempty" json:"label,omitempty"`

	// IncludeArchivedSchedules Include archived schedules.
	IncludeArchivedSchedules *string `form:"includeArchivedSchedules,omitempty" json:"includeArchivedSchedules,omitempty"`

	// SortBy Sort column. Default: creation time.
	SortBy *GetBillingSchedulesParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetBillingSchedulesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetBillingSchedulesParamsSortBy defines parameters for GetBillingSchedules.
type GetBillingSchedulesParamsSortBy string

// GetBillingSchedulesParamsSequenceVersion defines parameters for GetBillingSchedules.
type GetBillingSchedulesParamsSequenceVersion string

// PostBillingSchedulesParams defines parameters for PostBillingSchedules.
type PostBillingSchedulesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostBillingSchedulesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostBillingSchedulesParamsSequenceVersion defines parameters for PostBillingSchedules.
type PostBillingSchedulesParamsSequenceVersion string

// PostBillingSchedulesValidateTaxesParams defines parameters for PostBillingSchedulesValidateTaxes.
type PostBillingSchedulesValidateTaxesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostBillingSchedulesValidateTaxesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostBillingSchedulesValidateTaxesParamsSequenceVersion defines parameters for PostBillingSchedulesValidateTaxes.
type PostBillingSchedulesValidateTaxesParamsSequenceVersion string

// GetBillingSchedulesByBillingScheduleIdParams defines parameters for GetBillingSchedulesByBillingScheduleId.
type GetBillingSchedulesByBillingScheduleIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetBillingSchedulesByBillingScheduleIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetBillingSchedulesByBillingScheduleIdParamsSequenceVersion defines parameters for GetBillingSchedulesByBillingScheduleId.
type GetBillingSchedulesByBillingScheduleIdParamsSequenceVersion string

// PutBillingSchedulesByBillingScheduleIdParams defines parameters for PutBillingSchedulesByBillingScheduleId.
type PutBillingSchedulesByBillingScheduleIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutBillingSchedulesByBillingScheduleIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutBillingSchedulesByBillingScheduleIdParamsSequenceVersion defines parameters for PutBillingSchedulesByBillingScheduleId.
type PutBillingSchedulesByBillingScheduleIdParamsSequenceVersion string

// PutBillingSchedulesByBillingScheduleIdActivateParams defines parameters for PutBillingSchedulesByBillingScheduleIdActivate.
type PutBillingSchedulesByBillingScheduleIdActivateParams struct {
	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersion defines parameters for PutBillingSchedulesByBillingScheduleIdActivate.
type PutBillingSchedulesByBillingScheduleIdActivateParamsSequenceVersion string

// PostBillingSchedulesByBillingScheduleIdArchiveParams defines parameters for PostBillingSchedulesByBillingScheduleIdArchive.
type PostBillingSchedulesByBillingScheduleIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersion defines parameters for PostBillingSchedulesByBillingScheduleIdArchive.
type PostBillingSchedulesByBillingScheduleIdArchiveParamsSequenceVersion string

// GetCreditNotesParams defines parameters for GetCreditNotes.
type GetCreditNotesParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortBy Sort column. Default: creation time. Options: GROSS_TOTAL, CREDIT_NOTE_NUMBER, STATUS
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// CreditNoteStatus Filter by credit note status. Options: DRAFT, FINAL, IN_PROGRESS, SENT, VOIDED
	CreditNoteStatus *string `form:"creditNoteStatus,omitempty" json:"creditNoteStatus,omitempty"`

	// CustomerId Filter by customer id.
	CustomerId *string `form:"customerId,omitempty" json:"customerId,omitempty"`

	// SentBefore Filter by sent date before. Format: yyyy-MM-dd
	SentBefore *string `form:"sentBefore,omitempty" json:"sentBefore,omitempty"`

	// SentAfter Filter by sent date after. Format: yyyy-MM-dd
	SentAfter *string `form:"sentAfter,omitempty" json:"sentAfter,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditNotesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditNotesParamsSequenceVersion defines parameters for GetCreditNotes.
type GetCreditNotesParamsSequenceVersion string

// PostCreditNotesParams defines parameters for PostCreditNotes.
type PostCreditNotesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesParamsSequenceVersion defines parameters for PostCreditNotes.
type PostCreditNotesParamsSequenceVersion string

// GetCreditNotesByCreditnoteLineItemGroupsParams defines parameters for GetCreditNotesByCreditnoteLineItemGroups.
type GetCreditNotesByCreditnoteLineItemGroupsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion defines parameters for GetCreditNotesByCreditnoteLineItemGroups.
type GetCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion string

// PostCreditNotesByCreditnoteLineItemGroupsParams defines parameters for PostCreditNotesByCreditnoteLineItemGroups.
type PostCreditNotesByCreditnoteLineItemGroupsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion defines parameters for PostCreditNotesByCreditnoteLineItemGroups.
type PostCreditNotesByCreditnoteLineItemGroupsParamsSequenceVersion string

// DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams defines parameters for DeleteCreditNotesByCreditnoteLineItemGroupsById.
type DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion defines parameters for DeleteCreditNotesByCreditnoteLineItemGroupsById.
type DeleteCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion string

// PutCreditNotesByCreditnoteLineItemGroupsByIdParams defines parameters for PutCreditNotesByCreditnoteLineItemGroupsById.
type PutCreditNotesByCreditnoteLineItemGroupsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion defines parameters for PutCreditNotesByCreditnoteLineItemGroupsById.
type PutCreditNotesByCreditnoteLineItemGroupsByIdParamsSequenceVersion string

// GetCreditNotesByCreditnoteLineItemsParams defines parameters for GetCreditNotesByCreditnoteLineItems.
type GetCreditNotesByCreditnoteLineItemsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditNotesByCreditnoteLineItemsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditNotesByCreditnoteLineItemsParamsSequenceVersion defines parameters for GetCreditNotesByCreditnoteLineItems.
type GetCreditNotesByCreditnoteLineItemsParamsSequenceVersion string

// PostCreditNotesByCreditnoteLineItemsParams defines parameters for PostCreditNotesByCreditnoteLineItems.
type PostCreditNotesByCreditnoteLineItemsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByCreditnoteLineItemsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByCreditnoteLineItemsParamsSequenceVersion defines parameters for PostCreditNotesByCreditnoteLineItems.
type PostCreditNotesByCreditnoteLineItemsParamsSequenceVersion string

// DeleteCreditNotesByCreditnoteLineItemsByIdParams defines parameters for DeleteCreditNotesByCreditnoteLineItemsById.
type DeleteCreditNotesByCreditnoteLineItemsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion defines parameters for DeleteCreditNotesByCreditnoteLineItemsById.
type DeleteCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion string

// PutCreditNotesByCreditnoteLineItemsByIdParams defines parameters for PutCreditNotesByCreditnoteLineItemsById.
type PutCreditNotesByCreditnoteLineItemsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion defines parameters for PutCreditNotesByCreditnoteLineItemsById.
type PutCreditNotesByCreditnoteLineItemsByIdParamsSequenceVersion string

// DeleteCreditNotesByIdParams defines parameters for DeleteCreditNotesById.
type DeleteCreditNotesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteCreditNotesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteCreditNotesByIdParamsSequenceVersion defines parameters for DeleteCreditNotesById.
type DeleteCreditNotesByIdParamsSequenceVersion string

// GetCreditNotesByIdParams defines parameters for GetCreditNotesById.
type GetCreditNotesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditNotesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditNotesByIdParamsSequenceVersion defines parameters for GetCreditNotesById.
type GetCreditNotesByIdParamsSequenceVersion string

// PutCreditNotesByIdParams defines parameters for PutCreditNotesById.
type PutCreditNotesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCreditNotesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCreditNotesByIdParamsSequenceVersion defines parameters for PutCreditNotesById.
type PutCreditNotesByIdParamsSequenceVersion string

// GetCreditNotesByIdDownloadParams defines parameters for GetCreditNotesByIdDownload.
type GetCreditNotesByIdDownloadParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditNotesByIdDownloadParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditNotesByIdDownloadParamsSequenceVersion defines parameters for GetCreditNotesByIdDownload.
type GetCreditNotesByIdDownloadParamsSequenceVersion string

// PostCreditNotesByIdFinalizeParams defines parameters for PostCreditNotesByIdFinalize.
type PostCreditNotesByIdFinalizeParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByIdFinalizeParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByIdFinalizeParamsSequenceVersion defines parameters for PostCreditNotesByIdFinalize.
type PostCreditNotesByIdFinalizeParamsSequenceVersion string

// PostCreditNotesByIdFinalizeAndSendParams defines parameters for PostCreditNotesByIdFinalizeAndSend.
type PostCreditNotesByIdFinalizeAndSendParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByIdFinalizeAndSendParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByIdFinalizeAndSendParamsSequenceVersion defines parameters for PostCreditNotesByIdFinalizeAndSend.
type PostCreditNotesByIdFinalizeAndSendParamsSequenceVersion string

// PostCreditNotesByIdSendParams defines parameters for PostCreditNotesByIdSend.
type PostCreditNotesByIdSendParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByIdSendParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByIdSendParamsSequenceVersion defines parameters for PostCreditNotesByIdSend.
type PostCreditNotesByIdSendParamsSequenceVersion string

// PostCreditNotesByIdVoidParams defines parameters for PostCreditNotesByIdVoid.
type PostCreditNotesByIdVoidParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditNotesByIdVoidParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditNotesByIdVoidParamsSequenceVersion defines parameters for PostCreditNotesByIdVoid.
type PostCreditNotesByIdVoidParamsSequenceVersion string

// GetCreditsParams defines parameters for GetCredits.
type GetCreditsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditsParamsSequenceVersion defines parameters for GetCredits.
type GetCreditsParamsSequenceVersion string

// PostCreditsParams defines parameters for PostCredits.
type PostCreditsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCreditsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCreditsParamsSequenceVersion defines parameters for PostCredits.
type PostCreditsParamsSequenceVersion string

// GetCreditsByCustomerIdBalancesParams defines parameters for GetCreditsByCustomerIdBalances.
type GetCreditsByCustomerIdBalancesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditsByCustomerIdBalancesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditsByCustomerIdBalancesParamsSequenceVersion defines parameters for GetCreditsByCustomerIdBalances.
type GetCreditsByCustomerIdBalancesParamsSequenceVersion string

// GetCreditsByCustomerIdGrantsParams defines parameters for GetCreditsByCustomerIdGrants.
type GetCreditsByCustomerIdGrantsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditsByCustomerIdGrantsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditsByCustomerIdGrantsParamsSequenceVersion defines parameters for GetCreditsByCustomerIdGrants.
type GetCreditsByCustomerIdGrantsParamsSequenceVersion string

// GetCreditsByIdParams defines parameters for GetCreditsById.
type GetCreditsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCreditsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCreditsByIdParamsSequenceVersion defines parameters for GetCreditsById.
type GetCreditsByIdParamsSequenceVersion string

// GetCustomerAliasesParams defines parameters for GetCustomerAliases.
type GetCustomerAliasesParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomerAliasesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomerAliasesParamsSequenceVersion defines parameters for GetCustomerAliases.
type GetCustomerAliasesParamsSequenceVersion string

// PostCustomerAliasesParams defines parameters for PostCustomerAliases.
type PostCustomerAliasesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomerAliasesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomerAliasesParamsSequenceVersion defines parameters for PostCustomerAliases.
type PostCustomerAliasesParamsSequenceVersion string

// DeleteCustomerAliasesByIdParams defines parameters for DeleteCustomerAliasesById.
type DeleteCustomerAliasesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteCustomerAliasesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteCustomerAliasesByIdParamsSequenceVersion defines parameters for DeleteCustomerAliasesById.
type DeleteCustomerAliasesByIdParamsSequenceVersion string

// PutCustomerAliasesByIdParams defines parameters for PutCustomerAliasesById.
type PutCustomerAliasesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCustomerAliasesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCustomerAliasesByIdParamsSequenceVersion defines parameters for PutCustomerAliasesById.
type PutCustomerAliasesByIdParamsSequenceVersion string

// PostCustomerOrganizationsParams defines parameters for PostCustomerOrganizations.
type PostCustomerOrganizationsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomerOrganizationsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomerOrganizationsParamsSequenceVersion defines parameters for PostCustomerOrganizations.
type PostCustomerOrganizationsParamsSequenceVersion string

// PostCustomerOrganizationsByIdMembersParams defines parameters for PostCustomerOrganizationsByIdMembers.
type PostCustomerOrganizationsByIdMembersParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomerOrganizationsByIdMembersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomerOrganizationsByIdMembersParamsSequenceVersion defines parameters for PostCustomerOrganizationsByIdMembers.
type PostCustomerOrganizationsByIdMembersParamsSequenceVersion string

// PutCustomerOrganizationsByIdMembersParams defines parameters for PutCustomerOrganizationsByIdMembers.
type PutCustomerOrganizationsByIdMembersParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCustomerOrganizationsByIdMembersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCustomerOrganizationsByIdMembersParamsSequenceVersion defines parameters for PutCustomerOrganizationsByIdMembers.
type PutCustomerOrganizationsByIdMembersParamsSequenceVersion string

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	// SortBy Sort column. Default: creation time.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// LegalName Filter by legal name
	LegalName *string `form:"legalName,omitempty" json:"legalName,omitempty"`

	// Email Filter by email
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Alias Filter by alias
	Alias *string `form:"alias,omitempty" json:"alias,omitempty"`

	// IncludeArchived Include archived customers
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomersParamsSequenceVersion defines parameters for GetCustomers.
type GetCustomersParamsSequenceVersion string

// PostCustomersParams defines parameters for PostCustomers.
type PostCustomersParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomersParamsSequenceVersion defines parameters for PostCustomers.
type PostCustomersParamsSequenceVersion string

// GetCustomersByAliasByAliasParams defines parameters for GetCustomersByAliasByAlias.
type GetCustomersByAliasByAliasParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomersByAliasByAliasParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomersByAliasByAliasParamsSequenceVersion defines parameters for GetCustomersByAliasByAlias.
type GetCustomersByAliasByAliasParamsSequenceVersion string

// GetCustomersByCustomerContactsParams defines parameters for GetCustomersByCustomerContacts.
type GetCustomersByCustomerContactsParams struct {
	// IncludeArchived Include archived contacts in results
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomersByCustomerContactsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomersByCustomerContactsParamsSequenceVersion defines parameters for GetCustomersByCustomerContacts.
type GetCustomersByCustomerContactsParamsSequenceVersion string

// PostCustomersByCustomerContactsParams defines parameters for PostCustomersByCustomerContacts.
type PostCustomersByCustomerContactsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomersByCustomerContactsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomersByCustomerContactsParamsSequenceVersion defines parameters for PostCustomersByCustomerContacts.
type PostCustomersByCustomerContactsParamsSequenceVersion string

// PutCustomersByCustomerContactsByIdParams defines parameters for PutCustomersByCustomerContactsById.
type PutCustomersByCustomerContactsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCustomersByCustomerContactsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCustomersByCustomerContactsByIdParamsSequenceVersion defines parameters for PutCustomersByCustomerContactsById.
type PutCustomersByCustomerContactsByIdParamsSequenceVersion string

// PostCustomersByCustomerContactsByIdArchiveParams defines parameters for PostCustomersByCustomerContactsByIdArchive.
type PostCustomersByCustomerContactsByIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersion defines parameters for PostCustomersByCustomerContactsByIdArchive.
type PostCustomersByCustomerContactsByIdArchiveParamsSequenceVersion string

// GetCustomersByIdParams defines parameters for GetCustomersById.
type GetCustomersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomersByIdParamsSequenceVersion defines parameters for GetCustomersById.
type GetCustomersByIdParamsSequenceVersion string

// PutCustomersByIdParams defines parameters for PutCustomersById.
type PutCustomersByIdParams struct {
	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutCustomersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutCustomersByIdParamsSequenceVersion defines parameters for PutCustomersById.
type PutCustomersByIdParamsSequenceVersion string

// GetCustomersByIdAliasesParams defines parameters for GetCustomersByIdAliases.
type GetCustomersByIdAliasesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetCustomersByIdAliasesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetCustomersByIdAliasesParamsSequenceVersion defines parameters for GetCustomersByIdAliases.
type GetCustomersByIdAliasesParamsSequenceVersion string

// PostCustomersByIdArchiveParams defines parameters for PostCustomersByIdArchive.
type PostCustomersByIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostCustomersByIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostCustomersByIdArchiveParamsSequenceVersion defines parameters for PostCustomersByIdArchive.
type PostCustomersByIdArchiveParamsSequenceVersion string

// GetDiscountsParams defines parameters for GetDiscounts.
type GetDiscountsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetDiscountsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetDiscountsParamsSequenceVersion defines parameters for GetDiscounts.
type GetDiscountsParamsSequenceVersion string

// DeleteDiscountsByIdParams defines parameters for DeleteDiscountsById.
type DeleteDiscountsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteDiscountsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteDiscountsByIdParamsSequenceVersion defines parameters for DeleteDiscountsById.
type DeleteDiscountsByIdParamsSequenceVersion string

// GetDiscountsByIdParams defines parameters for GetDiscountsById.
type GetDiscountsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetDiscountsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetDiscountsByIdParamsSequenceVersion defines parameters for GetDiscountsById.
type GetDiscountsByIdParamsSequenceVersion string

// PutDiscountsByIdParams defines parameters for PutDiscountsById.
type PutDiscountsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutDiscountsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutDiscountsByIdParamsSequenceVersion defines parameters for PutDiscountsById.
type PutDiscountsByIdParamsSequenceVersion string

// GetInvoicesParams defines parameters for GetInvoices.
type GetInvoicesParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortBy Sort column. Default: creation time. Options: CUSTOMER_LEGAL_COMPANY_NAME, GROSS_TOTAL, ACCOUNTING_DATE
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// InvoiceStatus Filter by invoice status. Options: IN_PROGRESS, DRAFT, FINAL, SENT, VOIDED
	InvoiceStatus *string `form:"invoiceStatus,omitempty" json:"invoiceStatus,omitempty"`

	// InvoicePaymentStatus Filter by payment status. Options: UNPAID, PARTIALLY_PAID, PAID, UNCOLLECTIBLE
	InvoicePaymentStatus *string `form:"invoicePaymentStatus,omitempty" json:"invoicePaymentStatus,omitempty"`

	// CustomerId Filter by customer id.
	CustomerId *string `form:"customerId,omitempty" json:"customerId,omitempty"`

	// BillingScheduleId Filter by billing schedule id.
	BillingScheduleId *string `form:"billingScheduleId,omitempty" json:"billingScheduleId,omitempty"`

	// DueBefore Filter by due date before. Format: yyyy-MM-dd
	DueBefore *string `form:"dueBefore,omitempty" json:"dueBefore,omitempty"`

	// DueAfter Filter by due date after. Format: yyyy-MM-dd
	DueAfter *string `form:"dueAfter,omitempty" json:"dueAfter,omitempty"`

	// SentBefore Filter by sent date before. Format: yyyy-MM-dd
	SentBefore *string `form:"sentBefore,omitempty" json:"sentBefore,omitempty"`

	// SentAfter Filter by sent date after. Format: yyyy-MM-dd
	SentAfter *string `form:"sentAfter,omitempty" json:"sentAfter,omitempty"`

	// InvoiceBefore Filter by invoice date before. Format: yyyy-MM-dd
	InvoiceBefore *string `form:"invoiceBefore,omitempty" json:"invoiceBefore,omitempty"`

	// InvoiceAfter Filter by invoice date after. Format: yyyy-MM-dd
	InvoiceAfter *string `form:"invoiceAfter,omitempty" json:"invoiceAfter,omitempty"`

	// ExcludeZeroQuantity Exclude invoices with zero quantity.
	ExcludeZeroQuantity *bool `form:"excludeZeroQuantity,omitempty" json:"excludeZeroQuantity,omitempty"`

	// InvoiceCurrency Get invoices for a specific currency (provide a comma-separated list)
	InvoiceCurrency *string `form:"invoiceCurrency,omitempty" json:"invoiceCurrency,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesParamsSequenceVersion defines parameters for GetInvoices.
type GetInvoicesParamsSequenceVersion string

// PostInvoicesParams defines parameters for PostInvoices.
type PostInvoicesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesParamsSequenceVersion defines parameters for PostInvoices.
type PostInvoicesParamsSequenceVersion string

// GetInvoicesRenderSettingsParams defines parameters for GetInvoicesRenderSettings.
type GetInvoicesRenderSettingsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesRenderSettingsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesRenderSettingsParamsSequenceVersion defines parameters for GetInvoicesRenderSettings.
type GetInvoicesRenderSettingsParamsSequenceVersion string

// PutInvoicesRenderSettingsByIdParams defines parameters for PutInvoicesRenderSettingsById.
type PutInvoicesRenderSettingsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutInvoicesRenderSettingsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutInvoicesRenderSettingsByIdParamsSequenceVersion defines parameters for PutInvoicesRenderSettingsById.
type PutInvoicesRenderSettingsByIdParamsSequenceVersion string

// DeleteInvoicesByIdParams defines parameters for DeleteInvoicesById.
type DeleteInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteInvoicesByIdParamsSequenceVersion defines parameters for DeleteInvoicesById.
type DeleteInvoicesByIdParamsSequenceVersion string

// GetInvoicesByIdParams defines parameters for GetInvoicesById.
type GetInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesByIdParamsSequenceVersion defines parameters for GetInvoicesById.
type GetInvoicesByIdParamsSequenceVersion string

// PatchInvoicesByIdParams defines parameters for PatchInvoicesById.
type PatchInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PatchInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PatchInvoicesByIdParamsSequenceVersion defines parameters for PatchInvoicesById.
type PatchInvoicesByIdParamsSequenceVersion string

// PutInvoicesByIdParams defines parameters for PutInvoicesById.
type PutInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutInvoicesByIdParamsSequenceVersion defines parameters for PutInvoicesById.
type PutInvoicesByIdParamsSequenceVersion string

// GetInvoicesByIdDownloadParams defines parameters for GetInvoicesByIdDownload.
type GetInvoicesByIdDownloadParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesByIdDownloadParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesByIdDownloadParamsSequenceVersion defines parameters for GetInvoicesByIdDownload.
type GetInvoicesByIdDownloadParamsSequenceVersion string

// PostInvoicesByIdDraftParams defines parameters for PostInvoicesByIdDraft.
type PostInvoicesByIdDraftParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdDraftParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdDraftParamsSequenceVersion defines parameters for PostInvoicesByIdDraft.
type PostInvoicesByIdDraftParamsSequenceVersion string

// PostInvoicesByIdFinalizeParams defines parameters for PostInvoicesByIdFinalize.
type PostInvoicesByIdFinalizeParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdFinalizeParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdFinalizeParamsSequenceVersion defines parameters for PostInvoicesByIdFinalize.
type PostInvoicesByIdFinalizeParamsSequenceVersion string

// PostInvoicesByIdFinalizeAndSendParams defines parameters for PostInvoicesByIdFinalizeAndSend.
type PostInvoicesByIdFinalizeAndSendParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdFinalizeAndSendParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdFinalizeAndSendParamsSequenceVersion defines parameters for PostInvoicesByIdFinalizeAndSend.
type PostInvoicesByIdFinalizeAndSendParamsSequenceVersion string

// PutInvoicesByIdPaymentStatusParams defines parameters for PutInvoicesByIdPaymentStatus.
type PutInvoicesByIdPaymentStatusParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutInvoicesByIdPaymentStatusParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutInvoicesByIdPaymentStatusParamsSequenceVersion defines parameters for PutInvoicesByIdPaymentStatus.
type PutInvoicesByIdPaymentStatusParamsSequenceVersion string

// PostInvoicesByIdSendParams defines parameters for PostInvoicesByIdSend.
type PostInvoicesByIdSendParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdSendParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdSendParamsSequenceVersion defines parameters for PostInvoicesByIdSend.
type PostInvoicesByIdSendParamsSequenceVersion string

// PostInvoicesByIdSendPaymentReminderParams defines parameters for PostInvoicesByIdSendPaymentReminder.
type PostInvoicesByIdSendPaymentReminderParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdSendPaymentReminderParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdSendPaymentReminderParamsSequenceVersion defines parameters for PostInvoicesByIdSendPaymentReminder.
type PostInvoicesByIdSendPaymentReminderParamsSequenceVersion string

// PostInvoicesByIdVoidParams defines parameters for PostInvoicesByIdVoid.
type PostInvoicesByIdVoidParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByIdVoidParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByIdVoidParamsSequenceVersion defines parameters for PostInvoicesByIdVoid.
type PostInvoicesByIdVoidParamsSequenceVersion string

// GetInvoicesByInvoiceLineItemGroupsParams defines parameters for GetInvoicesByInvoiceLineItemGroups.
type GetInvoicesByInvoiceLineItemGroupsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersion defines parameters for GetInvoicesByInvoiceLineItemGroups.
type GetInvoicesByInvoiceLineItemGroupsParamsSequenceVersion string

// PostInvoicesByInvoiceLineItemGroupsParams defines parameters for PostInvoicesByInvoiceLineItemGroups.
type PostInvoicesByInvoiceLineItemGroupsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersion defines parameters for PostInvoicesByInvoiceLineItemGroups.
type PostInvoicesByInvoiceLineItemGroupsParamsSequenceVersion string

// DeleteInvoicesByInvoiceLineItemGroupsByIdParams defines parameters for DeleteInvoicesByInvoiceLineItemGroupsById.
type DeleteInvoicesByInvoiceLineItemGroupsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion defines parameters for DeleteInvoicesByInvoiceLineItemGroupsById.
type DeleteInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion string

// PutInvoicesByInvoiceLineItemGroupsByIdParams defines parameters for PutInvoicesByInvoiceLineItemGroupsById.
type PutInvoicesByInvoiceLineItemGroupsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion defines parameters for PutInvoicesByInvoiceLineItemGroupsById.
type PutInvoicesByInvoiceLineItemGroupsByIdParamsSequenceVersion string

// GetInvoicesByInvoiceLineItemsParams defines parameters for GetInvoicesByInvoiceLineItems.
type GetInvoicesByInvoiceLineItemsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetInvoicesByInvoiceLineItemsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetInvoicesByInvoiceLineItemsParamsSequenceVersion defines parameters for GetInvoicesByInvoiceLineItems.
type GetInvoicesByInvoiceLineItemsParamsSequenceVersion string

// PostInvoicesByInvoiceLineItemsParams defines parameters for PostInvoicesByInvoiceLineItems.
type PostInvoicesByInvoiceLineItemsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostInvoicesByInvoiceLineItemsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostInvoicesByInvoiceLineItemsParamsSequenceVersion defines parameters for PostInvoicesByInvoiceLineItems.
type PostInvoicesByInvoiceLineItemsParamsSequenceVersion string

// DeleteInvoicesByInvoiceLineItemsByIdParams defines parameters for DeleteInvoicesByInvoiceLineItemsById.
type DeleteInvoicesByInvoiceLineItemsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersion defines parameters for DeleteInvoicesByInvoiceLineItemsById.
type DeleteInvoicesByInvoiceLineItemsByIdParamsSequenceVersion string

// PutInvoicesByInvoiceLineItemsByIdParams defines parameters for PutInvoicesByInvoiceLineItemsById.
type PutInvoicesByInvoiceLineItemsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersion defines parameters for PutInvoicesByInvoiceLineItemsById.
type PutInvoicesByInvoiceLineItemsByIdParamsSequenceVersion string

// GetListPricesParams defines parameters for GetListPrices.
type GetListPricesParams struct {
	// Currency Filter by currency.
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// ProductId Filter list prices by a given product ID.
	ProductId *string `form:"productId,omitempty" json:"productId,omitempty"`

	// BillingFrequency Filter by billing frequency.
	BillingFrequency *string `form:"billingFrequency,omitempty" json:"billingFrequency,omitempty"`

	// IncludeArchived Include archived list prices in results
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetListPricesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetListPricesParamsSequenceVersion defines parameters for GetListPrices.
type GetListPricesParamsSequenceVersion string

// PostListPricesJSONBody defines parameters for PostListPrices.
type PostListPricesJSONBody struct {
	union json.RawMessage
}

// PostListPricesParams defines parameters for PostListPrices.
type PostListPricesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostListPricesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostListPricesParamsSequenceVersion defines parameters for PostListPrices.
type PostListPricesParamsSequenceVersion string

// GetListPricesByIdParams defines parameters for GetListPricesById.
type GetListPricesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetListPricesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetListPricesByIdParamsSequenceVersion defines parameters for GetListPricesById.
type GetListPricesByIdParamsSequenceVersion string

// PutListPricesByIdJSONBody defines parameters for PutListPricesById.
type PutListPricesByIdJSONBody struct {
	union json.RawMessage
}

// PutListPricesByIdParams defines parameters for PutListPricesById.
type PutListPricesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutListPricesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutListPricesByIdParamsSequenceVersion defines parameters for PutListPricesById.
type PutListPricesByIdParamsSequenceVersion string

// PostListPricesByIdArchiveParams defines parameters for PostListPricesByIdArchive.
type PostListPricesByIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostListPricesByIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostListPricesByIdArchiveParamsSequenceVersion defines parameters for PostListPricesByIdArchive.
type PostListPricesByIdArchiveParamsSequenceVersion string

// GetNotificationsPoliciesParams defines parameters for GetNotificationsPolicies.
type GetNotificationsPoliciesParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetNotificationsPoliciesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetNotificationsPoliciesParamsSequenceVersion defines parameters for GetNotificationsPolicies.
type GetNotificationsPoliciesParamsSequenceVersion string

// PostNotificationsPoliciesParams defines parameters for PostNotificationsPolicies.
type PostNotificationsPoliciesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostNotificationsPoliciesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostNotificationsPoliciesParamsSequenceVersion defines parameters for PostNotificationsPolicies.
type PostNotificationsPoliciesParamsSequenceVersion string

// DeleteNotificationsPoliciesByIdParams defines parameters for DeleteNotificationsPoliciesById.
type DeleteNotificationsPoliciesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteNotificationsPoliciesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteNotificationsPoliciesByIdParamsSequenceVersion defines parameters for DeleteNotificationsPoliciesById.
type DeleteNotificationsPoliciesByIdParamsSequenceVersion string

// GetNotificationsPoliciesByIdParams defines parameters for GetNotificationsPoliciesById.
type GetNotificationsPoliciesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetNotificationsPoliciesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetNotificationsPoliciesByIdParamsSequenceVersion defines parameters for GetNotificationsPoliciesById.
type GetNotificationsPoliciesByIdParamsSequenceVersion string

// PostNotificationsPoliciesByIdNotificationTypesParams defines parameters for PostNotificationsPoliciesByIdNotificationTypes.
type PostNotificationsPoliciesByIdNotificationTypesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersion defines parameters for PostNotificationsPoliciesByIdNotificationTypes.
type PostNotificationsPoliciesByIdNotificationTypesParamsSequenceVersion string

// DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams defines parameters for DeleteNotificationsPoliciesByIdNotificationTypesByType.
type DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersion defines parameters for DeleteNotificationsPoliciesByIdNotificationTypesByType.
type DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsSequenceVersion string

// DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType defines parameters for DeleteNotificationsPoliciesByIdNotificationTypesByType.
type DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType string

// PostNotificationsPoliciesByIdRecipientsParams defines parameters for PostNotificationsPoliciesByIdRecipients.
type PostNotificationsPoliciesByIdRecipientsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostNotificationsPoliciesByIdRecipientsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostNotificationsPoliciesByIdRecipientsParamsSequenceVersion defines parameters for PostNotificationsPoliciesByIdRecipients.
type PostNotificationsPoliciesByIdRecipientsParamsSequenceVersion string

// DeleteNotificationsPoliciesByIdRecipientsByRecipientParams defines parameters for DeleteNotificationsPoliciesByIdRecipientsByRecipient.
type DeleteNotificationsPoliciesByIdRecipientsByRecipientParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersion defines parameters for DeleteNotificationsPoliciesByIdRecipientsByRecipient.
type DeleteNotificationsPoliciesByIdRecipientsByRecipientParamsSequenceVersion string

// GetPaymentsSettingsParams defines parameters for GetPaymentsSettings.
type GetPaymentsSettingsParams struct {
	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsParamsSequenceVersion defines parameters for GetPaymentsSettings.
type GetPaymentsSettingsParamsSequenceVersion string

// PostPaymentsSettingsBillingSchedulesParams defines parameters for PostPaymentsSettingsBillingSchedules.
type PostPaymentsSettingsBillingSchedulesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostPaymentsSettingsBillingSchedulesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostPaymentsSettingsBillingSchedulesParamsSequenceVersion defines parameters for PostPaymentsSettingsBillingSchedules.
type PostPaymentsSettingsBillingSchedulesParamsSequenceVersion string

// GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams defines parameters for GetPaymentsSettingsBillingSchedulesForBillingScheduleById.
type GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersion defines parameters for GetPaymentsSettingsBillingSchedulesForBillingScheduleById.
type GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParamsSequenceVersion string

// DeletePaymentsSettingsBillingSchedulesByIdParams defines parameters for DeletePaymentsSettingsBillingSchedulesById.
type DeletePaymentsSettingsBillingSchedulesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersion defines parameters for DeletePaymentsSettingsBillingSchedulesById.
type DeletePaymentsSettingsBillingSchedulesByIdParamsSequenceVersion string

// GetPaymentsSettingsBillingSchedulesByIdParams defines parameters for GetPaymentsSettingsBillingSchedulesById.
type GetPaymentsSettingsBillingSchedulesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion defines parameters for GetPaymentsSettingsBillingSchedulesById.
type GetPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion string

// PutPaymentsSettingsBillingSchedulesByIdParams defines parameters for PutPaymentsSettingsBillingSchedulesById.
type PutPaymentsSettingsBillingSchedulesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion defines parameters for PutPaymentsSettingsBillingSchedulesById.
type PutPaymentsSettingsBillingSchedulesByIdParamsSequenceVersion string

// PostPaymentsSettingsCustomersParams defines parameters for PostPaymentsSettingsCustomers.
type PostPaymentsSettingsCustomersParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostPaymentsSettingsCustomersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostPaymentsSettingsCustomersParamsSequenceVersion defines parameters for PostPaymentsSettingsCustomers.
type PostPaymentsSettingsCustomersParamsSequenceVersion string

// DeletePaymentsSettingsCustomersByIdParams defines parameters for DeletePaymentsSettingsCustomersById.
type DeletePaymentsSettingsCustomersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeletePaymentsSettingsCustomersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeletePaymentsSettingsCustomersByIdParamsSequenceVersion defines parameters for DeletePaymentsSettingsCustomersById.
type DeletePaymentsSettingsCustomersByIdParamsSequenceVersion string

// GetPaymentsSettingsCustomersByIdParams defines parameters for GetPaymentsSettingsCustomersById.
type GetPaymentsSettingsCustomersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsCustomersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsCustomersByIdParamsSequenceVersion defines parameters for GetPaymentsSettingsCustomersById.
type GetPaymentsSettingsCustomersByIdParamsSequenceVersion string

// PutPaymentsSettingsCustomersByIdParams defines parameters for PutPaymentsSettingsCustomersById.
type PutPaymentsSettingsCustomersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutPaymentsSettingsCustomersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutPaymentsSettingsCustomersByIdParamsSequenceVersion defines parameters for PutPaymentsSettingsCustomersById.
type PutPaymentsSettingsCustomersByIdParamsSequenceVersion string

// PostPaymentsSettingsInvoicesParams defines parameters for PostPaymentsSettingsInvoices.
type PostPaymentsSettingsInvoicesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostPaymentsSettingsInvoicesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostPaymentsSettingsInvoicesParamsSequenceVersion defines parameters for PostPaymentsSettingsInvoices.
type PostPaymentsSettingsInvoicesParamsSequenceVersion string

// GetPaymentsSettingsInvoicesForInvoiceByIdParams defines parameters for GetPaymentsSettingsInvoicesForInvoiceById.
type GetPaymentsSettingsInvoicesForInvoiceByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersion defines parameters for GetPaymentsSettingsInvoicesForInvoiceById.
type GetPaymentsSettingsInvoicesForInvoiceByIdParamsSequenceVersion string

// DeletePaymentsSettingsInvoicesByIdParams defines parameters for DeletePaymentsSettingsInvoicesById.
type DeletePaymentsSettingsInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeletePaymentsSettingsInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeletePaymentsSettingsInvoicesByIdParamsSequenceVersion defines parameters for DeletePaymentsSettingsInvoicesById.
type DeletePaymentsSettingsInvoicesByIdParamsSequenceVersion string

// GetPaymentsSettingsInvoicesByIdParams defines parameters for GetPaymentsSettingsInvoicesById.
type GetPaymentsSettingsInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPaymentsSettingsInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPaymentsSettingsInvoicesByIdParamsSequenceVersion defines parameters for GetPaymentsSettingsInvoicesById.
type GetPaymentsSettingsInvoicesByIdParamsSequenceVersion string

// PutPaymentsSettingsInvoicesByIdParams defines parameters for PutPaymentsSettingsInvoicesById.
type PutPaymentsSettingsInvoicesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutPaymentsSettingsInvoicesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutPaymentsSettingsInvoicesByIdParamsSequenceVersion defines parameters for PutPaymentsSettingsInvoicesById.
type PutPaymentsSettingsInvoicesByIdParamsSequenceVersion string

// PutPaymentsSettingsByIdParams defines parameters for PutPaymentsSettingsById.
type PutPaymentsSettingsByIdParams struct {
	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutPaymentsSettingsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutPaymentsSettingsByIdParamsSequenceVersion defines parameters for PutPaymentsSettingsById.
type PutPaymentsSettingsByIdParamsSequenceVersion string

// GetPricesParams defines parameters for GetPrices.
type GetPricesParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Currency Filter by currency.
	Currency *string `form:"currency,omitempty" json:"currency,omitempty"`

	// Name Filter by name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// BillingFrequency Filter by billing frequency.
	BillingFrequency *string `form:"billingFrequency,omitempty" json:"billingFrequency,omitempty"`

	// ProductId Filter by product ID.
	ProductId *string `form:"productId,omitempty" json:"productId,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPricesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPricesParamsSequenceVersion defines parameters for GetPrices.
type GetPricesParamsSequenceVersion string

// PostPricesJSONBody defines parameters for PostPrices.
type PostPricesJSONBody struct {
	union json.RawMessage
}

// PostPricesParams defines parameters for PostPrices.
type PostPricesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostPricesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostPricesParamsSequenceVersion defines parameters for PostPrices.
type PostPricesParamsSequenceVersion string

// DeletePricesByIdParams defines parameters for DeletePricesById.
type DeletePricesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeletePricesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeletePricesByIdParamsSequenceVersion defines parameters for DeletePricesById.
type DeletePricesByIdParamsSequenceVersion string

// GetPricesByIdParams defines parameters for GetPricesById.
type GetPricesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetPricesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetPricesByIdParamsSequenceVersion defines parameters for GetPricesById.
type GetPricesByIdParamsSequenceVersion string

// PutPricesByIdParams defines parameters for PutPricesById.
type PutPricesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutPricesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutPricesByIdParamsSequenceVersion defines parameters for PutPricesById.
type PutPricesByIdParamsSequenceVersion string

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetProductsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetProductsParamsSequenceVersion defines parameters for GetProducts.
type GetProductsParamsSequenceVersion string

// PostProductsParams defines parameters for PostProducts.
type PostProductsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostProductsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostProductsParamsSequenceVersion defines parameters for PostProducts.
type PostProductsParamsSequenceVersion string

// GetProductsByIdParams defines parameters for GetProductsById.
type GetProductsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetProductsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetProductsByIdParamsSequenceVersion defines parameters for GetProductsById.
type GetProductsByIdParamsSequenceVersion string

// PutProductsByIdParams defines parameters for PutProductsById.
type PutProductsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutProductsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutProductsByIdParamsSequenceVersion defines parameters for PutProductsById.
type PutProductsByIdParamsSequenceVersion string

// PostProductsByIdArchiveParams defines parameters for PostProductsByIdArchive.
type PostProductsByIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostProductsByIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostProductsByIdArchiveParamsSequenceVersion defines parameters for PostProductsByIdArchive.
type PostProductsByIdArchiveParamsSequenceVersion string

// GetSeatBalancesParams defines parameters for GetSeatBalances.
type GetSeatBalancesParams struct {
	// ExcludeZeroQuantity Exclude customers with no seats usage. Defaults to false.
	ExcludeZeroQuantity *bool `form:"excludeZeroQuantity,omitempty" json:"excludeZeroQuantity,omitempty"`

	// CustomerAliases Filter seat balances by customer alias
	CustomerAliases *string `form:"customerAliases,omitempty" json:"customerAliases,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSeatBalancesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSeatBalancesParamsSequenceVersion defines parameters for GetSeatBalances.
type GetSeatBalancesParamsSequenceVersion string

// GetSeatEventsParams defines parameters for GetSeatEvents.
type GetSeatEventsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// CustomerAlias Filter event by customer alias
	CustomerAlias *string `form:"customerAlias,omitempty" json:"customerAlias,omitempty"`

	// SeatType Filter events by seat type
	SeatType *string `form:"seatType,omitempty" json:"seatType,omitempty"`

	// CustomerEventId Filter events by customer event ID
	CustomerEventId *string `form:"customerEventId,omitempty" json:"customerEventId,omitempty"`

	// EventTimestampBefore Filter events by timestamp before
	EventTimestampBefore *string `form:"eventTimestampBefore,omitempty" json:"eventTimestampBefore,omitempty"`

	// EventTimestampAfter Filter events by timestamp after
	EventTimestampAfter *string `form:"eventTimestampAfter,omitempty" json:"eventTimestampAfter,omitempty"`

	// SortBy Sort column. Default: creation time.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSeatEventsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSeatEventsParamsSequenceVersion defines parameters for GetSeatEvents.
type GetSeatEventsParamsSequenceVersion string

// PostSeatEventsParams defines parameters for PostSeatEvents.
type PostSeatEventsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostSeatEventsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostSeatEventsParamsSequenceVersion defines parameters for PostSeatEvents.
type PostSeatEventsParamsSequenceVersion string

// GetSeatEventsByIdParams defines parameters for GetSeatEventsById.
type GetSeatEventsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSeatEventsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSeatEventsByIdParamsSequenceVersion defines parameters for GetSeatEventsById.
type GetSeatEventsByIdParamsSequenceVersion string

// GetSeatMetricsParams defines parameters for GetSeatMetrics.
type GetSeatMetricsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSeatMetricsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSeatMetricsParamsSequenceVersion defines parameters for GetSeatMetrics.
type GetSeatMetricsParamsSequenceVersion string

// PostSeatMetricsParams defines parameters for PostSeatMetrics.
type PostSeatMetricsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostSeatMetricsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostSeatMetricsParamsSequenceVersion defines parameters for PostSeatMetrics.
type PostSeatMetricsParamsSequenceVersion string

// DeleteSeatMetricsByIdParams defines parameters for DeleteSeatMetricsById.
type DeleteSeatMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteSeatMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteSeatMetricsByIdParamsSequenceVersion defines parameters for DeleteSeatMetricsById.
type DeleteSeatMetricsByIdParamsSequenceVersion string

// GetSeatMetricsByIdParams defines parameters for GetSeatMetricsById.
type GetSeatMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSeatMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSeatMetricsByIdParamsSequenceVersion defines parameters for GetSeatMetricsById.
type GetSeatMetricsByIdParamsSequenceVersion string

// PutSeatMetricsByIdParams defines parameters for PutSeatMetricsById.
type PutSeatMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutSeatMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutSeatMetricsByIdParamsSequenceVersion defines parameters for PutSeatMetricsById.
type PutSeatMetricsByIdParamsSequenceVersion string

// GetSequenceAccountsParams defines parameters for GetSequenceAccounts.
type GetSequenceAccountsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSequenceAccountsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSequenceAccountsParamsSequenceVersion defines parameters for GetSequenceAccounts.
type GetSequenceAccountsParamsSequenceVersion string

// GetSequenceAccountsByIdParams defines parameters for GetSequenceAccountsById.
type GetSequenceAccountsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetSequenceAccountsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetSequenceAccountsByIdParamsSequenceVersion defines parameters for GetSequenceAccountsById.
type GetSequenceAccountsByIdParamsSequenceVersion string

// PutSequenceAccountsByIdParams defines parameters for PutSequenceAccountsById.
type PutSequenceAccountsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutSequenceAccountsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutSequenceAccountsByIdParamsSequenceVersion defines parameters for PutSequenceAccountsById.
type PutSequenceAccountsByIdParamsSequenceVersion string

// GetTaxRatesParams defines parameters for GetTaxRates.
type GetTaxRatesParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRatesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRatesParamsSequenceVersion defines parameters for GetTaxRates.
type GetTaxRatesParamsSequenceVersion string

// PostTaxRatesParams defines parameters for PostTaxRates.
type PostTaxRatesParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostTaxRatesParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostTaxRatesParamsSequenceVersion defines parameters for PostTaxRates.
type PostTaxRatesParamsSequenceVersion string

// DeleteTaxRatesByIdParams defines parameters for DeleteTaxRatesById.
type DeleteTaxRatesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteTaxRatesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteTaxRatesByIdParamsSequenceVersion defines parameters for DeleteTaxRatesById.
type DeleteTaxRatesByIdParamsSequenceVersion string

// GetTaxRatesByIdParams defines parameters for GetTaxRatesById.
type GetTaxRatesByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRatesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRatesByIdParamsSequenceVersion defines parameters for GetTaxRatesById.
type GetTaxRatesByIdParamsSequenceVersion string

// PutTaxRatesByIdParams defines parameters for PutTaxRatesById.
type PutTaxRatesByIdParams struct {
	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutTaxRatesByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutTaxRatesByIdParamsSequenceVersion defines parameters for PutTaxRatesById.
type PutTaxRatesByIdParamsSequenceVersion string

// PostTaxRatesByIdArchiveParams defines parameters for PostTaxRatesByIdArchive.
type PostTaxRatesByIdArchiveParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostTaxRatesByIdArchiveParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostTaxRatesByIdArchiveParamsSequenceVersion defines parameters for PostTaxRatesByIdArchive.
type PostTaxRatesByIdArchiveParamsSequenceVersion string

// GetTaxRegistrationsParams defines parameters for GetTaxRegistrations.
type GetTaxRegistrationsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRegistrationsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRegistrationsParamsSequenceVersion defines parameters for GetTaxRegistrations.
type GetTaxRegistrationsParamsSequenceVersion string

// PostTaxRegistrationsParams defines parameters for PostTaxRegistrations.
type PostTaxRegistrationsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostTaxRegistrationsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostTaxRegistrationsParamsSequenceVersion defines parameters for PostTaxRegistrations.
type PostTaxRegistrationsParamsSequenceVersion string

// GetTaxRegistrationsForCustomerByIdParams defines parameters for GetTaxRegistrationsForCustomerById.
type GetTaxRegistrationsForCustomerByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRegistrationsForCustomerByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRegistrationsForCustomerByIdParamsSequenceVersion defines parameters for GetTaxRegistrationsForCustomerById.
type GetTaxRegistrationsForCustomerByIdParamsSequenceVersion string

// GetTaxRegistrationsForMerchantByIdParams defines parameters for GetTaxRegistrationsForMerchantById.
type GetTaxRegistrationsForMerchantByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRegistrationsForMerchantByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRegistrationsForMerchantByIdParamsSequenceVersion defines parameters for GetTaxRegistrationsForMerchantById.
type GetTaxRegistrationsForMerchantByIdParamsSequenceVersion string

// DeleteTaxRegistrationsByIdParams defines parameters for DeleteTaxRegistrationsById.
type DeleteTaxRegistrationsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteTaxRegistrationsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteTaxRegistrationsByIdParamsSequenceVersion defines parameters for DeleteTaxRegistrationsById.
type DeleteTaxRegistrationsByIdParamsSequenceVersion string

// GetTaxRegistrationsByIdParams defines parameters for GetTaxRegistrationsById.
type GetTaxRegistrationsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetTaxRegistrationsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetTaxRegistrationsByIdParamsSequenceVersion defines parameters for GetTaxRegistrationsById.
type GetTaxRegistrationsByIdParamsSequenceVersion string

// PutTaxRegistrationsByIdParams defines parameters for PutTaxRegistrationsById.
type PutTaxRegistrationsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutTaxRegistrationsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutTaxRegistrationsByIdParamsSequenceVersion defines parameters for PutTaxRegistrationsById.
type PutTaxRegistrationsByIdParamsSequenceVersion string

// GetUsageEventsParams defines parameters for GetUsageEvents.
type GetUsageEventsParams struct {
	// Before Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// After Pagination cursor. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SortOrder Sort order. Default: DESC (descending, most often used for reverse chronological sorting).
	SortOrder *string `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// Offset Pagination offset. To retrieve a non-contiguous page, use this parameter to specify the offset to fetch relative to `pagination.after` or `pagination.before`.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// CustomerAlias Filter events by customer alias
	CustomerAlias *string `form:"customerAlias,omitempty" json:"customerAlias,omitempty"`

	// UnmappedAliasesOnly Include unmapped aliases only
	UnmappedAliasesOnly *bool `form:"unmappedAliasesOnly,omitempty" json:"unmappedAliasesOnly,omitempty"`

	// EventType Filter events by type
	EventType *string `form:"eventType,omitempty" json:"eventType,omitempty"`

	// EventId Filter events by event id
	EventId *string `form:"eventId,omitempty" json:"eventId,omitempty"`

	// EventTimestampBefore Filter events by timestamp before
	EventTimestampBefore *string `form:"eventTimestampBefore,omitempty" json:"eventTimestampBefore,omitempty"`

	// EventTimestampAfter Filter events by timestamp after
	EventTimestampAfter *string `form:"eventTimestampAfter,omitempty" json:"eventTimestampAfter,omitempty"`

	// SortBy Sort column. Default: creation time.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsageEventsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsageEventsParamsSequenceVersion defines parameters for GetUsageEvents.
type GetUsageEventsParamsSequenceVersion string

// PostUsageEventsParams defines parameters for PostUsageEvents.
type PostUsageEventsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostUsageEventsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostUsageEventsParamsSequenceVersion defines parameters for PostUsageEvents.
type PostUsageEventsParamsSequenceVersion string

// GetUsageMetricsParams defines parameters for GetUsageMetrics.
type GetUsageMetricsParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsageMetricsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsageMetricsParamsSequenceVersion defines parameters for GetUsageMetrics.
type GetUsageMetricsParamsSequenceVersion string

// PostUsageMetricsParams defines parameters for PostUsageMetrics.
type PostUsageMetricsParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PostUsageMetricsParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PostUsageMetricsParamsSequenceVersion defines parameters for PostUsageMetrics.
type PostUsageMetricsParamsSequenceVersion string

// DeleteUsageMetricsByIdParams defines parameters for DeleteUsageMetricsById.
type DeleteUsageMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteUsageMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteUsageMetricsByIdParamsSequenceVersion defines parameters for DeleteUsageMetricsById.
type DeleteUsageMetricsByIdParamsSequenceVersion string

// GetUsageMetricsByIdParams defines parameters for GetUsageMetricsById.
type GetUsageMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsageMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsageMetricsByIdParamsSequenceVersion defines parameters for GetUsageMetricsById.
type GetUsageMetricsByIdParamsSequenceVersion string

// PutUsageMetricsByIdParams defines parameters for PutUsageMetricsById.
type PutUsageMetricsByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutUsageMetricsByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutUsageMetricsByIdParamsSequenceVersion defines parameters for PutUsageMetricsById.
type PutUsageMetricsByIdParamsSequenceVersion string

// GetUsageMetricsByUsageMetricIdCalculateParams defines parameters for GetUsageMetricsByUsageMetricIdCalculate.
type GetUsageMetricsByUsageMetricIdCalculateParams struct {
	// CustomerAliases Customer Aliases / internal IDs
	CustomerAliases string `form:"customerAliases" json:"customerAliases"`

	// PeriodStart Billing period start
	PeriodStart string `form:"periodStart" json:"periodStart"`

	// PeriodEnd Billing period end (inclusive)
	PeriodEnd string `form:"periodEnd" json:"periodEnd"`

	// CustomParameters Custom parameter values
	CustomParameters *string `form:"customParameters,omitempty" json:"customParameters,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersion defines parameters for GetUsageMetricsByUsageMetricIdCalculate.
type GetUsageMetricsByUsageMetricIdCalculateParamsSequenceVersion string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Limit Maximum number of objects to return per-page. Must be between 1 and 100 (inclusive).
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// After Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.after` or `pagination.before` to retrieve each page.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before Pagination offset. To page through items, omit this parameter to retrieve the first page, and then successively use the value you get from `pagination.next` or `pagination.previous` to retrieve each page.
	Before *string `form:"before,omitempty" json:"before,omitempty"`

	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsersParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsersParamsSequenceVersion defines parameters for GetUsers.
type GetUsersParamsSequenceVersion string

// DeleteUsersByIdParams defines parameters for DeleteUsersById.
type DeleteUsersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *DeleteUsersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// DeleteUsersByIdParamsSequenceVersion defines parameters for DeleteUsersById.
type DeleteUsersByIdParamsSequenceVersion string

// GetUsersByIdParams defines parameters for GetUsersById.
type GetUsersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *GetUsersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// GetUsersByIdParamsSequenceVersion defines parameters for GetUsersById.
type GetUsersByIdParamsSequenceVersion string

// PutUsersByIdParams defines parameters for PutUsersById.
type PutUsersByIdParams struct {
	// Authorization Your [API credentials](/reference/authentication). Eg. `Basic {credentials}`.
	Authorization string `json:"Authorization"`

	// SequenceVersion Use this header to select an API version
	SequenceVersion *PutUsersByIdParamsSequenceVersion `json:"Sequence-Version,omitempty"`
}

// PutUsersByIdParamsSequenceVersion defines parameters for PutUsersById.
type PutUsersByIdParamsSequenceVersion string

// PostBillingSchedulesJSONRequestBody defines body for PostBillingSchedules for application/json ContentType.
type PostBillingSchedulesJSONRequestBody = CreateBillingScheduleRequest

// PostBillingSchedulesValidateTaxesJSONRequestBody defines body for PostBillingSchedulesValidateTaxes for application/json ContentType.
type PostBillingSchedulesValidateTaxesJSONRequestBody = CreateBillingScheduleRequest

// PutBillingSchedulesByBillingScheduleIdJSONRequestBody defines body for PutBillingSchedulesByBillingScheduleId for application/json ContentType.
type PutBillingSchedulesByBillingScheduleIdJSONRequestBody = UpdateBillingScheduleRequest

// PostCreditNotesJSONRequestBody defines body for PostCreditNotes for application/json ContentType.
type PostCreditNotesJSONRequestBody = CreateCreditNoteEndpointCreateCreditNoteRequestModel

// PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody defines body for PostCreditNotesByCreditnoteLineItemGroups for application/json ContentType.
type PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody = CreateCreditNoteLineItemGroupEndpointCreateCreditNoteLineItemGroupRequestModel

// PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody defines body for PutCreditNotesByCreditnoteLineItemGroupsById for application/json ContentType.
type PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody = UpdateCreditNoteLineItemGroupEndpointUpdateCreditNoteLineItemGroupRequestModel

// PostCreditNotesByCreditnoteLineItemsJSONRequestBody defines body for PostCreditNotesByCreditnoteLineItems for application/json ContentType.
type PostCreditNotesByCreditnoteLineItemsJSONRequestBody = CreateCreditNoteLineItemEndpointCreateCreditNoteLineItemRequestModel

// PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody defines body for PutCreditNotesByCreditnoteLineItemsById for application/json ContentType.
type PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody = UpdateCreditNoteLineItemEndpointUpdateCreditNoteLineItemRequestModel

// PutCreditNotesByIdJSONRequestBody defines body for PutCreditNotesById for application/json ContentType.
type PutCreditNotesByIdJSONRequestBody = UpdateCreditNoteEndpointUpdateCreditNoteRequestModel

// PostCreditsJSONRequestBody defines body for PostCredits for application/json ContentType.
type PostCreditsJSONRequestBody = CreateCreditGrantEndpointCreateCreditGrantRequestModel

// PostCustomerAliasesJSONRequestBody defines body for PostCustomerAliases for application/json ContentType.
type PostCustomerAliasesJSONRequestBody = CreateCustomerAliasEndpointCreateCustomerAliasRequestModel

// PutCustomerAliasesByIdJSONRequestBody defines body for PutCustomerAliasesById for application/json ContentType.
type PutCustomerAliasesByIdJSONRequestBody = UpdateCustomerAliasEndpointUpdateCustomerAliasRequestModel

// PostCustomerOrganizationsJSONRequestBody defines body for PostCustomerOrganizations for application/json ContentType.
type PostCustomerOrganizationsJSONRequestBody = CustomerOrganizationRequest

// PostCustomerOrganizationsByIdMembersJSONRequestBody defines body for PostCustomerOrganizationsByIdMembers for application/json ContentType.
type PostCustomerOrganizationsByIdMembersJSONRequestBody = CustomerOrganizationMembers

// PutCustomerOrganizationsByIdMembersJSONRequestBody defines body for PutCustomerOrganizationsByIdMembers for application/json ContentType.
type PutCustomerOrganizationsByIdMembersJSONRequestBody = CustomerOrganizationMembers

// PostCustomersJSONRequestBody defines body for PostCustomers for application/json ContentType.
type PostCustomersJSONRequestBody = CreateOrUpdateCustomerRequest

// PostCustomersByCustomerContactsJSONRequestBody defines body for PostCustomersByCustomerContacts for application/json ContentType.
type PostCustomersByCustomerContactsJSONRequestBody = ContactRequestModel

// PutCustomersByCustomerContactsByIdJSONRequestBody defines body for PutCustomersByCustomerContactsById for application/json ContentType.
type PutCustomersByCustomerContactsByIdJSONRequestBody = ContactRequestModel

// PutCustomersByIdJSONRequestBody defines body for PutCustomersById for application/json ContentType.
type PutCustomersByIdJSONRequestBody = CreateOrUpdateCustomerRequest

// PutDiscountsByIdJSONRequestBody defines body for PutDiscountsById for application/json ContentType.
type PutDiscountsByIdJSONRequestBody = UpdateDiscountEndpointUpdateDiscountRequestModel

// PostInvoicesJSONRequestBody defines body for PostInvoices for application/json ContentType.
type PostInvoicesJSONRequestBody = Stable20240101CreateInvoiceRequest

// PutInvoicesRenderSettingsByIdJSONRequestBody defines body for PutInvoicesRenderSettingsById for application/json ContentType.
type PutInvoicesRenderSettingsByIdJSONRequestBody = UpdateInvoiceRenderSettingsEndpointUpdateInvoiceRenderSettingsRequestModel

// PatchInvoicesByIdJSONRequestBody defines body for PatchInvoicesById for application/json ContentType.
type PatchInvoicesByIdJSONRequestBody = Stable20240101PatchInvoiceRequest

// PutInvoicesByIdJSONRequestBody defines body for PutInvoicesById for application/json ContentType.
type PutInvoicesByIdJSONRequestBody = Stable20240101UpdateInvoiceRequest

// PutInvoicesByIdPaymentStatusJSONRequestBody defines body for PutInvoicesByIdPaymentStatus for application/json ContentType.
type PutInvoicesByIdPaymentStatusJSONRequestBody = UpdateInvoicePaymentStatusEndpointRequestModel

// PostInvoicesByInvoiceLineItemGroupsJSONRequestBody defines body for PostInvoicesByInvoiceLineItemGroups for application/json ContentType.
type PostInvoicesByInvoiceLineItemGroupsJSONRequestBody = CreateLineItemGroupRequestModel

// PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody defines body for PutInvoicesByInvoiceLineItemGroupsById for application/json ContentType.
type PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody = UpdateLineItemGroupRequestModel

// PostInvoicesByInvoiceLineItemsJSONRequestBody defines body for PostInvoicesByInvoiceLineItems for application/json ContentType.
type PostInvoicesByInvoiceLineItemsJSONRequestBody = Stable20240101CreateOrUpdateLineItem

// PutInvoicesByInvoiceLineItemsByIdJSONRequestBody defines body for PutInvoicesByInvoiceLineItemsById for application/json ContentType.
type PutInvoicesByInvoiceLineItemsByIdJSONRequestBody = Stable20240101CreateOrUpdateLineItem

// PostListPricesJSONRequestBody defines body for PostListPrices for application/json ContentType.
type PostListPricesJSONRequestBody PostListPricesJSONBody

// PutListPricesByIdJSONRequestBody defines body for PutListPricesById for application/json ContentType.
type PutListPricesByIdJSONRequestBody PutListPricesByIdJSONBody

// PostNotificationsPoliciesJSONRequestBody defines body for PostNotificationsPolicies for application/json ContentType.
type PostNotificationsPoliciesJSONRequestBody = CreateNotificationPolicyRequest

// PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody defines body for PostNotificationsPoliciesByIdNotificationTypes for application/json ContentType.
type PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody = AddNotificationTypesToPolicyRequest

// PostNotificationsPoliciesByIdRecipientsJSONRequestBody defines body for PostNotificationsPoliciesByIdRecipients for application/json ContentType.
type PostNotificationsPoliciesByIdRecipientsJSONRequestBody = AddRecipientsToPolicyRequest

// PostPaymentsSettingsBillingSchedulesJSONRequestBody defines body for PostPaymentsSettingsBillingSchedules for application/json ContentType.
type PostPaymentsSettingsBillingSchedulesJSONRequestBody = CreateBillingScheduleSettingsEndpointCreateBillingScheduleSettingsRequestModel

// PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody defines body for PutPaymentsSettingsBillingSchedulesById for application/json ContentType.
type PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody = UpdateBillingScheduleSettingsEndpointUpdateBillingScheduleSettingsRequestModel

// PostPaymentsSettingsCustomersJSONRequestBody defines body for PostPaymentsSettingsCustomers for application/json ContentType.
type PostPaymentsSettingsCustomersJSONRequestBody = CreateCustomerSettingsEndpointCreateCustomerSettingsRequestModel

// PutPaymentsSettingsCustomersByIdJSONRequestBody defines body for PutPaymentsSettingsCustomersById for application/json ContentType.
type PutPaymentsSettingsCustomersByIdJSONRequestBody = UpdateCustomerSettingsEndpointUpdateCustomerSettingsRequestModel

// PostPaymentsSettingsInvoicesJSONRequestBody defines body for PostPaymentsSettingsInvoices for application/json ContentType.
type PostPaymentsSettingsInvoicesJSONRequestBody = CreateInvoiceSettingsEndpointCreateInvoiceSettingsRequestModel

// PutPaymentsSettingsInvoicesByIdJSONRequestBody defines body for PutPaymentsSettingsInvoicesById for application/json ContentType.
type PutPaymentsSettingsInvoicesByIdJSONRequestBody = UpdateInvoiceSettingsEndpointUpdateInvoiceSettingsRequestModel

// PutPaymentsSettingsByIdJSONRequestBody defines body for PutPaymentsSettingsById for application/json ContentType.
type PutPaymentsSettingsByIdJSONRequestBody = UpdateAccountPaymentSettingsEndpointUpdateAccountPaymentSettingsRequest

// PostPricesJSONRequestBody defines body for PostPrices for application/json ContentType.
type PostPricesJSONRequestBody PostPricesJSONBody

// PutPricesByIdJSONRequestBody defines body for PutPricesById for application/json ContentType.
type PutPricesByIdJSONRequestBody = UpdatePriceEndpointUpdatePriceRequestModel

// PostProductsJSONRequestBody defines body for PostProducts for application/json ContentType.
type PostProductsJSONRequestBody = Stable20240509ProductRequest

// PutProductsByIdJSONRequestBody defines body for PutProductsById for application/json ContentType.
type PutProductsByIdJSONRequestBody = Stable20240509ProductRequest

// PostSeatEventsJSONRequestBody defines body for PostSeatEvents for application/json ContentType.
type PostSeatEventsJSONRequestBody = CreateSeatEventEndpointCreateSeatEventRequestModel

// PostSeatMetricsJSONRequestBody defines body for PostSeatMetrics for application/json ContentType.
type PostSeatMetricsJSONRequestBody = CreateSeatMetricRequest

// PutSeatMetricsByIdJSONRequestBody defines body for PutSeatMetricsById for application/json ContentType.
type PutSeatMetricsByIdJSONRequestBody = UpdateSeatMetricRequest

// PutSequenceAccountsByIdJSONRequestBody defines body for PutSequenceAccountsById for application/json ContentType.
type PutSequenceAccountsByIdJSONRequestBody = UpdateSequenceAccountProductEndpointUpdateSequenceAccountRequest

// PostTaxRatesJSONRequestBody defines body for PostTaxRates for application/json ContentType.
type PostTaxRatesJSONRequestBody = CreateTaxRateRequest

// PutTaxRatesByIdJSONRequestBody defines body for PutTaxRatesById for application/json ContentType.
type PutTaxRatesByIdJSONRequestBody = UpdateTaxRateRequest

// PostTaxRegistrationsJSONRequestBody defines body for PostTaxRegistrations for application/json ContentType.
type PostTaxRegistrationsJSONRequestBody = CreateTaxRegistrationEndpointCreateTaxRegistrationRequestModel

// PutTaxRegistrationsByIdJSONRequestBody defines body for PutTaxRegistrationsById for application/json ContentType.
type PutTaxRegistrationsByIdJSONRequestBody = UpdateTaxRegistrationEndpointUpdateTaxRegistrationRequestModel

// PostUsageEventsJSONRequestBody defines body for PostUsageEvents for application/json ContentType.
type PostUsageEventsJSONRequestBody = CreateUsageEventEndpointCreateUsageEventRequestModel

// PostUsageMetricsJSONRequestBody defines body for PostUsageMetrics for application/json ContentType.
type PostUsageMetricsJSONRequestBody = CreateUsageMetricEndpointCreateUsageMetricRequestModel

// PutUsageMetricsByIdJSONRequestBody defines body for PutUsageMetricsById for application/json ContentType.
type PutUsageMetricsByIdJSONRequestBody = UpdateUsageMetricEndpointUpdateUsageMetricRequestModel

// PutUsersByIdJSONRequestBody defines body for PutUsersById for application/json ContentType.
type PutUsersByIdJSONRequestBody = UpdateSequenceUserRequest

// AsGraduatedPricingStructure returns the union data inside the ListPrice_Structure as a GraduatedPricingStructure
func (t ListPrice_Structure) AsGraduatedPricingStructure() (GraduatedPricingStructure, error) {
	var body GraduatedPricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGraduatedPricingStructure overwrites any union data inside the ListPrice_Structure as the provided GraduatedPricingStructure
func (t *ListPrice_Structure) FromGraduatedPricingStructure(v GraduatedPricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGraduatedPricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided GraduatedPricingStructure
func (t *ListPrice_Structure) MergeGraduatedPricingStructure(v GraduatedPricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumePricingStructure returns the union data inside the ListPrice_Structure as a VolumePricingStructure
func (t ListPrice_Structure) AsVolumePricingStructure() (VolumePricingStructure, error) {
	var body VolumePricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumePricingStructure overwrites any union data inside the ListPrice_Structure as the provided VolumePricingStructure
func (t *ListPrice_Structure) FromVolumePricingStructure(v VolumePricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumePricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided VolumePricingStructure
func (t *ListPrice_Structure) MergeVolumePricingStructure(v VolumePricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSeatBasedPricingStructure returns the union data inside the ListPrice_Structure as a SeatBasedPricingStructure
func (t ListPrice_Structure) AsSeatBasedPricingStructure() (SeatBasedPricingStructure, error) {
	var body SeatBasedPricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSeatBasedPricingStructure overwrites any union data inside the ListPrice_Structure as the provided SeatBasedPricingStructure
func (t *ListPrice_Structure) FromSeatBasedPricingStructure(v SeatBasedPricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSeatBasedPricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided SeatBasedPricingStructure
func (t *ListPrice_Structure) MergeSeatBasedPricingStructure(v SeatBasedPricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackagePricingStructure returns the union data inside the ListPrice_Structure as a PackagePricingStructure
func (t ListPrice_Structure) AsPackagePricingStructure() (PackagePricingStructure, error) {
	var body PackagePricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackagePricingStructure overwrites any union data inside the ListPrice_Structure as the provided PackagePricingStructure
func (t *ListPrice_Structure) FromPackagePricingStructure(v PackagePricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackagePricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided PackagePricingStructure
func (t *ListPrice_Structure) MergePackagePricingStructure(v PackagePricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinearPricingStructure returns the union data inside the ListPrice_Structure as a LinearPricingStructure
func (t ListPrice_Structure) AsLinearPricingStructure() (LinearPricingStructure, error) {
	var body LinearPricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinearPricingStructure overwrites any union data inside the ListPrice_Structure as the provided LinearPricingStructure
func (t *ListPrice_Structure) FromLinearPricingStructure(v LinearPricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinearPricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided LinearPricingStructure
func (t *ListPrice_Structure) MergeLinearPricingStructure(v LinearPricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFixedPricingStructure returns the union data inside the ListPrice_Structure as a FixedPricingStructure
func (t ListPrice_Structure) AsFixedPricingStructure() (FixedPricingStructure, error) {
	var body FixedPricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFixedPricingStructure overwrites any union data inside the ListPrice_Structure as the provided FixedPricingStructure
func (t *ListPrice_Structure) FromFixedPricingStructure(v FixedPricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFixedPricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided FixedPricingStructure
func (t *ListPrice_Structure) MergeFixedPricingStructure(v FixedPricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOneTimePricingStructure returns the union data inside the ListPrice_Structure as a OneTimePricingStructure
func (t ListPrice_Structure) AsOneTimePricingStructure() (OneTimePricingStructure, error) {
	var body OneTimePricingStructure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOneTimePricingStructure overwrites any union data inside the ListPrice_Structure as the provided OneTimePricingStructure
func (t *ListPrice_Structure) FromOneTimePricingStructure(v OneTimePricingStructure) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOneTimePricingStructure performs a merge with any union data inside the ListPrice_Structure, using the provided OneTimePricingStructure
func (t *ListPrice_Structure) MergeOneTimePricingStructure(v OneTimePricingStructure) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListPrice_Structure) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListPrice_Structure) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGraduatedPricingStructure1 returns the union data inside the PriceResponse_Structure as a GraduatedPricingStructure1
func (t PriceResponse_Structure) AsGraduatedPricingStructure1() (GraduatedPricingStructure1, error) {
	var body GraduatedPricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGraduatedPricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided GraduatedPricingStructure1
func (t *PriceResponse_Structure) FromGraduatedPricingStructure1(v GraduatedPricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGraduatedPricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided GraduatedPricingStructure1
func (t *PriceResponse_Structure) MergeGraduatedPricingStructure1(v GraduatedPricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVolumePricingStructure1 returns the union data inside the PriceResponse_Structure as a VolumePricingStructure1
func (t PriceResponse_Structure) AsVolumePricingStructure1() (VolumePricingStructure1, error) {
	var body VolumePricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVolumePricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided VolumePricingStructure1
func (t *PriceResponse_Structure) FromVolumePricingStructure1(v VolumePricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVolumePricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided VolumePricingStructure1
func (t *PriceResponse_Structure) MergeVolumePricingStructure1(v VolumePricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSeatBasedPricingStructure1 returns the union data inside the PriceResponse_Structure as a SeatBasedPricingStructure1
func (t PriceResponse_Structure) AsSeatBasedPricingStructure1() (SeatBasedPricingStructure1, error) {
	var body SeatBasedPricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSeatBasedPricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided SeatBasedPricingStructure1
func (t *PriceResponse_Structure) FromSeatBasedPricingStructure1(v SeatBasedPricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSeatBasedPricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided SeatBasedPricingStructure1
func (t *PriceResponse_Structure) MergeSeatBasedPricingStructure1(v SeatBasedPricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackagePricingStructure1 returns the union data inside the PriceResponse_Structure as a PackagePricingStructure1
func (t PriceResponse_Structure) AsPackagePricingStructure1() (PackagePricingStructure1, error) {
	var body PackagePricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackagePricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided PackagePricingStructure1
func (t *PriceResponse_Structure) FromPackagePricingStructure1(v PackagePricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackagePricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided PackagePricingStructure1
func (t *PriceResponse_Structure) MergePackagePricingStructure1(v PackagePricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinearPricingStructure1 returns the union data inside the PriceResponse_Structure as a LinearPricingStructure1
func (t PriceResponse_Structure) AsLinearPricingStructure1() (LinearPricingStructure1, error) {
	var body LinearPricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinearPricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided LinearPricingStructure1
func (t *PriceResponse_Structure) FromLinearPricingStructure1(v LinearPricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinearPricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided LinearPricingStructure1
func (t *PriceResponse_Structure) MergeLinearPricingStructure1(v LinearPricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFixedPricingStructure1 returns the union data inside the PriceResponse_Structure as a FixedPricingStructure1
func (t PriceResponse_Structure) AsFixedPricingStructure1() (FixedPricingStructure1, error) {
	var body FixedPricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFixedPricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided FixedPricingStructure1
func (t *PriceResponse_Structure) FromFixedPricingStructure1(v FixedPricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFixedPricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided FixedPricingStructure1
func (t *PriceResponse_Structure) MergeFixedPricingStructure1(v FixedPricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOneTimePricingStructure1 returns the union data inside the PriceResponse_Structure as a OneTimePricingStructure1
func (t PriceResponse_Structure) AsOneTimePricingStructure1() (OneTimePricingStructure1, error) {
	var body OneTimePricingStructure1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOneTimePricingStructure1 overwrites any union data inside the PriceResponse_Structure as the provided OneTimePricingStructure1
func (t *PriceResponse_Structure) FromOneTimePricingStructure1(v OneTimePricingStructure1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOneTimePricingStructure1 performs a merge with any union data inside the PriceResponse_Structure, using the provided OneTimePricingStructure1
func (t *PriceResponse_Structure) MergeOneTimePricingStructure1(v OneTimePricingStructure1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PriceResponse_Structure) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PriceResponse_Structure) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBillingProducts request
	GetBillingProducts(ctx context.Context, params *GetBillingProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingSchedules request
	GetBillingSchedules(ctx context.Context, params *GetBillingSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingSchedulesWithBody request with any body
	PostBillingSchedulesWithBody(ctx context.Context, params *PostBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingSchedules(ctx context.Context, params *PostBillingSchedulesParams, body PostBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingSchedulesValidateTaxesWithBody request with any body
	PostBillingSchedulesValidateTaxesWithBody(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBillingSchedulesValidateTaxes(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, body PostBillingSchedulesValidateTaxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingSchedulesByBillingScheduleId request
	GetBillingSchedulesByBillingScheduleId(ctx context.Context, billingScheduleId string, params *GetBillingSchedulesByBillingScheduleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingSchedulesByBillingScheduleIdWithBody request with any body
	PutBillingSchedulesByBillingScheduleIdWithBody(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBillingSchedulesByBillingScheduleId(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, body PutBillingSchedulesByBillingScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBillingSchedulesByBillingScheduleIdActivate request
	PutBillingSchedulesByBillingScheduleIdActivate(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdActivateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBillingSchedulesByBillingScheduleIdArchive request
	PostBillingSchedulesByBillingScheduleIdArchive(ctx context.Context, billingScheduleId string, params *PostBillingSchedulesByBillingScheduleIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotes request
	GetCreditNotes(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesWithBody request with any body
	PostCreditNotesWithBody(ctx context.Context, params *PostCreditNotesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreditNotes(ctx context.Context, params *PostCreditNotesParams, body PostCreditNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotesByCreditnoteLineItemGroups request
	GetCreditNotesByCreditnoteLineItemGroups(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByCreditnoteLineItemGroupsWithBody request with any body
	PostCreditNotesByCreditnoteLineItemGroupsWithBody(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreditNotesByCreditnoteLineItemGroups(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, body PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCreditNotesByCreditnoteLineItemGroupsById request
	DeleteCreditNotesByCreditnoteLineItemGroupsById(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCreditNotesByCreditnoteLineItemGroupsByIdWithBody request with any body
	PutCreditNotesByCreditnoteLineItemGroupsByIdWithBody(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCreditNotesByCreditnoteLineItemGroupsById(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, body PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotesByCreditnoteLineItems request
	GetCreditNotesByCreditnoteLineItems(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByCreditnoteLineItemsWithBody request with any body
	PostCreditNotesByCreditnoteLineItemsWithBody(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCreditNotesByCreditnoteLineItems(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, body PostCreditNotesByCreditnoteLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCreditNotesByCreditnoteLineItemsById request
	DeleteCreditNotesByCreditnoteLineItemsById(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCreditNotesByCreditnoteLineItemsByIdWithBody request with any body
	PutCreditNotesByCreditnoteLineItemsByIdWithBody(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCreditNotesByCreditnoteLineItemsById(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, body PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCreditNotesById request
	DeleteCreditNotesById(ctx context.Context, id string, params *DeleteCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotesById request
	GetCreditNotesById(ctx context.Context, id string, params *GetCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCreditNotesByIdWithBody request with any body
	PutCreditNotesByIdWithBody(ctx context.Context, id string, params *PutCreditNotesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCreditNotesById(ctx context.Context, id string, params *PutCreditNotesByIdParams, body PutCreditNotesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditNotesByIdDownload request
	GetCreditNotesByIdDownload(ctx context.Context, id string, params *GetCreditNotesByIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByIdFinalize request
	PostCreditNotesByIdFinalize(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByIdFinalizeAndSend request
	PostCreditNotesByIdFinalizeAndSend(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByIdSend request
	PostCreditNotesByIdSend(ctx context.Context, id string, params *PostCreditNotesByIdSendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditNotesByIdVoid request
	PostCreditNotesByIdVoid(ctx context.Context, id string, params *PostCreditNotesByIdVoidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCredits request
	GetCredits(ctx context.Context, params *GetCreditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCreditsWithBody request with any body
	PostCreditsWithBody(ctx context.Context, params *PostCreditsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCredits(ctx context.Context, params *PostCreditsParams, body PostCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditsByCustomerIdBalances request
	GetCreditsByCustomerIdBalances(ctx context.Context, customerId string, params *GetCreditsByCustomerIdBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditsByCustomerIdGrants request
	GetCreditsByCustomerIdGrants(ctx context.Context, customerId string, params *GetCreditsByCustomerIdGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCreditsById request
	GetCreditsById(ctx context.Context, id string, params *GetCreditsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerAliases request
	GetCustomerAliases(ctx context.Context, params *GetCustomerAliasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerAliasesWithBody request with any body
	PostCustomerAliasesWithBody(ctx context.Context, params *PostCustomerAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerAliases(ctx context.Context, params *PostCustomerAliasesParams, body PostCustomerAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomerAliasesById request
	DeleteCustomerAliasesById(ctx context.Context, id string, params *DeleteCustomerAliasesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerAliasesByIdWithBody request with any body
	PutCustomerAliasesByIdWithBody(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomerAliasesById(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, body PutCustomerAliasesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerOrganizationsWithBody request with any body
	PostCustomerOrganizationsWithBody(ctx context.Context, params *PostCustomerOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerOrganizations(ctx context.Context, params *PostCustomerOrganizationsParams, body PostCustomerOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerOrganizationsByIdMembersWithBody request with any body
	PostCustomerOrganizationsByIdMembersWithBody(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomerOrganizationsByIdMembers(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, body PostCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerOrganizationsByIdMembersWithBody request with any body
	PutCustomerOrganizationsByIdMembersWithBody(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomerOrganizationsByIdMembers(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, body PutCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomers request
	GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersWithBody request with any body
	PostCustomersWithBody(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomers(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersByAliasByAlias request
	GetCustomersByAliasByAlias(ctx context.Context, alias string, params *GetCustomersByAliasByAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersByCustomerContacts request
	GetCustomersByCustomerContacts(ctx context.Context, customer string, params *GetCustomersByCustomerContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersByCustomerContactsWithBody request with any body
	PostCustomersByCustomerContactsWithBody(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomersByCustomerContacts(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, body PostCustomersByCustomerContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomersByCustomerContactsByIdWithBody request with any body
	PutCustomersByCustomerContactsByIdWithBody(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomersByCustomerContactsById(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, body PutCustomersByCustomerContactsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersByCustomerContactsByIdArchive request
	PostCustomersByCustomerContactsByIdArchive(ctx context.Context, customer string, id string, params *PostCustomersByCustomerContactsByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersById request
	GetCustomersById(ctx context.Context, id string, params *GetCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomersByIdWithBody request with any body
	PutCustomersByIdWithBody(ctx context.Context, id string, params *PutCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomersById(ctx context.Context, id string, params *PutCustomersByIdParams, body PutCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersByIdAliases request
	GetCustomersByIdAliases(ctx context.Context, id string, params *GetCustomersByIdAliasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomersByIdArchive request
	PostCustomersByIdArchive(ctx context.Context, id string, params *PostCustomersByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiscounts request
	GetDiscounts(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDiscountsById request
	DeleteDiscountsById(ctx context.Context, id string, params *DeleteDiscountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDiscountsById request
	GetDiscountsById(ctx context.Context, id string, params *GetDiscountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDiscountsByIdWithBody request with any body
	PutDiscountsByIdWithBody(ctx context.Context, id string, params *PutDiscountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDiscountsById(ctx context.Context, id string, params *PutDiscountsByIdParams, body PutDiscountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoices request
	GetInvoices(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesWithBody request with any body
	PostInvoicesWithBody(ctx context.Context, params *PostInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoices(ctx context.Context, params *PostInvoicesParams, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesRenderSettings request
	GetInvoicesRenderSettings(ctx context.Context, params *GetInvoicesRenderSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoicesRenderSettingsByIdWithBody request with any body
	PutInvoicesRenderSettingsByIdWithBody(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoicesRenderSettingsById(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, body PutInvoicesRenderSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoicesById request
	DeleteInvoicesById(ctx context.Context, id string, params *DeleteInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesById request
	GetInvoicesById(ctx context.Context, id string, params *GetInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInvoicesByIdWithBody request with any body
	PatchInvoicesByIdWithBody(ctx context.Context, id string, params *PatchInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInvoicesById(ctx context.Context, id string, params *PatchInvoicesByIdParams, body PatchInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoicesByIdWithBody request with any body
	PutInvoicesByIdWithBody(ctx context.Context, id string, params *PutInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoicesById(ctx context.Context, id string, params *PutInvoicesByIdParams, body PutInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesByIdDownload request
	GetInvoicesByIdDownload(ctx context.Context, id string, params *GetInvoicesByIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdDraft request
	PostInvoicesByIdDraft(ctx context.Context, id string, params *PostInvoicesByIdDraftParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdFinalize request
	PostInvoicesByIdFinalize(ctx context.Context, id string, params *PostInvoicesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdFinalizeAndSend request
	PostInvoicesByIdFinalizeAndSend(ctx context.Context, id string, params *PostInvoicesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoicesByIdPaymentStatusWithBody request with any body
	PutInvoicesByIdPaymentStatusWithBody(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoicesByIdPaymentStatus(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, body PutInvoicesByIdPaymentStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdSend request
	PostInvoicesByIdSend(ctx context.Context, id string, params *PostInvoicesByIdSendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdSendPaymentReminder request
	PostInvoicesByIdSendPaymentReminder(ctx context.Context, id string, params *PostInvoicesByIdSendPaymentReminderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByIdVoid request
	PostInvoicesByIdVoid(ctx context.Context, id string, params *PostInvoicesByIdVoidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesByInvoiceLineItemGroups request
	GetInvoicesByInvoiceLineItemGroups(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByInvoiceLineItemGroupsWithBody request with any body
	PostInvoicesByInvoiceLineItemGroupsWithBody(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoicesByInvoiceLineItemGroups(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, body PostInvoicesByInvoiceLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoicesByInvoiceLineItemGroupsById request
	DeleteInvoicesByInvoiceLineItemGroupsById(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoicesByInvoiceLineItemGroupsByIdWithBody request with any body
	PutInvoicesByInvoiceLineItemGroupsByIdWithBody(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoicesByInvoiceLineItemGroupsById(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, body PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesByInvoiceLineItems request
	GetInvoicesByInvoiceLineItems(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesByInvoiceLineItemsWithBody request with any body
	PostInvoicesByInvoiceLineItemsWithBody(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoicesByInvoiceLineItems(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, body PostInvoicesByInvoiceLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoicesByInvoiceLineItemsById request
	DeleteInvoicesByInvoiceLineItemsById(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoicesByInvoiceLineItemsByIdWithBody request with any body
	PutInvoicesByInvoiceLineItemsByIdWithBody(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoicesByInvoiceLineItemsById(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, body PutInvoicesByInvoiceLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListPrices request
	GetListPrices(ctx context.Context, params *GetListPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListPricesWithBody request with any body
	PostListPricesWithBody(ctx context.Context, params *PostListPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostListPrices(ctx context.Context, params *PostListPricesParams, body PostListPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetListPricesById request
	GetListPricesById(ctx context.Context, id string, params *GetListPricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutListPricesByIdWithBody request with any body
	PutListPricesByIdWithBody(ctx context.Context, id string, params *PutListPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutListPricesById(ctx context.Context, id string, params *PutListPricesByIdParams, body PutListPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostListPricesByIdArchive request
	PostListPricesByIdArchive(ctx context.Context, id string, params *PostListPricesByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationsPolicies request
	GetNotificationsPolicies(ctx context.Context, params *GetNotificationsPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotificationsPoliciesWithBody request with any body
	PostNotificationsPoliciesWithBody(ctx context.Context, params *PostNotificationsPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotificationsPolicies(ctx context.Context, params *PostNotificationsPoliciesParams, body PostNotificationsPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsPoliciesById request
	DeleteNotificationsPoliciesById(ctx context.Context, id string, params *DeleteNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationsPoliciesById request
	GetNotificationsPoliciesById(ctx context.Context, id string, params *GetNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotificationsPoliciesByIdNotificationTypesWithBody request with any body
	PostNotificationsPoliciesByIdNotificationTypesWithBody(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotificationsPoliciesByIdNotificationTypes(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, body PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsPoliciesByIdNotificationTypesByType request
	DeleteNotificationsPoliciesByIdNotificationTypesByType(ctx context.Context, id string, pType DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType, params *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNotificationsPoliciesByIdRecipientsWithBody request with any body
	PostNotificationsPoliciesByIdRecipientsWithBody(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNotificationsPoliciesByIdRecipients(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, body PostNotificationsPoliciesByIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationsPoliciesByIdRecipientsByRecipient request
	DeleteNotificationsPoliciesByIdRecipientsByRecipient(ctx context.Context, id string, recipient string, params *DeleteNotificationsPoliciesByIdRecipientsByRecipientParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettings request
	GetPaymentsSettings(ctx context.Context, params *GetPaymentsSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsSettingsBillingSchedulesWithBody request with any body
	PostPaymentsSettingsBillingSchedulesWithBody(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPaymentsSettingsBillingSchedules(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, body PostPaymentsSettingsBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettingsBillingSchedulesForBillingScheduleById request
	GetPaymentsSettingsBillingSchedulesForBillingScheduleById(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePaymentsSettingsBillingSchedulesById request
	DeletePaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *DeletePaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettingsBillingSchedulesById request
	GetPaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPaymentsSettingsBillingSchedulesByIdWithBody request with any body
	PutPaymentsSettingsBillingSchedulesByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, body PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsSettingsCustomersWithBody request with any body
	PostPaymentsSettingsCustomersWithBody(ctx context.Context, params *PostPaymentsSettingsCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPaymentsSettingsCustomers(ctx context.Context, params *PostPaymentsSettingsCustomersParams, body PostPaymentsSettingsCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePaymentsSettingsCustomersById request
	DeletePaymentsSettingsCustomersById(ctx context.Context, id string, params *DeletePaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettingsCustomersById request
	GetPaymentsSettingsCustomersById(ctx context.Context, id string, params *GetPaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPaymentsSettingsCustomersByIdWithBody request with any body
	PutPaymentsSettingsCustomersByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPaymentsSettingsCustomersById(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, body PutPaymentsSettingsCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsSettingsInvoicesWithBody request with any body
	PostPaymentsSettingsInvoicesWithBody(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPaymentsSettingsInvoices(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, body PostPaymentsSettingsInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettingsInvoicesForInvoiceById request
	GetPaymentsSettingsInvoicesForInvoiceById(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesForInvoiceByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePaymentsSettingsInvoicesById request
	DeletePaymentsSettingsInvoicesById(ctx context.Context, id string, params *DeletePaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsSettingsInvoicesById request
	GetPaymentsSettingsInvoicesById(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPaymentsSettingsInvoicesByIdWithBody request with any body
	PutPaymentsSettingsInvoicesByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPaymentsSettingsInvoicesById(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, body PutPaymentsSettingsInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPaymentsSettingsByIdWithBody request with any body
	PutPaymentsSettingsByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPaymentsSettingsById(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, body PutPaymentsSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPrices request
	GetPrices(ctx context.Context, params *GetPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPricesWithBody request with any body
	PostPricesWithBody(ctx context.Context, params *PostPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPrices(ctx context.Context, params *PostPricesParams, body PostPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePricesById request
	DeletePricesById(ctx context.Context, id string, params *DeletePricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPricesById request
	GetPricesById(ctx context.Context, id string, params *GetPricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPricesByIdWithBody request with any body
	PutPricesByIdWithBody(ctx context.Context, id string, params *PutPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPricesById(ctx context.Context, id string, params *PutPricesByIdParams, body PutPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsWithBody request with any body
	PostProductsWithBody(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProducts(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsById request
	GetProductsById(ctx context.Context, id string, params *GetProductsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProductsByIdWithBody request with any body
	PutProductsByIdWithBody(ctx context.Context, id string, params *PutProductsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsById(ctx context.Context, id string, params *PutProductsByIdParams, body PutProductsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProductsByIdArchive request
	PostProductsByIdArchive(ctx context.Context, id string, params *PostProductsByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeatBalances request
	GetSeatBalances(ctx context.Context, params *GetSeatBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeatEvents request
	GetSeatEvents(ctx context.Context, params *GetSeatEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSeatEventsWithBody request with any body
	PostSeatEventsWithBody(ctx context.Context, params *PostSeatEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSeatEvents(ctx context.Context, params *PostSeatEventsParams, body PostSeatEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeatEventsById request
	GetSeatEventsById(ctx context.Context, id string, params *GetSeatEventsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeatMetrics request
	GetSeatMetrics(ctx context.Context, params *GetSeatMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSeatMetricsWithBody request with any body
	PostSeatMetricsWithBody(ctx context.Context, params *PostSeatMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSeatMetrics(ctx context.Context, params *PostSeatMetricsParams, body PostSeatMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSeatMetricsById request
	DeleteSeatMetricsById(ctx context.Context, id string, params *DeleteSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeatMetricsById request
	GetSeatMetricsById(ctx context.Context, id string, params *GetSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSeatMetricsByIdWithBody request with any body
	PutSeatMetricsByIdWithBody(ctx context.Context, id string, params *PutSeatMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSeatMetricsById(ctx context.Context, id string, params *PutSeatMetricsByIdParams, body PutSeatMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSequenceAccounts request
	GetSequenceAccounts(ctx context.Context, params *GetSequenceAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSequenceAccountsById request
	GetSequenceAccountsById(ctx context.Context, id string, params *GetSequenceAccountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSequenceAccountsByIdWithBody request with any body
	PutSequenceAccountsByIdWithBody(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSequenceAccountsById(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, body PutSequenceAccountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRates request
	GetTaxRates(ctx context.Context, params *GetTaxRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRatesWithBody request with any body
	PostTaxRatesWithBody(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRates(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxRatesById request
	DeleteTaxRatesById(ctx context.Context, id string, params *DeleteTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRatesById request
	GetTaxRatesById(ctx context.Context, id string, params *GetTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaxRatesByIdWithBody request with any body
	PutTaxRatesByIdWithBody(ctx context.Context, id string, params *PutTaxRatesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaxRatesById(ctx context.Context, id string, params *PutTaxRatesByIdParams, body PutTaxRatesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRatesByIdArchive request
	PostTaxRatesByIdArchive(ctx context.Context, id string, params *PostTaxRatesByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegistrations request
	GetTaxRegistrations(ctx context.Context, params *GetTaxRegistrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTaxRegistrationsWithBody request with any body
	PostTaxRegistrationsWithBody(ctx context.Context, params *PostTaxRegistrationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTaxRegistrations(ctx context.Context, params *PostTaxRegistrationsParams, body PostTaxRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegistrationsForCustomerById request
	GetTaxRegistrationsForCustomerById(ctx context.Context, id string, params *GetTaxRegistrationsForCustomerByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegistrationsForMerchantById request
	GetTaxRegistrationsForMerchantById(ctx context.Context, id string, params *GetTaxRegistrationsForMerchantByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaxRegistrationsById request
	DeleteTaxRegistrationsById(ctx context.Context, id string, params *DeleteTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxRegistrationsById request
	GetTaxRegistrationsById(ctx context.Context, id string, params *GetTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTaxRegistrationsByIdWithBody request with any body
	PutTaxRegistrationsByIdWithBody(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTaxRegistrationsById(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, body PutTaxRegistrationsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageEvents request
	GetUsageEvents(ctx context.Context, params *GetUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsageEventsWithBody request with any body
	PostUsageEventsWithBody(ctx context.Context, params *PostUsageEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsageEvents(ctx context.Context, params *PostUsageEventsParams, body PostUsageEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageMetrics request
	GetUsageMetrics(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsageMetricsWithBody request with any body
	PostUsageMetricsWithBody(ctx context.Context, params *PostUsageMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsageMetrics(ctx context.Context, params *PostUsageMetricsParams, body PostUsageMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsageMetricsById request
	DeleteUsageMetricsById(ctx context.Context, id string, params *DeleteUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageMetricsById request
	GetUsageMetricsById(ctx context.Context, id string, params *GetUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsageMetricsByIdWithBody request with any body
	PutUsageMetricsByIdWithBody(ctx context.Context, id string, params *PutUsageMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsageMetricsById(ctx context.Context, id string, params *PutUsageMetricsByIdParams, body PutUsageMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageMetricsByUsageMetricIdCalculate request
	GetUsageMetricsByUsageMetricIdCalculate(ctx context.Context, usageMetricId string, params *GetUsageMetricsByUsageMetricIdCalculateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersById request
	DeleteUsersById(ctx context.Context, id string, params *DeleteUsersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersById request
	GetUsersById(ctx context.Context, id string, params *GetUsersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersByIdWithBody request with any body
	PutUsersByIdWithBody(ctx context.Context, id string, params *PutUsersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersById(ctx context.Context, id string, params *PutUsersByIdParams, body PutUsersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBillingProducts(ctx context.Context, params *GetBillingProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingSchedules(ctx context.Context, params *GetBillingSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingSchedulesWithBody(ctx context.Context, params *PostBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingSchedulesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingSchedules(ctx context.Context, params *PostBillingSchedulesParams, body PostBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingSchedulesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingSchedulesValidateTaxesWithBody(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingSchedulesValidateTaxesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingSchedulesValidateTaxes(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, body PostBillingSchedulesValidateTaxesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingSchedulesValidateTaxesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingSchedulesByBillingScheduleId(ctx context.Context, billingScheduleId string, params *GetBillingSchedulesByBillingScheduleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingSchedulesByBillingScheduleIdRequest(c.Server, billingScheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingSchedulesByBillingScheduleIdWithBody(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingSchedulesByBillingScheduleIdRequestWithBody(c.Server, billingScheduleId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingSchedulesByBillingScheduleId(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, body PutBillingSchedulesByBillingScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingSchedulesByBillingScheduleIdRequest(c.Server, billingScheduleId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBillingSchedulesByBillingScheduleIdActivate(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdActivateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBillingSchedulesByBillingScheduleIdActivateRequest(c.Server, billingScheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBillingSchedulesByBillingScheduleIdArchive(ctx context.Context, billingScheduleId string, params *PostBillingSchedulesByBillingScheduleIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBillingSchedulesByBillingScheduleIdArchiveRequest(c.Server, billingScheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotes(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesWithBody(ctx context.Context, params *PostCreditNotesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotes(ctx context.Context, params *PostCreditNotesParams, body PostCreditNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotesByCreditnoteLineItemGroups(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesByCreditnoteLineItemGroupsRequest(c.Server, creditnote, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByCreditnoteLineItemGroupsWithBody(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByCreditnoteLineItemGroupsRequestWithBody(c.Server, creditnote, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByCreditnoteLineItemGroups(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, body PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByCreditnoteLineItemGroupsRequest(c.Server, creditnote, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCreditNotesByCreditnoteLineItemGroupsById(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCreditNotesByCreditnoteLineItemGroupsByIdRequest(c.Server, creditnote, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesByCreditnoteLineItemGroupsByIdWithBody(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequestWithBody(c.Server, creditnote, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesByCreditnoteLineItemGroupsById(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, body PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequest(c.Server, creditnote, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotesByCreditnoteLineItems(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesByCreditnoteLineItemsRequest(c.Server, creditnote, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByCreditnoteLineItemsWithBody(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByCreditnoteLineItemsRequestWithBody(c.Server, creditnote, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByCreditnoteLineItems(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, body PostCreditNotesByCreditnoteLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByCreditnoteLineItemsRequest(c.Server, creditnote, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCreditNotesByCreditnoteLineItemsById(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCreditNotesByCreditnoteLineItemsByIdRequest(c.Server, creditnote, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesByCreditnoteLineItemsByIdWithBody(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByCreditnoteLineItemsByIdRequestWithBody(c.Server, creditnote, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesByCreditnoteLineItemsById(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, body PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByCreditnoteLineItemsByIdRequest(c.Server, creditnote, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCreditNotesById(ctx context.Context, id string, params *DeleteCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCreditNotesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotesById(ctx context.Context, id string, params *GetCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesByIdWithBody(ctx context.Context, id string, params *PutCreditNotesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCreditNotesById(ctx context.Context, id string, params *PutCreditNotesByIdParams, body PutCreditNotesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCreditNotesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditNotesByIdDownload(ctx context.Context, id string, params *GetCreditNotesByIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditNotesByIdDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByIdFinalize(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByIdFinalizeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByIdFinalizeAndSend(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByIdFinalizeAndSendRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByIdSend(ctx context.Context, id string, params *PostCreditNotesByIdSendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByIdSendRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditNotesByIdVoid(ctx context.Context, id string, params *PostCreditNotesByIdVoidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditNotesByIdVoidRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCredits(ctx context.Context, params *GetCreditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCreditsWithBody(ctx context.Context, params *PostCreditsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCredits(ctx context.Context, params *PostCreditsParams, body PostCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCreditsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditsByCustomerIdBalances(ctx context.Context, customerId string, params *GetCreditsByCustomerIdBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditsByCustomerIdBalancesRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditsByCustomerIdGrants(ctx context.Context, customerId string, params *GetCreditsByCustomerIdGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditsByCustomerIdGrantsRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCreditsById(ctx context.Context, id string, params *GetCreditsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCreditsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerAliases(ctx context.Context, params *GetCustomerAliasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerAliasesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerAliasesWithBody(ctx context.Context, params *PostCustomerAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerAliasesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerAliases(ctx context.Context, params *PostCustomerAliasesParams, body PostCustomerAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerAliasesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomerAliasesById(ctx context.Context, id string, params *DeleteCustomerAliasesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerAliasesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerAliasesByIdWithBody(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerAliasesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerAliasesById(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, body PutCustomerAliasesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerAliasesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerOrganizationsWithBody(ctx context.Context, params *PostCustomerOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerOrganizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerOrganizations(ctx context.Context, params *PostCustomerOrganizationsParams, body PostCustomerOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerOrganizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerOrganizationsByIdMembersWithBody(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerOrganizationsByIdMembersRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerOrganizationsByIdMembers(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, body PostCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerOrganizationsByIdMembersRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerOrganizationsByIdMembersWithBody(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerOrganizationsByIdMembersRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerOrganizationsByIdMembers(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, body PutCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerOrganizationsByIdMembersRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersWithBody(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomers(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersByAliasByAlias(ctx context.Context, alias string, params *GetCustomersByAliasByAliasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersByAliasByAliasRequest(c.Server, alias, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersByCustomerContacts(ctx context.Context, customer string, params *GetCustomersByCustomerContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersByCustomerContactsRequest(c.Server, customer, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersByCustomerContactsWithBody(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersByCustomerContactsRequestWithBody(c.Server, customer, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersByCustomerContacts(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, body PostCustomersByCustomerContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersByCustomerContactsRequest(c.Server, customer, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersByCustomerContactsByIdWithBody(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersByCustomerContactsByIdRequestWithBody(c.Server, customer, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersByCustomerContactsById(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, body PutCustomersByCustomerContactsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersByCustomerContactsByIdRequest(c.Server, customer, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersByCustomerContactsByIdArchive(ctx context.Context, customer string, id string, params *PostCustomersByCustomerContactsByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersByCustomerContactsByIdArchiveRequest(c.Server, customer, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersById(ctx context.Context, id string, params *GetCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersByIdWithBody(ctx context.Context, id string, params *PutCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomersById(ctx context.Context, id string, params *PutCustomersByIdParams, body PutCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomersByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersByIdAliases(ctx context.Context, id string, params *GetCustomersByIdAliasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersByIdAliasesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomersByIdArchive(ctx context.Context, id string, params *PostCustomersByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomersByIdArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscounts(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDiscountsById(ctx context.Context, id string, params *DeleteDiscountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDiscountsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDiscountsById(ctx context.Context, id string, params *GetDiscountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDiscountsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiscountsByIdWithBody(ctx context.Context, id string, params *PutDiscountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiscountsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDiscountsById(ctx context.Context, id string, params *PutDiscountsByIdParams, body PutDiscountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDiscountsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoices(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesWithBody(ctx context.Context, params *PostInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoices(ctx context.Context, params *PostInvoicesParams, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesRenderSettings(ctx context.Context, params *GetInvoicesRenderSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesRenderSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesRenderSettingsByIdWithBody(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesRenderSettingsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesRenderSettingsById(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, body PutInvoicesRenderSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesRenderSettingsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesById(ctx context.Context, id string, params *DeleteInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoicesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesById(ctx context.Context, id string, params *GetInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInvoicesByIdWithBody(ctx context.Context, id string, params *PatchInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInvoicesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInvoicesById(ctx context.Context, id string, params *PatchInvoicesByIdParams, body PatchInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInvoicesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByIdWithBody(ctx context.Context, id string, params *PutInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesById(ctx context.Context, id string, params *PutInvoicesByIdParams, body PutInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesByIdDownload(ctx context.Context, id string, params *GetInvoicesByIdDownloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesByIdDownloadRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdDraft(ctx context.Context, id string, params *PostInvoicesByIdDraftParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdDraftRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdFinalize(ctx context.Context, id string, params *PostInvoicesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdFinalizeRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdFinalizeAndSend(ctx context.Context, id string, params *PostInvoicesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdFinalizeAndSendRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByIdPaymentStatusWithBody(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByIdPaymentStatusRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByIdPaymentStatus(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, body PutInvoicesByIdPaymentStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByIdPaymentStatusRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdSend(ctx context.Context, id string, params *PostInvoicesByIdSendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdSendRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdSendPaymentReminder(ctx context.Context, id string, params *PostInvoicesByIdSendPaymentReminderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdSendPaymentReminderRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByIdVoid(ctx context.Context, id string, params *PostInvoicesByIdVoidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByIdVoidRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesByInvoiceLineItemGroups(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesByInvoiceLineItemGroupsRequest(c.Server, invoice, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByInvoiceLineItemGroupsWithBody(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByInvoiceLineItemGroupsRequestWithBody(c.Server, invoice, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByInvoiceLineItemGroups(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, body PostInvoicesByInvoiceLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByInvoiceLineItemGroupsRequest(c.Server, invoice, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesByInvoiceLineItemGroupsById(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoicesByInvoiceLineItemGroupsByIdRequest(c.Server, invoice, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByInvoiceLineItemGroupsByIdWithBody(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByInvoiceLineItemGroupsByIdRequestWithBody(c.Server, invoice, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByInvoiceLineItemGroupsById(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, body PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByInvoiceLineItemGroupsByIdRequest(c.Server, invoice, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesByInvoiceLineItems(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesByInvoiceLineItemsRequest(c.Server, invoice, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByInvoiceLineItemsWithBody(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByInvoiceLineItemsRequestWithBody(c.Server, invoice, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesByInvoiceLineItems(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, body PostInvoicesByInvoiceLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesByInvoiceLineItemsRequest(c.Server, invoice, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesByInvoiceLineItemsById(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoicesByInvoiceLineItemsByIdRequest(c.Server, invoice, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByInvoiceLineItemsByIdWithBody(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByInvoiceLineItemsByIdRequestWithBody(c.Server, invoice, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoicesByInvoiceLineItemsById(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, body PutInvoicesByInvoiceLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoicesByInvoiceLineItemsByIdRequest(c.Server, invoice, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListPrices(ctx context.Context, params *GetListPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListPricesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListPricesWithBody(ctx context.Context, params *PostListPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListPricesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListPrices(ctx context.Context, params *PostListPricesParams, body PostListPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListPricesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetListPricesById(ctx context.Context, id string, params *GetListPricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetListPricesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListPricesByIdWithBody(ctx context.Context, id string, params *PutListPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListPricesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutListPricesById(ctx context.Context, id string, params *PutListPricesByIdParams, body PutListPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutListPricesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostListPricesByIdArchive(ctx context.Context, id string, params *PostListPricesByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostListPricesByIdArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationsPolicies(ctx context.Context, params *GetNotificationsPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationsPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPoliciesWithBody(ctx context.Context, params *PostNotificationsPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPolicies(ctx context.Context, params *PostNotificationsPoliciesParams, body PostNotificationsPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsPoliciesById(ctx context.Context, id string, params *DeleteNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsPoliciesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationsPoliciesById(ctx context.Context, id string, params *GetNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationsPoliciesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPoliciesByIdNotificationTypesWithBody(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesByIdNotificationTypesRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPoliciesByIdNotificationTypes(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, body PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesByIdNotificationTypesRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsPoliciesByIdNotificationTypesByType(ctx context.Context, id string, pType DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType, params *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsPoliciesByIdNotificationTypesByTypeRequest(c.Server, id, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPoliciesByIdRecipientsWithBody(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesByIdRecipientsRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNotificationsPoliciesByIdRecipients(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, body PostNotificationsPoliciesByIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNotificationsPoliciesByIdRecipientsRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationsPoliciesByIdRecipientsByRecipient(ctx context.Context, id string, recipient string, params *DeleteNotificationsPoliciesByIdRecipientsByRecipientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationsPoliciesByIdRecipientsByRecipientRequest(c.Server, id, recipient, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettings(ctx context.Context, params *GetPaymentsSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsBillingSchedulesWithBody(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsBillingSchedulesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsBillingSchedules(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, body PostPaymentsSettingsBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsBillingSchedulesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettingsBillingSchedulesForBillingScheduleById(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *DeletePaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePaymentsSettingsBillingSchedulesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsBillingSchedulesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsBillingSchedulesByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsBillingSchedulesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsBillingSchedulesById(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, body PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsBillingSchedulesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsCustomersWithBody(ctx context.Context, params *PostPaymentsSettingsCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsCustomersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsCustomers(ctx context.Context, params *PostPaymentsSettingsCustomersParams, body PostPaymentsSettingsCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsCustomersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePaymentsSettingsCustomersById(ctx context.Context, id string, params *DeletePaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePaymentsSettingsCustomersByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettingsCustomersById(ctx context.Context, id string, params *GetPaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsCustomersByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsCustomersByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsCustomersByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsCustomersById(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, body PutPaymentsSettingsCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsCustomersByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsInvoicesWithBody(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsInvoicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsSettingsInvoices(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, body PostPaymentsSettingsInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsSettingsInvoicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettingsInvoicesForInvoiceById(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesForInvoiceByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsInvoicesForInvoiceByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePaymentsSettingsInvoicesById(ctx context.Context, id string, params *DeletePaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePaymentsSettingsInvoicesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsSettingsInvoicesById(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsSettingsInvoicesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsInvoicesByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsInvoicesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsInvoicesById(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, body PutPaymentsSettingsInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsInvoicesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsByIdWithBody(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPaymentsSettingsById(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, body PutPaymentsSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPaymentsSettingsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPrices(ctx context.Context, params *GetPricesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPricesWithBody(ctx context.Context, params *PostPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPrices(ctx context.Context, params *PostPricesParams, body PostPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPricesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePricesById(ctx context.Context, id string, params *DeletePricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePricesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPricesById(ctx context.Context, id string, params *GetPricesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPricesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPricesByIdWithBody(ctx context.Context, id string, params *PutPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPricesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPricesById(ctx context.Context, id string, params *PutPricesByIdParams, body PutPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPricesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsWithBody(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProducts(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsById(ctx context.Context, id string, params *GetProductsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsByIdWithBody(ctx context.Context, id string, params *PutProductsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsById(ctx context.Context, id string, params *PutProductsByIdParams, body PutProductsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProductsByIdArchive(ctx context.Context, id string, params *PostProductsByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProductsByIdArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeatBalances(ctx context.Context, params *GetSeatBalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeatBalancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeatEvents(ctx context.Context, params *GetSeatEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeatEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSeatEventsWithBody(ctx context.Context, params *PostSeatEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSeatEventsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSeatEvents(ctx context.Context, params *PostSeatEventsParams, body PostSeatEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSeatEventsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeatEventsById(ctx context.Context, id string, params *GetSeatEventsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeatEventsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeatMetrics(ctx context.Context, params *GetSeatMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeatMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSeatMetricsWithBody(ctx context.Context, params *PostSeatMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSeatMetricsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSeatMetrics(ctx context.Context, params *PostSeatMetricsParams, body PostSeatMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSeatMetricsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSeatMetricsById(ctx context.Context, id string, params *DeleteSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSeatMetricsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeatMetricsById(ctx context.Context, id string, params *GetSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeatMetricsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSeatMetricsByIdWithBody(ctx context.Context, id string, params *PutSeatMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSeatMetricsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSeatMetricsById(ctx context.Context, id string, params *PutSeatMetricsByIdParams, body PutSeatMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSeatMetricsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSequenceAccounts(ctx context.Context, params *GetSequenceAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSequenceAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSequenceAccountsById(ctx context.Context, id string, params *GetSequenceAccountsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSequenceAccountsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSequenceAccountsByIdWithBody(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSequenceAccountsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSequenceAccountsById(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, body PutSequenceAccountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSequenceAccountsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRates(ctx context.Context, params *GetTaxRatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesWithBody(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRates(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRatesById(ctx context.Context, id string, params *DeleteTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRatesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRatesById(ctx context.Context, id string, params *GetTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRatesByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxRatesByIdWithBody(ctx context.Context, id string, params *PutTaxRatesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxRatesByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxRatesById(ctx context.Context, id string, params *PutTaxRatesByIdParams, body PutTaxRatesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxRatesByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRatesByIdArchive(ctx context.Context, id string, params *PostTaxRatesByIdArchiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRatesByIdArchiveRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegistrations(ctx context.Context, params *GetTaxRegistrationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegistrationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRegistrationsWithBody(ctx context.Context, params *PostTaxRegistrationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRegistrationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTaxRegistrations(ctx context.Context, params *PostTaxRegistrationsParams, body PostTaxRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTaxRegistrationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegistrationsForCustomerById(ctx context.Context, id string, params *GetTaxRegistrationsForCustomerByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegistrationsForCustomerByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegistrationsForMerchantById(ctx context.Context, id string, params *GetTaxRegistrationsForMerchantByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegistrationsForMerchantByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaxRegistrationsById(ctx context.Context, id string, params *DeleteTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaxRegistrationsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaxRegistrationsById(ctx context.Context, id string, params *GetTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxRegistrationsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxRegistrationsByIdWithBody(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxRegistrationsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTaxRegistrationsById(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, body PutTaxRegistrationsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTaxRegistrationsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageEvents(ctx context.Context, params *GetUsageEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsageEventsWithBody(ctx context.Context, params *PostUsageEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsageEventsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsageEvents(ctx context.Context, params *PostUsageEventsParams, body PostUsageEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsageEventsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageMetrics(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsageMetricsWithBody(ctx context.Context, params *PostUsageMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsageMetricsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsageMetrics(ctx context.Context, params *PostUsageMetricsParams, body PostUsageMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsageMetricsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsageMetricsById(ctx context.Context, id string, params *DeleteUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsageMetricsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageMetricsById(ctx context.Context, id string, params *GetUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageMetricsByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsageMetricsByIdWithBody(ctx context.Context, id string, params *PutUsageMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsageMetricsByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsageMetricsById(ctx context.Context, id string, params *PutUsageMetricsByIdParams, body PutUsageMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsageMetricsByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageMetricsByUsageMetricIdCalculate(ctx context.Context, usageMetricId string, params *GetUsageMetricsByUsageMetricIdCalculateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageMetricsByUsageMetricIdCalculateRequest(c.Server, usageMetricId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersById(ctx context.Context, id string, params *DeleteUsersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersById(ctx context.Context, id string, params *GetUsersByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersByIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersByIdWithBody(ctx context.Context, id string, params *PutUsersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersByIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersById(ctx context.Context, id string, params *PutUsersByIdParams, body PutUsersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersByIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBillingProductsRequest generates requests for GetBillingProducts
func NewGetBillingProductsRequest(server string, params *GetBillingProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetBillingSchedulesRequest generates requests for GetBillingSchedules
func NewGetBillingSchedulesRequest(server string, params *GetBillingSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingScheduleStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billingScheduleStatus", runtime.ParamLocationQuery, *params.BillingScheduleStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AutoSendInvoices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "autoSendInvoices", runtime.ParamLocationQuery, *params.AutoSendInvoices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Label != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "label", runtime.ParamLocationQuery, *params.Label); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeArchivedSchedules != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchivedSchedules", runtime.ParamLocationQuery, *params.IncludeArchivedSchedules); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostBillingSchedulesRequest calls the generic PostBillingSchedules builder with application/json body
func NewPostBillingSchedulesRequest(server string, params *PostBillingSchedulesParams, body PostBillingSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingSchedulesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBillingSchedulesRequestWithBody generates requests for PostBillingSchedules with any type of body
func NewPostBillingSchedulesRequestWithBody(server string, params *PostBillingSchedulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostBillingSchedulesValidateTaxesRequest calls the generic PostBillingSchedulesValidateTaxes builder with application/json body
func NewPostBillingSchedulesValidateTaxesRequest(server string, params *PostBillingSchedulesValidateTaxesParams, body PostBillingSchedulesValidateTaxesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBillingSchedulesValidateTaxesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBillingSchedulesValidateTaxesRequestWithBody generates requests for PostBillingSchedulesValidateTaxes with any type of body
func NewPostBillingSchedulesValidateTaxesRequestWithBody(server string, params *PostBillingSchedulesValidateTaxesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules/validate-taxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetBillingSchedulesByBillingScheduleIdRequest generates requests for GetBillingSchedulesByBillingScheduleId
func NewGetBillingSchedulesByBillingScheduleIdRequest(server string, billingScheduleId string, params *GetBillingSchedulesByBillingScheduleIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingScheduleId", runtime.ParamLocationPath, billingScheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutBillingSchedulesByBillingScheduleIdRequest calls the generic PutBillingSchedulesByBillingScheduleId builder with application/json body
func NewPutBillingSchedulesByBillingScheduleIdRequest(server string, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, body PutBillingSchedulesByBillingScheduleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBillingSchedulesByBillingScheduleIdRequestWithBody(server, billingScheduleId, params, "application/json", bodyReader)
}

// NewPutBillingSchedulesByBillingScheduleIdRequestWithBody generates requests for PutBillingSchedulesByBillingScheduleId with any type of body
func NewPutBillingSchedulesByBillingScheduleIdRequestWithBody(server string, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingScheduleId", runtime.ParamLocationPath, billingScheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutBillingSchedulesByBillingScheduleIdActivateRequest generates requests for PutBillingSchedulesByBillingScheduleIdActivate
func NewPutBillingSchedulesByBillingScheduleIdActivateRequest(server string, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdActivateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingScheduleId", runtime.ParamLocationPath, billingScheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules/%s/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.SequenceVersion != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam0)
		}

	}

	return req, nil
}

// NewPostBillingSchedulesByBillingScheduleIdArchiveRequest generates requests for PostBillingSchedulesByBillingScheduleIdArchive
func NewPostBillingSchedulesByBillingScheduleIdArchiveRequest(server string, billingScheduleId string, params *PostBillingSchedulesByBillingScheduleIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingScheduleId", runtime.ParamLocationPath, billingScheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-schedules/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditNotesRequest generates requests for GetCreditNotes
func NewGetCreditNotesRequest(server string, params *GetCreditNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreditNoteStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creditNoteStatus", runtime.ParamLocationQuery, *params.CreditNoteStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SentBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sentBefore", runtime.ParamLocationQuery, *params.SentBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SentAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sentAfter", runtime.ParamLocationQuery, *params.SentAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesRequest calls the generic PostCreditNotes builder with application/json body
func NewPostCreditNotesRequest(server string, params *PostCreditNotesParams, body PostCreditNotesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreditNotesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCreditNotesRequestWithBody generates requests for PostCreditNotes with any type of body
func NewPostCreditNotesRequestWithBody(server string, params *PostCreditNotesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditNotesByCreditnoteLineItemGroupsRequest generates requests for GetCreditNotesByCreditnoteLineItemGroups
func NewGetCreditNotesByCreditnoteLineItemGroupsRequest(server string, creditnote string, params *GetCreditNotesByCreditnoteLineItemGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-item-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByCreditnoteLineItemGroupsRequest calls the generic PostCreditNotesByCreditnoteLineItemGroups builder with application/json body
func NewPostCreditNotesByCreditnoteLineItemGroupsRequest(server string, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, body PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreditNotesByCreditnoteLineItemGroupsRequestWithBody(server, creditnote, params, "application/json", bodyReader)
}

// NewPostCreditNotesByCreditnoteLineItemGroupsRequestWithBody generates requests for PostCreditNotesByCreditnoteLineItemGroups with any type of body
func NewPostCreditNotesByCreditnoteLineItemGroupsRequestWithBody(server string, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-item-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCreditNotesByCreditnoteLineItemGroupsByIdRequest generates requests for DeleteCreditNotesByCreditnoteLineItemGroupsById
func NewDeleteCreditNotesByCreditnoteLineItemGroupsByIdRequest(server string, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-item-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequest calls the generic PutCreditNotesByCreditnoteLineItemGroupsById builder with application/json body
func NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequest(server string, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, body PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequestWithBody(server, creditnote, id, params, "application/json", bodyReader)
}

// NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequestWithBody generates requests for PutCreditNotesByCreditnoteLineItemGroupsById with any type of body
func NewPutCreditNotesByCreditnoteLineItemGroupsByIdRequestWithBody(server string, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-item-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditNotesByCreditnoteLineItemsRequest generates requests for GetCreditNotesByCreditnoteLineItems
func NewGetCreditNotesByCreditnoteLineItemsRequest(server string, creditnote string, params *GetCreditNotesByCreditnoteLineItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByCreditnoteLineItemsRequest calls the generic PostCreditNotesByCreditnoteLineItems builder with application/json body
func NewPostCreditNotesByCreditnoteLineItemsRequest(server string, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, body PostCreditNotesByCreditnoteLineItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreditNotesByCreditnoteLineItemsRequestWithBody(server, creditnote, params, "application/json", bodyReader)
}

// NewPostCreditNotesByCreditnoteLineItemsRequestWithBody generates requests for PostCreditNotesByCreditnoteLineItems with any type of body
func NewPostCreditNotesByCreditnoteLineItemsRequestWithBody(server string, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCreditNotesByCreditnoteLineItemsByIdRequest generates requests for DeleteCreditNotesByCreditnoteLineItemsById
func NewDeleteCreditNotesByCreditnoteLineItemsByIdRequest(server string, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCreditNotesByCreditnoteLineItemsByIdRequest calls the generic PutCreditNotesByCreditnoteLineItemsById builder with application/json body
func NewPutCreditNotesByCreditnoteLineItemsByIdRequest(server string, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, body PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCreditNotesByCreditnoteLineItemsByIdRequestWithBody(server, creditnote, id, params, "application/json", bodyReader)
}

// NewPutCreditNotesByCreditnoteLineItemsByIdRequestWithBody generates requests for PutCreditNotesByCreditnoteLineItemsById with any type of body
func NewPutCreditNotesByCreditnoteLineItemsByIdRequestWithBody(server string, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "creditnote", runtime.ParamLocationPath, creditnote)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/line-items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCreditNotesByIdRequest generates requests for DeleteCreditNotesById
func NewDeleteCreditNotesByIdRequest(server string, id string, params *DeleteCreditNotesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditNotesByIdRequest generates requests for GetCreditNotesById
func NewGetCreditNotesByIdRequest(server string, id string, params *GetCreditNotesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCreditNotesByIdRequest calls the generic PutCreditNotesById builder with application/json body
func NewPutCreditNotesByIdRequest(server string, id string, params *PutCreditNotesByIdParams, body PutCreditNotesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCreditNotesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutCreditNotesByIdRequestWithBody generates requests for PutCreditNotesById with any type of body
func NewPutCreditNotesByIdRequestWithBody(server string, id string, params *PutCreditNotesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditNotesByIdDownloadRequest generates requests for GetCreditNotesByIdDownload
func NewGetCreditNotesByIdDownloadRequest(server string, id string, params *GetCreditNotesByIdDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByIdFinalizeRequest generates requests for PostCreditNotesByIdFinalize
func NewPostCreditNotesByIdFinalizeRequest(server string, id string, params *PostCreditNotesByIdFinalizeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/finalize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByIdFinalizeAndSendRequest generates requests for PostCreditNotesByIdFinalizeAndSend
func NewPostCreditNotesByIdFinalizeAndSendRequest(server string, id string, params *PostCreditNotesByIdFinalizeAndSendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/finalize-and-send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByIdSendRequest generates requests for PostCreditNotesByIdSend
func NewPostCreditNotesByIdSendRequest(server string, id string, params *PostCreditNotesByIdSendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditNotesByIdVoidRequest generates requests for PostCreditNotesByIdVoid
func NewPostCreditNotesByIdVoidRequest(server string, id string, params *PostCreditNotesByIdVoidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-notes/%s/void", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditsRequest generates requests for GetCredits
func NewGetCreditsRequest(server string, params *GetCreditsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCreditsRequest calls the generic PostCredits builder with application/json body
func NewPostCreditsRequest(server string, params *PostCreditsParams, body PostCreditsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCreditsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCreditsRequestWithBody generates requests for PostCredits with any type of body
func NewPostCreditsRequestWithBody(server string, params *PostCreditsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditsByCustomerIdBalancesRequest generates requests for GetCreditsByCustomerIdBalances
func NewGetCreditsByCustomerIdBalancesRequest(server string, customerId string, params *GetCreditsByCustomerIdBalancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/%s/balances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditsByCustomerIdGrantsRequest generates requests for GetCreditsByCustomerIdGrants
func NewGetCreditsByCustomerIdGrantsRequest(server string, customerId string, params *GetCreditsByCustomerIdGrantsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/%s/grants", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCreditsByIdRequest generates requests for GetCreditsById
func NewGetCreditsByIdRequest(server string, id string, params *GetCreditsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCustomerAliasesRequest generates requests for GetCustomerAliases
func NewGetCustomerAliasesRequest(server string, params *GetCustomerAliasesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-aliases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomerAliasesRequest calls the generic PostCustomerAliases builder with application/json body
func NewPostCustomerAliasesRequest(server string, params *PostCustomerAliasesParams, body PostCustomerAliasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerAliasesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCustomerAliasesRequestWithBody generates requests for PostCustomerAliases with any type of body
func NewPostCustomerAliasesRequestWithBody(server string, params *PostCustomerAliasesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-aliases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCustomerAliasesByIdRequest generates requests for DeleteCustomerAliasesById
func NewDeleteCustomerAliasesByIdRequest(server string, id string, params *DeleteCustomerAliasesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-aliases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCustomerAliasesByIdRequest calls the generic PutCustomerAliasesById builder with application/json body
func NewPutCustomerAliasesByIdRequest(server string, id string, params *PutCustomerAliasesByIdParams, body PutCustomerAliasesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerAliasesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutCustomerAliasesByIdRequestWithBody generates requests for PutCustomerAliasesById with any type of body
func NewPutCustomerAliasesByIdRequestWithBody(server string, id string, params *PutCustomerAliasesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-aliases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomerOrganizationsRequest calls the generic PostCustomerOrganizations builder with application/json body
func NewPostCustomerOrganizationsRequest(server string, params *PostCustomerOrganizationsParams, body PostCustomerOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerOrganizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCustomerOrganizationsRequestWithBody generates requests for PostCustomerOrganizations with any type of body
func NewPostCustomerOrganizationsRequestWithBody(server string, params *PostCustomerOrganizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomerOrganizationsByIdMembersRequest calls the generic PostCustomerOrganizationsByIdMembers builder with application/json body
func NewPostCustomerOrganizationsByIdMembersRequest(server string, id string, params *PostCustomerOrganizationsByIdMembersParams, body PostCustomerOrganizationsByIdMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerOrganizationsByIdMembersRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostCustomerOrganizationsByIdMembersRequestWithBody generates requests for PostCustomerOrganizationsByIdMembers with any type of body
func NewPostCustomerOrganizationsByIdMembersRequestWithBody(server string, id string, params *PostCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCustomerOrganizationsByIdMembersRequest calls the generic PutCustomerOrganizationsByIdMembers builder with application/json body
func NewPutCustomerOrganizationsByIdMembersRequest(server string, id string, params *PutCustomerOrganizationsByIdMembersParams, body PutCustomerOrganizationsByIdMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerOrganizationsByIdMembersRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutCustomerOrganizationsByIdMembersRequestWithBody generates requests for PutCustomerOrganizationsByIdMembers with any type of body
func NewPutCustomerOrganizationsByIdMembersRequestWithBody(server string, id string, params *PutCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCustomersRequest generates requests for GetCustomers
func NewGetCustomersRequest(server string, params *GetCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LegalName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "legalName", runtime.ParamLocationQuery, *params.LegalName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Alias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "alias", runtime.ParamLocationQuery, *params.Alias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomersRequest calls the generic PostCustomers builder with application/json body
func NewPostCustomersRequest(server string, params *PostCustomersParams, body PostCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCustomersRequestWithBody generates requests for PostCustomers with any type of body
func NewPostCustomersRequestWithBody(server string, params *PostCustomersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCustomersByAliasByAliasRequest generates requests for GetCustomersByAliasByAlias
func NewGetCustomersByAliasByAliasRequest(server string, alias string, params *GetCustomersByAliasByAliasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/by-alias/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCustomersByCustomerContactsRequest generates requests for GetCustomersByCustomerContacts
func NewGetCustomersByCustomerContactsRequest(server string, customer string, params *GetCustomersByCustomerContactsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer", runtime.ParamLocationPath, customer)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomersByCustomerContactsRequest calls the generic PostCustomersByCustomerContacts builder with application/json body
func NewPostCustomersByCustomerContactsRequest(server string, customer string, params *PostCustomersByCustomerContactsParams, body PostCustomersByCustomerContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomersByCustomerContactsRequestWithBody(server, customer, params, "application/json", bodyReader)
}

// NewPostCustomersByCustomerContactsRequestWithBody generates requests for PostCustomersByCustomerContacts with any type of body
func NewPostCustomersByCustomerContactsRequestWithBody(server string, customer string, params *PostCustomersByCustomerContactsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer", runtime.ParamLocationPath, customer)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/contacts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCustomersByCustomerContactsByIdRequest calls the generic PutCustomersByCustomerContactsById builder with application/json body
func NewPutCustomersByCustomerContactsByIdRequest(server string, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, body PutCustomersByCustomerContactsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersByCustomerContactsByIdRequestWithBody(server, customer, id, params, "application/json", bodyReader)
}

// NewPutCustomersByCustomerContactsByIdRequestWithBody generates requests for PutCustomersByCustomerContactsById with any type of body
func NewPutCustomersByCustomerContactsByIdRequestWithBody(server string, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer", runtime.ParamLocationPath, customer)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/contacts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomersByCustomerContactsByIdArchiveRequest generates requests for PostCustomersByCustomerContactsByIdArchive
func NewPostCustomersByCustomerContactsByIdArchiveRequest(server string, customer string, id string, params *PostCustomersByCustomerContactsByIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer", runtime.ParamLocationPath, customer)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/contacts/%s/archive", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetCustomersByIdRequest generates requests for GetCustomersById
func NewGetCustomersByIdRequest(server string, id string, params *GetCustomersByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutCustomersByIdRequest calls the generic PutCustomersById builder with application/json body
func NewPutCustomersByIdRequest(server string, id string, params *PutCustomersByIdParams, body PutCustomersByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomersByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutCustomersByIdRequestWithBody generates requests for PutCustomersById with any type of body
func NewPutCustomersByIdRequestWithBody(server string, id string, params *PutCustomersByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.SequenceVersion != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam0)
		}

	}

	return req, nil
}

// NewGetCustomersByIdAliasesRequest generates requests for GetCustomersByIdAliases
func NewGetCustomersByIdAliasesRequest(server string, id string, params *GetCustomersByIdAliasesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/aliases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostCustomersByIdArchiveRequest generates requests for PostCustomersByIdArchive
func NewPostCustomersByIdArchiveRequest(server string, id string, params *PostCustomersByIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetDiscountsRequest generates requests for GetDiscounts
func NewGetDiscountsRequest(server string, params *GetDiscountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteDiscountsByIdRequest generates requests for DeleteDiscountsById
func NewDeleteDiscountsByIdRequest(server string, id string, params *DeleteDiscountsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetDiscountsByIdRequest generates requests for GetDiscountsById
func NewGetDiscountsByIdRequest(server string, id string, params *GetDiscountsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutDiscountsByIdRequest calls the generic PutDiscountsById builder with application/json body
func NewPutDiscountsByIdRequest(server string, id string, params *PutDiscountsByIdParams, body PutDiscountsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDiscountsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutDiscountsByIdRequestWithBody generates requests for PutDiscountsById with any type of body
func NewPutDiscountsByIdRequestWithBody(server string, id string, params *PutDiscountsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/discounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesRequest generates requests for GetInvoices
func NewGetInvoicesRequest(server string, params *GetInvoicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceStatus", runtime.ParamLocationQuery, *params.InvoiceStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoicePaymentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoicePaymentStatus", runtime.ParamLocationQuery, *params.InvoicePaymentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingScheduleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billingScheduleId", runtime.ParamLocationQuery, *params.BillingScheduleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DueBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dueBefore", runtime.ParamLocationQuery, *params.DueBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DueAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dueAfter", runtime.ParamLocationQuery, *params.DueAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SentBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sentBefore", runtime.ParamLocationQuery, *params.SentBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SentAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sentAfter", runtime.ParamLocationQuery, *params.SentAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceBefore", runtime.ParamLocationQuery, *params.InvoiceBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceAfter", runtime.ParamLocationQuery, *params.InvoiceAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExcludeZeroQuantity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeZeroQuantity", runtime.ParamLocationQuery, *params.ExcludeZeroQuantity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceCurrency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceCurrency", runtime.ParamLocationQuery, *params.InvoiceCurrency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesRequest calls the generic PostInvoices builder with application/json body
func NewPostInvoicesRequest(server string, params *PostInvoicesParams, body PostInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostInvoicesRequestWithBody generates requests for PostInvoices with any type of body
func NewPostInvoicesRequestWithBody(server string, params *PostInvoicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesRenderSettingsRequest generates requests for GetInvoicesRenderSettings
func NewGetInvoicesRenderSettingsRequest(server string, params *GetInvoicesRenderSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/render-settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutInvoicesRenderSettingsByIdRequest calls the generic PutInvoicesRenderSettingsById builder with application/json body
func NewPutInvoicesRenderSettingsByIdRequest(server string, id string, params *PutInvoicesRenderSettingsByIdParams, body PutInvoicesRenderSettingsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesRenderSettingsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutInvoicesRenderSettingsByIdRequestWithBody generates requests for PutInvoicesRenderSettingsById with any type of body
func NewPutInvoicesRenderSettingsByIdRequestWithBody(server string, id string, params *PutInvoicesRenderSettingsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/render-settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteInvoicesByIdRequest generates requests for DeleteInvoicesById
func NewDeleteInvoicesByIdRequest(server string, id string, params *DeleteInvoicesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesByIdRequest generates requests for GetInvoicesById
func NewGetInvoicesByIdRequest(server string, id string, params *GetInvoicesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPatchInvoicesByIdRequest calls the generic PatchInvoicesById builder with application/json body
func NewPatchInvoicesByIdRequest(server string, id string, params *PatchInvoicesByIdParams, body PatchInvoicesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInvoicesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchInvoicesByIdRequestWithBody generates requests for PatchInvoicesById with any type of body
func NewPatchInvoicesByIdRequestWithBody(server string, id string, params *PatchInvoicesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutInvoicesByIdRequest calls the generic PutInvoicesById builder with application/json body
func NewPutInvoicesByIdRequest(server string, id string, params *PutInvoicesByIdParams, body PutInvoicesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutInvoicesByIdRequestWithBody generates requests for PutInvoicesById with any type of body
func NewPutInvoicesByIdRequestWithBody(server string, id string, params *PutInvoicesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesByIdDownloadRequest generates requests for GetInvoicesByIdDownload
func NewGetInvoicesByIdDownloadRequest(server string, id string, params *GetInvoicesByIdDownloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdDraftRequest generates requests for PostInvoicesByIdDraft
func NewPostInvoicesByIdDraftRequest(server string, id string, params *PostInvoicesByIdDraftParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/draft", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdFinalizeRequest generates requests for PostInvoicesByIdFinalize
func NewPostInvoicesByIdFinalizeRequest(server string, id string, params *PostInvoicesByIdFinalizeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/finalize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdFinalizeAndSendRequest generates requests for PostInvoicesByIdFinalizeAndSend
func NewPostInvoicesByIdFinalizeAndSendRequest(server string, id string, params *PostInvoicesByIdFinalizeAndSendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/finalize-and-send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutInvoicesByIdPaymentStatusRequest calls the generic PutInvoicesByIdPaymentStatus builder with application/json body
func NewPutInvoicesByIdPaymentStatusRequest(server string, id string, params *PutInvoicesByIdPaymentStatusParams, body PutInvoicesByIdPaymentStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesByIdPaymentStatusRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutInvoicesByIdPaymentStatusRequestWithBody generates requests for PutInvoicesByIdPaymentStatus with any type of body
func NewPutInvoicesByIdPaymentStatusRequestWithBody(server string, id string, params *PutInvoicesByIdPaymentStatusParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/payment-status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdSendRequest generates requests for PostInvoicesByIdSend
func NewPostInvoicesByIdSendRequest(server string, id string, params *PostInvoicesByIdSendParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdSendPaymentReminderRequest generates requests for PostInvoicesByIdSendPaymentReminder
func NewPostInvoicesByIdSendPaymentReminderRequest(server string, id string, params *PostInvoicesByIdSendPaymentReminderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/send-payment-reminder", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByIdVoidRequest generates requests for PostInvoicesByIdVoid
func NewPostInvoicesByIdVoidRequest(server string, id string, params *PostInvoicesByIdVoidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/void", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesByInvoiceLineItemGroupsRequest generates requests for GetInvoicesByInvoiceLineItemGroups
func NewGetInvoicesByInvoiceLineItemGroupsRequest(server string, invoice string, params *GetInvoicesByInvoiceLineItemGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-item-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByInvoiceLineItemGroupsRequest calls the generic PostInvoicesByInvoiceLineItemGroups builder with application/json body
func NewPostInvoicesByInvoiceLineItemGroupsRequest(server string, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, body PostInvoicesByInvoiceLineItemGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesByInvoiceLineItemGroupsRequestWithBody(server, invoice, params, "application/json", bodyReader)
}

// NewPostInvoicesByInvoiceLineItemGroupsRequestWithBody generates requests for PostInvoicesByInvoiceLineItemGroups with any type of body
func NewPostInvoicesByInvoiceLineItemGroupsRequestWithBody(server string, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-item-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteInvoicesByInvoiceLineItemGroupsByIdRequest generates requests for DeleteInvoicesByInvoiceLineItemGroupsById
func NewDeleteInvoicesByInvoiceLineItemGroupsByIdRequest(server string, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemGroupsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-item-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutInvoicesByInvoiceLineItemGroupsByIdRequest calls the generic PutInvoicesByInvoiceLineItemGroupsById builder with application/json body
func NewPutInvoicesByInvoiceLineItemGroupsByIdRequest(server string, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, body PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesByInvoiceLineItemGroupsByIdRequestWithBody(server, invoice, id, params, "application/json", bodyReader)
}

// NewPutInvoicesByInvoiceLineItemGroupsByIdRequestWithBody generates requests for PutInvoicesByInvoiceLineItemGroupsById with any type of body
func NewPutInvoicesByInvoiceLineItemGroupsByIdRequestWithBody(server string, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-item-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetInvoicesByInvoiceLineItemsRequest generates requests for GetInvoicesByInvoiceLineItems
func NewGetInvoicesByInvoiceLineItemsRequest(server string, invoice string, params *GetInvoicesByInvoiceLineItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostInvoicesByInvoiceLineItemsRequest calls the generic PostInvoicesByInvoiceLineItems builder with application/json body
func NewPostInvoicesByInvoiceLineItemsRequest(server string, invoice string, params *PostInvoicesByInvoiceLineItemsParams, body PostInvoicesByInvoiceLineItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesByInvoiceLineItemsRequestWithBody(server, invoice, params, "application/json", bodyReader)
}

// NewPostInvoicesByInvoiceLineItemsRequestWithBody generates requests for PostInvoicesByInvoiceLineItems with any type of body
func NewPostInvoicesByInvoiceLineItemsRequestWithBody(server string, invoice string, params *PostInvoicesByInvoiceLineItemsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteInvoicesByInvoiceLineItemsByIdRequest generates requests for DeleteInvoicesByInvoiceLineItemsById
func NewDeleteInvoicesByInvoiceLineItemsByIdRequest(server string, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutInvoicesByInvoiceLineItemsByIdRequest calls the generic PutInvoicesByInvoiceLineItemsById builder with application/json body
func NewPutInvoicesByInvoiceLineItemsByIdRequest(server string, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, body PutInvoicesByInvoiceLineItemsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoicesByInvoiceLineItemsByIdRequestWithBody(server, invoice, id, params, "application/json", bodyReader)
}

// NewPutInvoicesByInvoiceLineItemsByIdRequestWithBody generates requests for PutInvoicesByInvoiceLineItemsById with any type of body
func NewPutInvoicesByInvoiceLineItemsByIdRequestWithBody(server string, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invoice", runtime.ParamLocationPath, invoice)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/line-items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetListPricesRequest generates requests for GetListPrices
func NewGetListPricesRequest(server string, params *GetListPricesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list-prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Currency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, *params.Currency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingFrequency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billingFrequency", runtime.ParamLocationQuery, *params.BillingFrequency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostListPricesRequest calls the generic PostListPrices builder with application/json body
func NewPostListPricesRequest(server string, params *PostListPricesParams, body PostListPricesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostListPricesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostListPricesRequestWithBody generates requests for PostListPrices with any type of body
func NewPostListPricesRequestWithBody(server string, params *PostListPricesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list-prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetListPricesByIdRequest generates requests for GetListPricesById
func NewGetListPricesByIdRequest(server string, id string, params *GetListPricesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list-prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutListPricesByIdRequest calls the generic PutListPricesById builder with application/json body
func NewPutListPricesByIdRequest(server string, id string, params *PutListPricesByIdParams, body PutListPricesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutListPricesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutListPricesByIdRequestWithBody generates requests for PutListPricesById with any type of body
func NewPutListPricesByIdRequestWithBody(server string, id string, params *PutListPricesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list-prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostListPricesByIdArchiveRequest generates requests for PostListPricesByIdArchive
func NewPostListPricesByIdArchiveRequest(server string, id string, params *PostListPricesByIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/list-prices/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetNotificationsPoliciesRequest generates requests for GetNotificationsPolicies
func NewGetNotificationsPoliciesRequest(server string, params *GetNotificationsPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostNotificationsPoliciesRequest calls the generic PostNotificationsPolicies builder with application/json body
func NewPostNotificationsPoliciesRequest(server string, params *PostNotificationsPoliciesParams, body PostNotificationsPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotificationsPoliciesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostNotificationsPoliciesRequestWithBody generates requests for PostNotificationsPolicies with any type of body
func NewPostNotificationsPoliciesRequestWithBody(server string, params *PostNotificationsPoliciesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteNotificationsPoliciesByIdRequest generates requests for DeleteNotificationsPoliciesById
func NewDeleteNotificationsPoliciesByIdRequest(server string, id string, params *DeleteNotificationsPoliciesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetNotificationsPoliciesByIdRequest generates requests for GetNotificationsPoliciesById
func NewGetNotificationsPoliciesByIdRequest(server string, id string, params *GetNotificationsPoliciesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostNotificationsPoliciesByIdNotificationTypesRequest calls the generic PostNotificationsPoliciesByIdNotificationTypes builder with application/json body
func NewPostNotificationsPoliciesByIdNotificationTypesRequest(server string, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, body PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotificationsPoliciesByIdNotificationTypesRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostNotificationsPoliciesByIdNotificationTypesRequestWithBody generates requests for PostNotificationsPoliciesByIdNotificationTypes with any type of body
func NewPostNotificationsPoliciesByIdNotificationTypesRequestWithBody(server string, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s/notification-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteNotificationsPoliciesByIdNotificationTypesByTypeRequest generates requests for DeleteNotificationsPoliciesByIdNotificationTypesByType
func NewDeleteNotificationsPoliciesByIdNotificationTypesByTypeRequest(server string, id string, pType DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType, params *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s/notification-types/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostNotificationsPoliciesByIdRecipientsRequest calls the generic PostNotificationsPoliciesByIdRecipients builder with application/json body
func NewPostNotificationsPoliciesByIdRecipientsRequest(server string, id string, params *PostNotificationsPoliciesByIdRecipientsParams, body PostNotificationsPoliciesByIdRecipientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNotificationsPoliciesByIdRecipientsRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPostNotificationsPoliciesByIdRecipientsRequestWithBody generates requests for PostNotificationsPoliciesByIdRecipients with any type of body
func NewPostNotificationsPoliciesByIdRecipientsRequestWithBody(server string, id string, params *PostNotificationsPoliciesByIdRecipientsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s/recipients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteNotificationsPoliciesByIdRecipientsByRecipientRequest generates requests for DeleteNotificationsPoliciesByIdRecipientsByRecipient
func NewDeleteNotificationsPoliciesByIdRecipientsByRecipientRequest(server string, id string, recipient string, params *DeleteNotificationsPoliciesByIdRecipientsByRecipientParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipient", runtime.ParamLocationPath, recipient)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notifications/policies/%s/recipients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsRequest generates requests for GetPaymentsSettings
func NewGetPaymentsSettingsRequest(server string, params *GetPaymentsSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.SequenceVersion != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam0)
		}

	}

	return req, nil
}

// NewPostPaymentsSettingsBillingSchedulesRequest calls the generic PostPaymentsSettingsBillingSchedules builder with application/json body
func NewPostPaymentsSettingsBillingSchedulesRequest(server string, params *PostPaymentsSettingsBillingSchedulesParams, body PostPaymentsSettingsBillingSchedulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPaymentsSettingsBillingSchedulesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPaymentsSettingsBillingSchedulesRequestWithBody generates requests for PostPaymentsSettingsBillingSchedules with any type of body
func NewPostPaymentsSettingsBillingSchedulesRequestWithBody(server string, params *PostPaymentsSettingsBillingSchedulesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/billing-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdRequest generates requests for GetPaymentsSettingsBillingSchedulesForBillingScheduleById
func NewGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdRequest(server string, id string, params *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/billing-schedules/for-billing-schedule/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeletePaymentsSettingsBillingSchedulesByIdRequest generates requests for DeletePaymentsSettingsBillingSchedulesById
func NewDeletePaymentsSettingsBillingSchedulesByIdRequest(server string, id string, params *DeletePaymentsSettingsBillingSchedulesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/billing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsBillingSchedulesByIdRequest generates requests for GetPaymentsSettingsBillingSchedulesById
func NewGetPaymentsSettingsBillingSchedulesByIdRequest(server string, id string, params *GetPaymentsSettingsBillingSchedulesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/billing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutPaymentsSettingsBillingSchedulesByIdRequest calls the generic PutPaymentsSettingsBillingSchedulesById builder with application/json body
func NewPutPaymentsSettingsBillingSchedulesByIdRequest(server string, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, body PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPaymentsSettingsBillingSchedulesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPaymentsSettingsBillingSchedulesByIdRequestWithBody generates requests for PutPaymentsSettingsBillingSchedulesById with any type of body
func NewPutPaymentsSettingsBillingSchedulesByIdRequestWithBody(server string, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/billing-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostPaymentsSettingsCustomersRequest calls the generic PostPaymentsSettingsCustomers builder with application/json body
func NewPostPaymentsSettingsCustomersRequest(server string, params *PostPaymentsSettingsCustomersParams, body PostPaymentsSettingsCustomersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPaymentsSettingsCustomersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPaymentsSettingsCustomersRequestWithBody generates requests for PostPaymentsSettingsCustomers with any type of body
func NewPostPaymentsSettingsCustomersRequestWithBody(server string, params *PostPaymentsSettingsCustomersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeletePaymentsSettingsCustomersByIdRequest generates requests for DeletePaymentsSettingsCustomersById
func NewDeletePaymentsSettingsCustomersByIdRequest(server string, id string, params *DeletePaymentsSettingsCustomersByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsCustomersByIdRequest generates requests for GetPaymentsSettingsCustomersById
func NewGetPaymentsSettingsCustomersByIdRequest(server string, id string, params *GetPaymentsSettingsCustomersByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutPaymentsSettingsCustomersByIdRequest calls the generic PutPaymentsSettingsCustomersById builder with application/json body
func NewPutPaymentsSettingsCustomersByIdRequest(server string, id string, params *PutPaymentsSettingsCustomersByIdParams, body PutPaymentsSettingsCustomersByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPaymentsSettingsCustomersByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPaymentsSettingsCustomersByIdRequestWithBody generates requests for PutPaymentsSettingsCustomersById with any type of body
func NewPutPaymentsSettingsCustomersByIdRequestWithBody(server string, id string, params *PutPaymentsSettingsCustomersByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostPaymentsSettingsInvoicesRequest calls the generic PostPaymentsSettingsInvoices builder with application/json body
func NewPostPaymentsSettingsInvoicesRequest(server string, params *PostPaymentsSettingsInvoicesParams, body PostPaymentsSettingsInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPaymentsSettingsInvoicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPaymentsSettingsInvoicesRequestWithBody generates requests for PostPaymentsSettingsInvoices with any type of body
func NewPostPaymentsSettingsInvoicesRequestWithBody(server string, params *PostPaymentsSettingsInvoicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsInvoicesForInvoiceByIdRequest generates requests for GetPaymentsSettingsInvoicesForInvoiceById
func NewGetPaymentsSettingsInvoicesForInvoiceByIdRequest(server string, id string, params *GetPaymentsSettingsInvoicesForInvoiceByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/invoices/for-invoice/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeletePaymentsSettingsInvoicesByIdRequest generates requests for DeletePaymentsSettingsInvoicesById
func NewDeletePaymentsSettingsInvoicesByIdRequest(server string, id string, params *DeletePaymentsSettingsInvoicesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPaymentsSettingsInvoicesByIdRequest generates requests for GetPaymentsSettingsInvoicesById
func NewGetPaymentsSettingsInvoicesByIdRequest(server string, id string, params *GetPaymentsSettingsInvoicesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutPaymentsSettingsInvoicesByIdRequest calls the generic PutPaymentsSettingsInvoicesById builder with application/json body
func NewPutPaymentsSettingsInvoicesByIdRequest(server string, id string, params *PutPaymentsSettingsInvoicesByIdParams, body PutPaymentsSettingsInvoicesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPaymentsSettingsInvoicesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPaymentsSettingsInvoicesByIdRequestWithBody generates requests for PutPaymentsSettingsInvoicesById with any type of body
func NewPutPaymentsSettingsInvoicesByIdRequestWithBody(server string, id string, params *PutPaymentsSettingsInvoicesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutPaymentsSettingsByIdRequest calls the generic PutPaymentsSettingsById builder with application/json body
func NewPutPaymentsSettingsByIdRequest(server string, id string, params *PutPaymentsSettingsByIdParams, body PutPaymentsSettingsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPaymentsSettingsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPaymentsSettingsByIdRequestWithBody generates requests for PutPaymentsSettingsById with any type of body
func NewPutPaymentsSettingsByIdRequestWithBody(server string, id string, params *PutPaymentsSettingsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.SequenceVersion != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam0)
		}

	}

	return req, nil
}

// NewGetPricesRequest generates requests for GetPrices
func NewGetPricesRequest(server string, params *GetPricesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Currency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, *params.Currency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BillingFrequency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "billingFrequency", runtime.ParamLocationQuery, *params.BillingFrequency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostPricesRequest calls the generic PostPrices builder with application/json body
func NewPostPricesRequest(server string, params *PostPricesParams, body PostPricesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPricesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostPricesRequestWithBody generates requests for PostPrices with any type of body
func NewPostPricesRequestWithBody(server string, params *PostPricesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeletePricesByIdRequest generates requests for DeletePricesById
func NewDeletePricesByIdRequest(server string, id string, params *DeletePricesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetPricesByIdRequest generates requests for GetPricesById
func NewGetPricesByIdRequest(server string, id string, params *GetPricesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutPricesByIdRequest calls the generic PutPricesById builder with application/json body
func NewPutPricesByIdRequest(server string, id string, params *PutPricesByIdParams, body PutPricesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPricesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutPricesByIdRequestWithBody generates requests for PutPricesById with any type of body
func NewPutPricesByIdRequestWithBody(server string, id string, params *PutPricesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostProductsRequest calls the generic PostProducts builder with application/json body
func NewPostProductsRequest(server string, params *PostProductsParams, body PostProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProductsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostProductsRequestWithBody generates requests for PostProducts with any type of body
func NewPostProductsRequestWithBody(server string, params *PostProductsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetProductsByIdRequest generates requests for GetProductsById
func NewGetProductsByIdRequest(server string, id string, params *GetProductsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutProductsByIdRequest calls the generic PutProductsById builder with application/json body
func NewPutProductsByIdRequest(server string, id string, params *PutProductsByIdParams, body PutProductsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutProductsByIdRequestWithBody generates requests for PutProductsById with any type of body
func NewPutProductsByIdRequestWithBody(server string, id string, params *PutProductsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostProductsByIdArchiveRequest generates requests for PostProductsByIdArchive
func NewPostProductsByIdArchiveRequest(server string, id string, params *PostProductsByIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSeatBalancesRequest generates requests for GetSeatBalances
func NewGetSeatBalancesRequest(server string, params *GetSeatBalancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-balances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExcludeZeroQuantity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "excludeZeroQuantity", runtime.ParamLocationQuery, *params.ExcludeZeroQuantity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerAliases != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerAliases", runtime.ParamLocationQuery, *params.CustomerAliases); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSeatEventsRequest generates requests for GetSeatEvents
func NewGetSeatEventsRequest(server string, params *GetSeatEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerAlias", runtime.ParamLocationQuery, *params.CustomerAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SeatType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seatType", runtime.ParamLocationQuery, *params.SeatType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerEventId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerEventId", runtime.ParamLocationQuery, *params.CustomerEventId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventTimestampBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventTimestampBefore", runtime.ParamLocationQuery, *params.EventTimestampBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventTimestampAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventTimestampAfter", runtime.ParamLocationQuery, *params.EventTimestampAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostSeatEventsRequest calls the generic PostSeatEvents builder with application/json body
func NewPostSeatEventsRequest(server string, params *PostSeatEventsParams, body PostSeatEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSeatEventsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSeatEventsRequestWithBody generates requests for PostSeatEvents with any type of body
func NewPostSeatEventsRequestWithBody(server string, params *PostSeatEventsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSeatEventsByIdRequest generates requests for GetSeatEventsById
func NewGetSeatEventsByIdRequest(server string, id string, params *GetSeatEventsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSeatMetricsRequest generates requests for GetSeatMetrics
func NewGetSeatMetricsRequest(server string, params *GetSeatMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostSeatMetricsRequest calls the generic PostSeatMetrics builder with application/json body
func NewPostSeatMetricsRequest(server string, params *PostSeatMetricsParams, body PostSeatMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSeatMetricsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSeatMetricsRequestWithBody generates requests for PostSeatMetrics with any type of body
func NewPostSeatMetricsRequestWithBody(server string, params *PostSeatMetricsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteSeatMetricsByIdRequest generates requests for DeleteSeatMetricsById
func NewDeleteSeatMetricsByIdRequest(server string, id string, params *DeleteSeatMetricsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSeatMetricsByIdRequest generates requests for GetSeatMetricsById
func NewGetSeatMetricsByIdRequest(server string, id string, params *GetSeatMetricsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutSeatMetricsByIdRequest calls the generic PutSeatMetricsById builder with application/json body
func NewPutSeatMetricsByIdRequest(server string, id string, params *PutSeatMetricsByIdParams, body PutSeatMetricsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSeatMetricsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutSeatMetricsByIdRequestWithBody generates requests for PutSeatMetricsById with any type of body
func NewPutSeatMetricsByIdRequestWithBody(server string, id string, params *PutSeatMetricsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/seat-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSequenceAccountsRequest generates requests for GetSequenceAccounts
func NewGetSequenceAccountsRequest(server string, params *GetSequenceAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sequence-accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetSequenceAccountsByIdRequest generates requests for GetSequenceAccountsById
func NewGetSequenceAccountsByIdRequest(server string, id string, params *GetSequenceAccountsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sequence-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutSequenceAccountsByIdRequest calls the generic PutSequenceAccountsById builder with application/json body
func NewPutSequenceAccountsByIdRequest(server string, id string, params *PutSequenceAccountsByIdParams, body PutSequenceAccountsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSequenceAccountsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutSequenceAccountsByIdRequestWithBody generates requests for PutSequenceAccountsById with any type of body
func NewPutSequenceAccountsByIdRequestWithBody(server string, id string, params *PutSequenceAccountsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sequence-accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRatesRequest generates requests for GetTaxRates
func NewGetTaxRatesRequest(server string, params *GetTaxRatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostTaxRatesRequest calls the generic PostTaxRates builder with application/json body
func NewPostTaxRatesRequest(server string, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRatesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTaxRatesRequestWithBody generates requests for PostTaxRates with any type of body
func NewPostTaxRatesRequestWithBody(server string, params *PostTaxRatesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteTaxRatesByIdRequest generates requests for DeleteTaxRatesById
func NewDeleteTaxRatesByIdRequest(server string, id string, params *DeleteTaxRatesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRatesByIdRequest generates requests for GetTaxRatesById
func NewGetTaxRatesByIdRequest(server string, id string, params *GetTaxRatesByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutTaxRatesByIdRequest calls the generic PutTaxRatesById builder with application/json body
func NewPutTaxRatesByIdRequest(server string, id string, params *PutTaxRatesByIdParams, body PutTaxRatesByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaxRatesByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutTaxRatesByIdRequestWithBody generates requests for PutTaxRatesById with any type of body
func NewPutTaxRatesByIdRequestWithBody(server string, id string, params *PutTaxRatesByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.SequenceVersion != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam0)
		}

	}

	return req, nil
}

// NewPostTaxRatesByIdArchiveRequest generates requests for PostTaxRatesByIdArchive
func NewPostTaxRatesByIdArchiveRequest(server string, id string, params *PostTaxRatesByIdArchiveParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-rates/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRegistrationsRequest generates requests for GetTaxRegistrations
func NewGetTaxRegistrationsRequest(server string, params *GetTaxRegistrationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostTaxRegistrationsRequest calls the generic PostTaxRegistrations builder with application/json body
func NewPostTaxRegistrationsRequest(server string, params *PostTaxRegistrationsParams, body PostTaxRegistrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTaxRegistrationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTaxRegistrationsRequestWithBody generates requests for PostTaxRegistrations with any type of body
func NewPostTaxRegistrationsRequestWithBody(server string, params *PostTaxRegistrationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRegistrationsForCustomerByIdRequest generates requests for GetTaxRegistrationsForCustomerById
func NewGetTaxRegistrationsForCustomerByIdRequest(server string, id string, params *GetTaxRegistrationsForCustomerByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations/for-customer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRegistrationsForMerchantByIdRequest generates requests for GetTaxRegistrationsForMerchantById
func NewGetTaxRegistrationsForMerchantByIdRequest(server string, id string, params *GetTaxRegistrationsForMerchantByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations/for-merchant/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteTaxRegistrationsByIdRequest generates requests for DeleteTaxRegistrationsById
func NewDeleteTaxRegistrationsByIdRequest(server string, id string, params *DeleteTaxRegistrationsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetTaxRegistrationsByIdRequest generates requests for GetTaxRegistrationsById
func NewGetTaxRegistrationsByIdRequest(server string, id string, params *GetTaxRegistrationsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutTaxRegistrationsByIdRequest calls the generic PutTaxRegistrationsById builder with application/json body
func NewPutTaxRegistrationsByIdRequest(server string, id string, params *PutTaxRegistrationsByIdParams, body PutTaxRegistrationsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTaxRegistrationsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutTaxRegistrationsByIdRequestWithBody generates requests for PutTaxRegistrationsById with any type of body
func NewPutTaxRegistrationsByIdRequestWithBody(server string, id string, params *PutTaxRegistrationsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tax-registrations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsageEventsRequest generates requests for GetUsageEvents
func NewGetUsageEventsRequest(server string, params *GetUsageEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerAlias", runtime.ParamLocationQuery, *params.CustomerAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnmappedAliasesOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unmappedAliasesOnly", runtime.ParamLocationQuery, *params.UnmappedAliasesOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventType", runtime.ParamLocationQuery, *params.EventType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventId", runtime.ParamLocationQuery, *params.EventId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventTimestampBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventTimestampBefore", runtime.ParamLocationQuery, *params.EventTimestampBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EventTimestampAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "eventTimestampAfter", runtime.ParamLocationQuery, *params.EventTimestampAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostUsageEventsRequest calls the generic PostUsageEvents builder with application/json body
func NewPostUsageEventsRequest(server string, params *PostUsageEventsParams, body PostUsageEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsageEventsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUsageEventsRequestWithBody generates requests for PostUsageEvents with any type of body
func NewPostUsageEventsRequestWithBody(server string, params *PostUsageEventsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsageMetricsRequest generates requests for GetUsageMetrics
func NewGetUsageMetricsRequest(server string, params *GetUsageMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPostUsageMetricsRequest calls the generic PostUsageMetrics builder with application/json body
func NewPostUsageMetricsRequest(server string, params *PostUsageMetricsParams, body PostUsageMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsageMetricsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUsageMetricsRequestWithBody generates requests for PostUsageMetrics with any type of body
func NewPostUsageMetricsRequestWithBody(server string, params *PostUsageMetricsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteUsageMetricsByIdRequest generates requests for DeleteUsageMetricsById
func NewDeleteUsageMetricsByIdRequest(server string, id string, params *DeleteUsageMetricsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsageMetricsByIdRequest generates requests for GetUsageMetricsById
func NewGetUsageMetricsByIdRequest(server string, id string, params *GetUsageMetricsByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutUsageMetricsByIdRequest calls the generic PutUsageMetricsById builder with application/json body
func NewPutUsageMetricsByIdRequest(server string, id string, params *PutUsageMetricsByIdParams, body PutUsageMetricsByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsageMetricsByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutUsageMetricsByIdRequestWithBody generates requests for PutUsageMetricsById with any type of body
func NewPutUsageMetricsByIdRequestWithBody(server string, id string, params *PutUsageMetricsByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsageMetricsByUsageMetricIdCalculateRequest generates requests for GetUsageMetricsByUsageMetricIdCalculate
func NewGetUsageMetricsByUsageMetricIdCalculateRequest(server string, usageMetricId string, params *GetUsageMetricsByUsageMetricIdCalculateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "usageMetricId", runtime.ParamLocationPath, usageMetricId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage-metrics/%s/calculate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerAliases", runtime.ParamLocationQuery, params.CustomerAliases); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periodStart", runtime.ParamLocationQuery, params.PeriodStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periodEnd", runtime.ParamLocationQuery, params.PeriodEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.CustomParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customParameters", runtime.ParamLocationQuery, *params.CustomParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteUsersByIdRequest generates requests for DeleteUsersById
func NewDeleteUsersByIdRequest(server string, id string, params *DeleteUsersByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewGetUsersByIdRequest generates requests for GetUsersById
func NewGetUsersByIdRequest(server string, id string, params *GetUsersByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

// NewPutUsersByIdRequest calls the generic PutUsersById builder with application/json body
func NewPutUsersByIdRequest(server string, id string, params *PutUsersByIdParams, body PutUsersByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersByIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutUsersByIdRequestWithBody generates requests for PutUsersById with any type of body
func NewPutUsersByIdRequestWithBody(server string, id string, params *PutUsersByIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

		if params.SequenceVersion != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Sequence-Version", runtime.ParamLocationHeader, *params.SequenceVersion)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Sequence-Version", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBillingProductsWithResponse request
	GetBillingProductsWithResponse(ctx context.Context, params *GetBillingProductsParams, reqEditors ...RequestEditorFn) (*GetBillingProductsResponse, error)

	// GetBillingSchedulesWithResponse request
	GetBillingSchedulesWithResponse(ctx context.Context, params *GetBillingSchedulesParams, reqEditors ...RequestEditorFn) (*GetBillingSchedulesResponse, error)

	// PostBillingSchedulesWithBodyWithResponse request with any body
	PostBillingSchedulesWithBodyWithResponse(ctx context.Context, params *PostBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingSchedulesResponse, error)

	PostBillingSchedulesWithResponse(ctx context.Context, params *PostBillingSchedulesParams, body PostBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingSchedulesResponse, error)

	// PostBillingSchedulesValidateTaxesWithBodyWithResponse request with any body
	PostBillingSchedulesValidateTaxesWithBodyWithResponse(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingSchedulesValidateTaxesResponse, error)

	PostBillingSchedulesValidateTaxesWithResponse(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, body PostBillingSchedulesValidateTaxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingSchedulesValidateTaxesResponse, error)

	// GetBillingSchedulesByBillingScheduleIdWithResponse request
	GetBillingSchedulesByBillingScheduleIdWithResponse(ctx context.Context, billingScheduleId string, params *GetBillingSchedulesByBillingScheduleIdParams, reqEditors ...RequestEditorFn) (*GetBillingSchedulesByBillingScheduleIdResponse, error)

	// PutBillingSchedulesByBillingScheduleIdWithBodyWithResponse request with any body
	PutBillingSchedulesByBillingScheduleIdWithBodyWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdResponse, error)

	PutBillingSchedulesByBillingScheduleIdWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, body PutBillingSchedulesByBillingScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdResponse, error)

	// PutBillingSchedulesByBillingScheduleIdActivateWithResponse request
	PutBillingSchedulesByBillingScheduleIdActivateWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdActivateParams, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdActivateResponse, error)

	// PostBillingSchedulesByBillingScheduleIdArchiveWithResponse request
	PostBillingSchedulesByBillingScheduleIdArchiveWithResponse(ctx context.Context, billingScheduleId string, params *PostBillingSchedulesByBillingScheduleIdArchiveParams, reqEditors ...RequestEditorFn) (*PostBillingSchedulesByBillingScheduleIdArchiveResponse, error)

	// GetCreditNotesWithResponse request
	GetCreditNotesWithResponse(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*GetCreditNotesResponse, error)

	// PostCreditNotesWithBodyWithResponse request with any body
	PostCreditNotesWithBodyWithResponse(ctx context.Context, params *PostCreditNotesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesResponse, error)

	PostCreditNotesWithResponse(ctx context.Context, params *PostCreditNotesParams, body PostCreditNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesResponse, error)

	// GetCreditNotesByCreditnoteLineItemGroupsWithResponse request
	GetCreditNotesByCreditnoteLineItemGroupsWithResponse(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemGroupsParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByCreditnoteLineItemGroupsResponse, error)

	// PostCreditNotesByCreditnoteLineItemGroupsWithBodyWithResponse request with any body
	PostCreditNotesByCreditnoteLineItemGroupsWithBodyWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemGroupsResponse, error)

	PostCreditNotesByCreditnoteLineItemGroupsWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, body PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemGroupsResponse, error)

	// DeleteCreditNotesByCreditnoteLineItemGroupsByIdWithResponse request
	DeleteCreditNotesByCreditnoteLineItemGroupsByIdWithResponse(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse, error)

	// PutCreditNotesByCreditnoteLineItemGroupsByIdWithBodyWithResponse request with any body
	PutCreditNotesByCreditnoteLineItemGroupsByIdWithBodyWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemGroupsByIdResponse, error)

	PutCreditNotesByCreditnoteLineItemGroupsByIdWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, body PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemGroupsByIdResponse, error)

	// GetCreditNotesByCreditnoteLineItemsWithResponse request
	GetCreditNotesByCreditnoteLineItemsWithResponse(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemsParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByCreditnoteLineItemsResponse, error)

	// PostCreditNotesByCreditnoteLineItemsWithBodyWithResponse request with any body
	PostCreditNotesByCreditnoteLineItemsWithBodyWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemsResponse, error)

	PostCreditNotesByCreditnoteLineItemsWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, body PostCreditNotesByCreditnoteLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemsResponse, error)

	// DeleteCreditNotesByCreditnoteLineItemsByIdWithResponse request
	DeleteCreditNotesByCreditnoteLineItemsByIdWithResponse(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemsByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByCreditnoteLineItemsByIdResponse, error)

	// PutCreditNotesByCreditnoteLineItemsByIdWithBodyWithResponse request with any body
	PutCreditNotesByCreditnoteLineItemsByIdWithBodyWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemsByIdResponse, error)

	PutCreditNotesByCreditnoteLineItemsByIdWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, body PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemsByIdResponse, error)

	// DeleteCreditNotesByIdWithResponse request
	DeleteCreditNotesByIdWithResponse(ctx context.Context, id string, params *DeleteCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByIdResponse, error)

	// GetCreditNotesByIdWithResponse request
	GetCreditNotesByIdWithResponse(ctx context.Context, id string, params *GetCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByIdResponse, error)

	// PutCreditNotesByIdWithBodyWithResponse request with any body
	PutCreditNotesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCreditNotesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByIdResponse, error)

	PutCreditNotesByIdWithResponse(ctx context.Context, id string, params *PutCreditNotesByIdParams, body PutCreditNotesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByIdResponse, error)

	// GetCreditNotesByIdDownloadWithResponse request
	GetCreditNotesByIdDownloadWithResponse(ctx context.Context, id string, params *GetCreditNotesByIdDownloadParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByIdDownloadResponse, error)

	// PostCreditNotesByIdFinalizeWithResponse request
	PostCreditNotesByIdFinalizeWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdFinalizeResponse, error)

	// PostCreditNotesByIdFinalizeAndSendWithResponse request
	PostCreditNotesByIdFinalizeAndSendWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdFinalizeAndSendResponse, error)

	// PostCreditNotesByIdSendWithResponse request
	PostCreditNotesByIdSendWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdSendParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdSendResponse, error)

	// PostCreditNotesByIdVoidWithResponse request
	PostCreditNotesByIdVoidWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdVoidParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdVoidResponse, error)

	// GetCreditsWithResponse request
	GetCreditsWithResponse(ctx context.Context, params *GetCreditsParams, reqEditors ...RequestEditorFn) (*GetCreditsResponse, error)

	// PostCreditsWithBodyWithResponse request with any body
	PostCreditsWithBodyWithResponse(ctx context.Context, params *PostCreditsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditsResponse, error)

	PostCreditsWithResponse(ctx context.Context, params *PostCreditsParams, body PostCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditsResponse, error)

	// GetCreditsByCustomerIdBalancesWithResponse request
	GetCreditsByCustomerIdBalancesWithResponse(ctx context.Context, customerId string, params *GetCreditsByCustomerIdBalancesParams, reqEditors ...RequestEditorFn) (*GetCreditsByCustomerIdBalancesResponse, error)

	// GetCreditsByCustomerIdGrantsWithResponse request
	GetCreditsByCustomerIdGrantsWithResponse(ctx context.Context, customerId string, params *GetCreditsByCustomerIdGrantsParams, reqEditors ...RequestEditorFn) (*GetCreditsByCustomerIdGrantsResponse, error)

	// GetCreditsByIdWithResponse request
	GetCreditsByIdWithResponse(ctx context.Context, id string, params *GetCreditsByIdParams, reqEditors ...RequestEditorFn) (*GetCreditsByIdResponse, error)

	// GetCustomerAliasesWithResponse request
	GetCustomerAliasesWithResponse(ctx context.Context, params *GetCustomerAliasesParams, reqEditors ...RequestEditorFn) (*GetCustomerAliasesResponse, error)

	// PostCustomerAliasesWithBodyWithResponse request with any body
	PostCustomerAliasesWithBodyWithResponse(ctx context.Context, params *PostCustomerAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerAliasesResponse, error)

	PostCustomerAliasesWithResponse(ctx context.Context, params *PostCustomerAliasesParams, body PostCustomerAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerAliasesResponse, error)

	// DeleteCustomerAliasesByIdWithResponse request
	DeleteCustomerAliasesByIdWithResponse(ctx context.Context, id string, params *DeleteCustomerAliasesByIdParams, reqEditors ...RequestEditorFn) (*DeleteCustomerAliasesByIdResponse, error)

	// PutCustomerAliasesByIdWithBodyWithResponse request with any body
	PutCustomerAliasesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerAliasesByIdResponse, error)

	PutCustomerAliasesByIdWithResponse(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, body PutCustomerAliasesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerAliasesByIdResponse, error)

	// PostCustomerOrganizationsWithBodyWithResponse request with any body
	PostCustomerOrganizationsWithBodyWithResponse(ctx context.Context, params *PostCustomerOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsResponse, error)

	PostCustomerOrganizationsWithResponse(ctx context.Context, params *PostCustomerOrganizationsParams, body PostCustomerOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsResponse, error)

	// PostCustomerOrganizationsByIdMembersWithBodyWithResponse request with any body
	PostCustomerOrganizationsByIdMembersWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsByIdMembersResponse, error)

	PostCustomerOrganizationsByIdMembersWithResponse(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, body PostCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsByIdMembersResponse, error)

	// PutCustomerOrganizationsByIdMembersWithBodyWithResponse request with any body
	PutCustomerOrganizationsByIdMembersWithBodyWithResponse(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerOrganizationsByIdMembersResponse, error)

	PutCustomerOrganizationsByIdMembersWithResponse(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, body PutCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerOrganizationsByIdMembersResponse, error)

	// GetCustomersWithResponse request
	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error)

	// PostCustomersWithBodyWithResponse request with any body
	PostCustomersWithBodyWithResponse(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	PostCustomersWithResponse(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error)

	// GetCustomersByAliasByAliasWithResponse request
	GetCustomersByAliasByAliasWithResponse(ctx context.Context, alias string, params *GetCustomersByAliasByAliasParams, reqEditors ...RequestEditorFn) (*GetCustomersByAliasByAliasResponse, error)

	// GetCustomersByCustomerContactsWithResponse request
	GetCustomersByCustomerContactsWithResponse(ctx context.Context, customer string, params *GetCustomersByCustomerContactsParams, reqEditors ...RequestEditorFn) (*GetCustomersByCustomerContactsResponse, error)

	// PostCustomersByCustomerContactsWithBodyWithResponse request with any body
	PostCustomersByCustomerContactsWithBodyWithResponse(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsResponse, error)

	PostCustomersByCustomerContactsWithResponse(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, body PostCustomersByCustomerContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsResponse, error)

	// PutCustomersByCustomerContactsByIdWithBodyWithResponse request with any body
	PutCustomersByCustomerContactsByIdWithBodyWithResponse(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersByCustomerContactsByIdResponse, error)

	PutCustomersByCustomerContactsByIdWithResponse(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, body PutCustomersByCustomerContactsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersByCustomerContactsByIdResponse, error)

	// PostCustomersByCustomerContactsByIdArchiveWithResponse request
	PostCustomersByCustomerContactsByIdArchiveWithResponse(ctx context.Context, customer string, id string, params *PostCustomersByCustomerContactsByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsByIdArchiveResponse, error)

	// GetCustomersByIdWithResponse request
	GetCustomersByIdWithResponse(ctx context.Context, id string, params *GetCustomersByIdParams, reqEditors ...RequestEditorFn) (*GetCustomersByIdResponse, error)

	// PutCustomersByIdWithBodyWithResponse request with any body
	PutCustomersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersByIdResponse, error)

	PutCustomersByIdWithResponse(ctx context.Context, id string, params *PutCustomersByIdParams, body PutCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersByIdResponse, error)

	// GetCustomersByIdAliasesWithResponse request
	GetCustomersByIdAliasesWithResponse(ctx context.Context, id string, params *GetCustomersByIdAliasesParams, reqEditors ...RequestEditorFn) (*GetCustomersByIdAliasesResponse, error)

	// PostCustomersByIdArchiveWithResponse request
	PostCustomersByIdArchiveWithResponse(ctx context.Context, id string, params *PostCustomersByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostCustomersByIdArchiveResponse, error)

	// GetDiscountsWithResponse request
	GetDiscountsWithResponse(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error)

	// DeleteDiscountsByIdWithResponse request
	DeleteDiscountsByIdWithResponse(ctx context.Context, id string, params *DeleteDiscountsByIdParams, reqEditors ...RequestEditorFn) (*DeleteDiscountsByIdResponse, error)

	// GetDiscountsByIdWithResponse request
	GetDiscountsByIdWithResponse(ctx context.Context, id string, params *GetDiscountsByIdParams, reqEditors ...RequestEditorFn) (*GetDiscountsByIdResponse, error)

	// PutDiscountsByIdWithBodyWithResponse request with any body
	PutDiscountsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutDiscountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDiscountsByIdResponse, error)

	PutDiscountsByIdWithResponse(ctx context.Context, id string, params *PutDiscountsByIdParams, body PutDiscountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDiscountsByIdResponse, error)

	// GetInvoicesWithResponse request
	GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*GetInvoicesResponse, error)

	// PostInvoicesWithBodyWithResponse request with any body
	PostInvoicesWithBodyWithResponse(ctx context.Context, params *PostInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error)

	PostInvoicesWithResponse(ctx context.Context, params *PostInvoicesParams, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error)

	// GetInvoicesRenderSettingsWithResponse request
	GetInvoicesRenderSettingsWithResponse(ctx context.Context, params *GetInvoicesRenderSettingsParams, reqEditors ...RequestEditorFn) (*GetInvoicesRenderSettingsResponse, error)

	// PutInvoicesRenderSettingsByIdWithBodyWithResponse request with any body
	PutInvoicesRenderSettingsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesRenderSettingsByIdResponse, error)

	PutInvoicesRenderSettingsByIdWithResponse(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, body PutInvoicesRenderSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesRenderSettingsByIdResponse, error)

	// DeleteInvoicesByIdWithResponse request
	DeleteInvoicesByIdWithResponse(ctx context.Context, id string, params *DeleteInvoicesByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByIdResponse, error)

	// GetInvoicesByIdWithResponse request
	GetInvoicesByIdWithResponse(ctx context.Context, id string, params *GetInvoicesByIdParams, reqEditors ...RequestEditorFn) (*GetInvoicesByIdResponse, error)

	// PatchInvoicesByIdWithBodyWithResponse request with any body
	PatchInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PatchInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInvoicesByIdResponse, error)

	PatchInvoicesByIdWithResponse(ctx context.Context, id string, params *PatchInvoicesByIdParams, body PatchInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInvoicesByIdResponse, error)

	// PutInvoicesByIdWithBodyWithResponse request with any body
	PutInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByIdResponse, error)

	PutInvoicesByIdWithResponse(ctx context.Context, id string, params *PutInvoicesByIdParams, body PutInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByIdResponse, error)

	// GetInvoicesByIdDownloadWithResponse request
	GetInvoicesByIdDownloadWithResponse(ctx context.Context, id string, params *GetInvoicesByIdDownloadParams, reqEditors ...RequestEditorFn) (*GetInvoicesByIdDownloadResponse, error)

	// PostInvoicesByIdDraftWithResponse request
	PostInvoicesByIdDraftWithResponse(ctx context.Context, id string, params *PostInvoicesByIdDraftParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdDraftResponse, error)

	// PostInvoicesByIdFinalizeWithResponse request
	PostInvoicesByIdFinalizeWithResponse(ctx context.Context, id string, params *PostInvoicesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdFinalizeResponse, error)

	// PostInvoicesByIdFinalizeAndSendWithResponse request
	PostInvoicesByIdFinalizeAndSendWithResponse(ctx context.Context, id string, params *PostInvoicesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdFinalizeAndSendResponse, error)

	// PutInvoicesByIdPaymentStatusWithBodyWithResponse request with any body
	PutInvoicesByIdPaymentStatusWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByIdPaymentStatusResponse, error)

	PutInvoicesByIdPaymentStatusWithResponse(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, body PutInvoicesByIdPaymentStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByIdPaymentStatusResponse, error)

	// PostInvoicesByIdSendWithResponse request
	PostInvoicesByIdSendWithResponse(ctx context.Context, id string, params *PostInvoicesByIdSendParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdSendResponse, error)

	// PostInvoicesByIdSendPaymentReminderWithResponse request
	PostInvoicesByIdSendPaymentReminderWithResponse(ctx context.Context, id string, params *PostInvoicesByIdSendPaymentReminderParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdSendPaymentReminderResponse, error)

	// PostInvoicesByIdVoidWithResponse request
	PostInvoicesByIdVoidWithResponse(ctx context.Context, id string, params *PostInvoicesByIdVoidParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdVoidResponse, error)

	// GetInvoicesByInvoiceLineItemGroupsWithResponse request
	GetInvoicesByInvoiceLineItemGroupsWithResponse(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemGroupsParams, reqEditors ...RequestEditorFn) (*GetInvoicesByInvoiceLineItemGroupsResponse, error)

	// PostInvoicesByInvoiceLineItemGroupsWithBodyWithResponse request with any body
	PostInvoicesByInvoiceLineItemGroupsWithBodyWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemGroupsResponse, error)

	PostInvoicesByInvoiceLineItemGroupsWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, body PostInvoicesByInvoiceLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemGroupsResponse, error)

	// DeleteInvoicesByInvoiceLineItemGroupsByIdWithResponse request
	DeleteInvoicesByInvoiceLineItemGroupsByIdWithResponse(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByInvoiceLineItemGroupsByIdResponse, error)

	// PutInvoicesByInvoiceLineItemGroupsByIdWithBodyWithResponse request with any body
	PutInvoicesByInvoiceLineItemGroupsByIdWithBodyWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemGroupsByIdResponse, error)

	PutInvoicesByInvoiceLineItemGroupsByIdWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, body PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemGroupsByIdResponse, error)

	// GetInvoicesByInvoiceLineItemsWithResponse request
	GetInvoicesByInvoiceLineItemsWithResponse(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemsParams, reqEditors ...RequestEditorFn) (*GetInvoicesByInvoiceLineItemsResponse, error)

	// PostInvoicesByInvoiceLineItemsWithBodyWithResponse request with any body
	PostInvoicesByInvoiceLineItemsWithBodyWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemsResponse, error)

	PostInvoicesByInvoiceLineItemsWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, body PostInvoicesByInvoiceLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemsResponse, error)

	// DeleteInvoicesByInvoiceLineItemsByIdWithResponse request
	DeleteInvoicesByInvoiceLineItemsByIdWithResponse(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemsByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByInvoiceLineItemsByIdResponse, error)

	// PutInvoicesByInvoiceLineItemsByIdWithBodyWithResponse request with any body
	PutInvoicesByInvoiceLineItemsByIdWithBodyWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemsByIdResponse, error)

	PutInvoicesByInvoiceLineItemsByIdWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, body PutInvoicesByInvoiceLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemsByIdResponse, error)

	// GetListPricesWithResponse request
	GetListPricesWithResponse(ctx context.Context, params *GetListPricesParams, reqEditors ...RequestEditorFn) (*GetListPricesResponse, error)

	// PostListPricesWithBodyWithResponse request with any body
	PostListPricesWithBodyWithResponse(ctx context.Context, params *PostListPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListPricesResponse, error)

	PostListPricesWithResponse(ctx context.Context, params *PostListPricesParams, body PostListPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListPricesResponse, error)

	// GetListPricesByIdWithResponse request
	GetListPricesByIdWithResponse(ctx context.Context, id string, params *GetListPricesByIdParams, reqEditors ...RequestEditorFn) (*GetListPricesByIdResponse, error)

	// PutListPricesByIdWithBodyWithResponse request with any body
	PutListPricesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutListPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListPricesByIdResponse, error)

	PutListPricesByIdWithResponse(ctx context.Context, id string, params *PutListPricesByIdParams, body PutListPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListPricesByIdResponse, error)

	// PostListPricesByIdArchiveWithResponse request
	PostListPricesByIdArchiveWithResponse(ctx context.Context, id string, params *PostListPricesByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostListPricesByIdArchiveResponse, error)

	// GetNotificationsPoliciesWithResponse request
	GetNotificationsPoliciesWithResponse(ctx context.Context, params *GetNotificationsPoliciesParams, reqEditors ...RequestEditorFn) (*GetNotificationsPoliciesResponse, error)

	// PostNotificationsPoliciesWithBodyWithResponse request with any body
	PostNotificationsPoliciesWithBodyWithResponse(ctx context.Context, params *PostNotificationsPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesResponse, error)

	PostNotificationsPoliciesWithResponse(ctx context.Context, params *PostNotificationsPoliciesParams, body PostNotificationsPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesResponse, error)

	// DeleteNotificationsPoliciesByIdWithResponse request
	DeleteNotificationsPoliciesByIdWithResponse(ctx context.Context, id string, params *DeleteNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdResponse, error)

	// GetNotificationsPoliciesByIdWithResponse request
	GetNotificationsPoliciesByIdWithResponse(ctx context.Context, id string, params *GetNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*GetNotificationsPoliciesByIdResponse, error)

	// PostNotificationsPoliciesByIdNotificationTypesWithBodyWithResponse request with any body
	PostNotificationsPoliciesByIdNotificationTypesWithBodyWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdNotificationTypesResponse, error)

	PostNotificationsPoliciesByIdNotificationTypesWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, body PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdNotificationTypesResponse, error)

	// DeleteNotificationsPoliciesByIdNotificationTypesByTypeWithResponse request
	DeleteNotificationsPoliciesByIdNotificationTypesByTypeWithResponse(ctx context.Context, id string, pType DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType, params *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse, error)

	// PostNotificationsPoliciesByIdRecipientsWithBodyWithResponse request with any body
	PostNotificationsPoliciesByIdRecipientsWithBodyWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdRecipientsResponse, error)

	PostNotificationsPoliciesByIdRecipientsWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, body PostNotificationsPoliciesByIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdRecipientsResponse, error)

	// DeleteNotificationsPoliciesByIdRecipientsByRecipientWithResponse request
	DeleteNotificationsPoliciesByIdRecipientsByRecipientWithResponse(ctx context.Context, id string, recipient string, params *DeleteNotificationsPoliciesByIdRecipientsByRecipientParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse, error)

	// GetPaymentsSettingsWithResponse request
	GetPaymentsSettingsWithResponse(ctx context.Context, params *GetPaymentsSettingsParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsResponse, error)

	// PostPaymentsSettingsBillingSchedulesWithBodyWithResponse request with any body
	PostPaymentsSettingsBillingSchedulesWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsBillingSchedulesResponse, error)

	PostPaymentsSettingsBillingSchedulesWithResponse(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, body PostPaymentsSettingsBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsBillingSchedulesResponse, error)

	// GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdWithResponse request
	GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse, error)

	// DeletePaymentsSettingsBillingSchedulesByIdWithResponse request
	DeletePaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsBillingSchedulesByIdResponse, error)

	// GetPaymentsSettingsBillingSchedulesByIdWithResponse request
	GetPaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsBillingSchedulesByIdResponse, error)

	// PutPaymentsSettingsBillingSchedulesByIdWithBodyWithResponse request with any body
	PutPaymentsSettingsBillingSchedulesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsBillingSchedulesByIdResponse, error)

	PutPaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, body PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsBillingSchedulesByIdResponse, error)

	// PostPaymentsSettingsCustomersWithBodyWithResponse request with any body
	PostPaymentsSettingsCustomersWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsCustomersResponse, error)

	PostPaymentsSettingsCustomersWithResponse(ctx context.Context, params *PostPaymentsSettingsCustomersParams, body PostPaymentsSettingsCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsCustomersResponse, error)

	// DeletePaymentsSettingsCustomersByIdWithResponse request
	DeletePaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsCustomersByIdResponse, error)

	// GetPaymentsSettingsCustomersByIdWithResponse request
	GetPaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsCustomersByIdResponse, error)

	// PutPaymentsSettingsCustomersByIdWithBodyWithResponse request with any body
	PutPaymentsSettingsCustomersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsCustomersByIdResponse, error)

	PutPaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, body PutPaymentsSettingsCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsCustomersByIdResponse, error)

	// PostPaymentsSettingsInvoicesWithBodyWithResponse request with any body
	PostPaymentsSettingsInvoicesWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsInvoicesResponse, error)

	PostPaymentsSettingsInvoicesWithResponse(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, body PostPaymentsSettingsInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsInvoicesResponse, error)

	// GetPaymentsSettingsInvoicesForInvoiceByIdWithResponse request
	GetPaymentsSettingsInvoicesForInvoiceByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesForInvoiceByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsInvoicesForInvoiceByIdResponse, error)

	// DeletePaymentsSettingsInvoicesByIdWithResponse request
	DeletePaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsInvoicesByIdResponse, error)

	// GetPaymentsSettingsInvoicesByIdWithResponse request
	GetPaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsInvoicesByIdResponse, error)

	// PutPaymentsSettingsInvoicesByIdWithBodyWithResponse request with any body
	PutPaymentsSettingsInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsInvoicesByIdResponse, error)

	PutPaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, body PutPaymentsSettingsInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsInvoicesByIdResponse, error)

	// PutPaymentsSettingsByIdWithBodyWithResponse request with any body
	PutPaymentsSettingsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsByIdResponse, error)

	PutPaymentsSettingsByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, body PutPaymentsSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsByIdResponse, error)

	// GetPricesWithResponse request
	GetPricesWithResponse(ctx context.Context, params *GetPricesParams, reqEditors ...RequestEditorFn) (*GetPricesResponse, error)

	// PostPricesWithBodyWithResponse request with any body
	PostPricesWithBodyWithResponse(ctx context.Context, params *PostPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricesResponse, error)

	PostPricesWithResponse(ctx context.Context, params *PostPricesParams, body PostPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricesResponse, error)

	// DeletePricesByIdWithResponse request
	DeletePricesByIdWithResponse(ctx context.Context, id string, params *DeletePricesByIdParams, reqEditors ...RequestEditorFn) (*DeletePricesByIdResponse, error)

	// GetPricesByIdWithResponse request
	GetPricesByIdWithResponse(ctx context.Context, id string, params *GetPricesByIdParams, reqEditors ...RequestEditorFn) (*GetPricesByIdResponse, error)

	// PutPricesByIdWithBodyWithResponse request with any body
	PutPricesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPricesByIdResponse, error)

	PutPricesByIdWithResponse(ctx context.Context, id string, params *PutPricesByIdParams, body PutPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPricesByIdResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// PostProductsWithBodyWithResponse request with any body
	PostProductsWithBodyWithResponse(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	PostProductsWithResponse(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error)

	// GetProductsByIdWithResponse request
	GetProductsByIdWithResponse(ctx context.Context, id string, params *GetProductsByIdParams, reqEditors ...RequestEditorFn) (*GetProductsByIdResponse, error)

	// PutProductsByIdWithBodyWithResponse request with any body
	PutProductsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutProductsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsByIdResponse, error)

	PutProductsByIdWithResponse(ctx context.Context, id string, params *PutProductsByIdParams, body PutProductsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsByIdResponse, error)

	// PostProductsByIdArchiveWithResponse request
	PostProductsByIdArchiveWithResponse(ctx context.Context, id string, params *PostProductsByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostProductsByIdArchiveResponse, error)

	// GetSeatBalancesWithResponse request
	GetSeatBalancesWithResponse(ctx context.Context, params *GetSeatBalancesParams, reqEditors ...RequestEditorFn) (*GetSeatBalancesResponse, error)

	// GetSeatEventsWithResponse request
	GetSeatEventsWithResponse(ctx context.Context, params *GetSeatEventsParams, reqEditors ...RequestEditorFn) (*GetSeatEventsResponse, error)

	// PostSeatEventsWithBodyWithResponse request with any body
	PostSeatEventsWithBodyWithResponse(ctx context.Context, params *PostSeatEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSeatEventsResponse, error)

	PostSeatEventsWithResponse(ctx context.Context, params *PostSeatEventsParams, body PostSeatEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSeatEventsResponse, error)

	// GetSeatEventsByIdWithResponse request
	GetSeatEventsByIdWithResponse(ctx context.Context, id string, params *GetSeatEventsByIdParams, reqEditors ...RequestEditorFn) (*GetSeatEventsByIdResponse, error)

	// GetSeatMetricsWithResponse request
	GetSeatMetricsWithResponse(ctx context.Context, params *GetSeatMetricsParams, reqEditors ...RequestEditorFn) (*GetSeatMetricsResponse, error)

	// PostSeatMetricsWithBodyWithResponse request with any body
	PostSeatMetricsWithBodyWithResponse(ctx context.Context, params *PostSeatMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSeatMetricsResponse, error)

	PostSeatMetricsWithResponse(ctx context.Context, params *PostSeatMetricsParams, body PostSeatMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSeatMetricsResponse, error)

	// DeleteSeatMetricsByIdWithResponse request
	DeleteSeatMetricsByIdWithResponse(ctx context.Context, id string, params *DeleteSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*DeleteSeatMetricsByIdResponse, error)

	// GetSeatMetricsByIdWithResponse request
	GetSeatMetricsByIdWithResponse(ctx context.Context, id string, params *GetSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*GetSeatMetricsByIdResponse, error)

	// PutSeatMetricsByIdWithBodyWithResponse request with any body
	PutSeatMetricsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutSeatMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSeatMetricsByIdResponse, error)

	PutSeatMetricsByIdWithResponse(ctx context.Context, id string, params *PutSeatMetricsByIdParams, body PutSeatMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSeatMetricsByIdResponse, error)

	// GetSequenceAccountsWithResponse request
	GetSequenceAccountsWithResponse(ctx context.Context, params *GetSequenceAccountsParams, reqEditors ...RequestEditorFn) (*GetSequenceAccountsResponse, error)

	// GetSequenceAccountsByIdWithResponse request
	GetSequenceAccountsByIdWithResponse(ctx context.Context, id string, params *GetSequenceAccountsByIdParams, reqEditors ...RequestEditorFn) (*GetSequenceAccountsByIdResponse, error)

	// PutSequenceAccountsByIdWithBodyWithResponse request with any body
	PutSequenceAccountsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSequenceAccountsByIdResponse, error)

	PutSequenceAccountsByIdWithResponse(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, body PutSequenceAccountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSequenceAccountsByIdResponse, error)

	// GetTaxRatesWithResponse request
	GetTaxRatesWithResponse(ctx context.Context, params *GetTaxRatesParams, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error)

	// PostTaxRatesWithBodyWithResponse request with any body
	PostTaxRatesWithBodyWithResponse(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error)

	PostTaxRatesWithResponse(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error)

	// DeleteTaxRatesByIdWithResponse request
	DeleteTaxRatesByIdWithResponse(ctx context.Context, id string, params *DeleteTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*DeleteTaxRatesByIdResponse, error)

	// GetTaxRatesByIdWithResponse request
	GetTaxRatesByIdWithResponse(ctx context.Context, id string, params *GetTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRatesByIdResponse, error)

	// PutTaxRatesByIdWithBodyWithResponse request with any body
	PutTaxRatesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutTaxRatesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxRatesByIdResponse, error)

	PutTaxRatesByIdWithResponse(ctx context.Context, id string, params *PutTaxRatesByIdParams, body PutTaxRatesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxRatesByIdResponse, error)

	// PostTaxRatesByIdArchiveWithResponse request
	PostTaxRatesByIdArchiveWithResponse(ctx context.Context, id string, params *PostTaxRatesByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostTaxRatesByIdArchiveResponse, error)

	// GetTaxRegistrationsWithResponse request
	GetTaxRegistrationsWithResponse(ctx context.Context, params *GetTaxRegistrationsParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsResponse, error)

	// PostTaxRegistrationsWithBodyWithResponse request with any body
	PostTaxRegistrationsWithBodyWithResponse(ctx context.Context, params *PostTaxRegistrationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRegistrationsResponse, error)

	PostTaxRegistrationsWithResponse(ctx context.Context, params *PostTaxRegistrationsParams, body PostTaxRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRegistrationsResponse, error)

	// GetTaxRegistrationsForCustomerByIdWithResponse request
	GetTaxRegistrationsForCustomerByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsForCustomerByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsForCustomerByIdResponse, error)

	// GetTaxRegistrationsForMerchantByIdWithResponse request
	GetTaxRegistrationsForMerchantByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsForMerchantByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsForMerchantByIdResponse, error)

	// DeleteTaxRegistrationsByIdWithResponse request
	DeleteTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *DeleteTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*DeleteTaxRegistrationsByIdResponse, error)

	// GetTaxRegistrationsByIdWithResponse request
	GetTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsByIdResponse, error)

	// PutTaxRegistrationsByIdWithBodyWithResponse request with any body
	PutTaxRegistrationsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxRegistrationsByIdResponse, error)

	PutTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, body PutTaxRegistrationsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxRegistrationsByIdResponse, error)

	// GetUsageEventsWithResponse request
	GetUsageEventsWithResponse(ctx context.Context, params *GetUsageEventsParams, reqEditors ...RequestEditorFn) (*GetUsageEventsResponse, error)

	// PostUsageEventsWithBodyWithResponse request with any body
	PostUsageEventsWithBodyWithResponse(ctx context.Context, params *PostUsageEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsageEventsResponse, error)

	PostUsageEventsWithResponse(ctx context.Context, params *PostUsageEventsParams, body PostUsageEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsageEventsResponse, error)

	// GetUsageMetricsWithResponse request
	GetUsageMetricsWithResponse(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsResponse, error)

	// PostUsageMetricsWithBodyWithResponse request with any body
	PostUsageMetricsWithBodyWithResponse(ctx context.Context, params *PostUsageMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsageMetricsResponse, error)

	PostUsageMetricsWithResponse(ctx context.Context, params *PostUsageMetricsParams, body PostUsageMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsageMetricsResponse, error)

	// DeleteUsageMetricsByIdWithResponse request
	DeleteUsageMetricsByIdWithResponse(ctx context.Context, id string, params *DeleteUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*DeleteUsageMetricsByIdResponse, error)

	// GetUsageMetricsByIdWithResponse request
	GetUsageMetricsByIdWithResponse(ctx context.Context, id string, params *GetUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsByIdResponse, error)

	// PutUsageMetricsByIdWithBodyWithResponse request with any body
	PutUsageMetricsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutUsageMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsageMetricsByIdResponse, error)

	PutUsageMetricsByIdWithResponse(ctx context.Context, id string, params *PutUsageMetricsByIdParams, body PutUsageMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsageMetricsByIdResponse, error)

	// GetUsageMetricsByUsageMetricIdCalculateWithResponse request
	GetUsageMetricsByUsageMetricIdCalculateWithResponse(ctx context.Context, usageMetricId string, params *GetUsageMetricsByUsageMetricIdCalculateParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsByUsageMetricIdCalculateResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// DeleteUsersByIdWithResponse request
	DeleteUsersByIdWithResponse(ctx context.Context, id string, params *DeleteUsersByIdParams, reqEditors ...RequestEditorFn) (*DeleteUsersByIdResponse, error)

	// GetUsersByIdWithResponse request
	GetUsersByIdWithResponse(ctx context.Context, id string, params *GetUsersByIdParams, reqEditors ...RequestEditorFn) (*GetUsersByIdResponse, error)

	// PutUsersByIdWithBodyWithResponse request with any body
	PutUsersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutUsersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersByIdResponse, error)

	PutUsersByIdWithResponse(ctx context.Context, id string, params *PutUsersByIdParams, body PutUsersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersByIdResponse, error)
}

type GetBillingProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBillingProductsEndpointListProductResponsePaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetBillingProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListBillingSchedulesResponse
}

// Status returns HTTPResponse.Status
func (r GetBillingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BillingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r PostBillingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingSchedulesValidateTaxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBillingSchedulesValidateTaxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingSchedulesValidateTaxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingSchedulesByBillingScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r GetBillingSchedulesByBillingScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingSchedulesByBillingScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingSchedulesByBillingScheduleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r PutBillingSchedulesByBillingScheduleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingSchedulesByBillingScheduleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBillingSchedulesByBillingScheduleIdActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r PutBillingSchedulesByBillingScheduleIdActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBillingSchedulesByBillingScheduleIdActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBillingSchedulesByBillingScheduleIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleResponse
}

// Status returns HTTPResponse.Status
func (r PostBillingSchedulesByBillingScheduleIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBillingSchedulesByBillingScheduleIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCreditNoteEndpointProductListCreditNotePaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesByCreditnoteLineItemGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesByCreditnoteLineItemGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesByCreditnoteLineItemGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByCreditnoteLineItemGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCreditNoteLineItemGroupEndpointProductCreateCreditNoteLineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByCreditnoteLineItemGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByCreditnoteLineItemGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCreditNoteLineItemGroupEndpointProductDeleteCreditNoteLineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCreditNotesByCreditnoteLineItemGroupsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCreditNoteLineItemGroupEndpointProductUpdateCreditNoteLineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCreditNotesByCreditnoteLineItemGroupsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCreditNotesByCreditnoteLineItemGroupsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesByCreditnoteLineItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCreditNoteLineItemEndpointProductListCreditNoteLineItemPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesByCreditnoteLineItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesByCreditnoteLineItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByCreditnoteLineItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCreditNoteLineItemEndpointProductCreateCreditNoteLineItemResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByCreditnoteLineItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByCreditnoteLineItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCreditNotesByCreditnoteLineItemsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCreditNoteLineItemEndpointProductDeleteCreditNoteLineItemResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteCreditNotesByCreditnoteLineItemsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCreditNotesByCreditnoteLineItemsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCreditNotesByCreditnoteLineItemsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCreditNoteLineItemEndpointProductUpdateCreditNoteLineItemResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCreditNotesByCreditnoteLineItemsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCreditNotesByCreditnoteLineItemsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCreditNotesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r DeleteCreditNotesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCreditNotesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCreditNotesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PutCreditNotesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCreditNotesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditNotesByIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCreditNotesByIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditNotesByIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByIdFinalizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByIdFinalizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByIdFinalizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByIdFinalizeAndSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByIdFinalizeAndSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByIdFinalizeAndSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByIdSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByIdSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByIdSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditNotesByIdVoidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditNote
}

// Status returns HTTPResponse.Status
func (r PostCreditNotesByIdVoidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditNotesByIdVoidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCreditGrantEndpointResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCreditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCreditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCreditGrantEndpointProductCreateCreditGrantResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCreditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCreditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditsByCustomerIdBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditBalancesReply
}

// Status returns HTTPResponse.Status
func (r GetCreditsByCustomerIdBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditsByCustomerIdBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditsByCustomerIdGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCreditGrantsForCustomerEndpointCreditGrantsResponse
}

// Status returns HTTPResponse.Status
func (r GetCreditsByCustomerIdGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditsByCustomerIdGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCreditsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreditGrant
}

// Status returns HTTPResponse.Status
func (r GetCreditsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCreditsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCustomerAliasEndpointProductListCustomerAliasPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCustomerAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCustomerAliasEndpointProductCreateCustomerAliasResponseModel
}

// Status returns HTTPResponse.Status
func (r PostCustomerAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomerAliasesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCustomerAliasEndpointProductDeleteCustomerAliasResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteCustomerAliasesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomerAliasesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerAliasesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCustomerAliasEndpointProductUpdateCustomerAliasResponseModel
}

// Status returns HTTPResponse.Status
func (r PutCustomerAliasesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerAliasesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CustomerOrganization
}

// Status returns HTTPResponse.Status
func (r PostCustomerOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerOrganizationsByIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerOrganization
}

// Status returns HTTPResponse.Status
func (r PostCustomerOrganizationsByIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerOrganizationsByIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerOrganizationsByIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerOrganization
}

// Status returns HTTPResponse.Status
func (r PutCustomerOrganizationsByIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerOrganizationsByIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCustomerResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Customer
}

// Status returns HTTPResponse.Status
func (r PostCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersByAliasByAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer20240509
}

// Status returns HTTPResponse.Status
func (r GetCustomersByAliasByAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersByAliasByAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersByCustomerContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListContactEndpointContactResponseModel
}

// Status returns HTTPResponse.Status
func (r GetCustomersByCustomerContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersByCustomerContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersByCustomerContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Contact
}

// Status returns HTTPResponse.Status
func (r PostCustomersByCustomerContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersByCustomerContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersByCustomerContactsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r PutCustomersByCustomerContactsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersByCustomerContactsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersByCustomerContactsByIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contact
}

// Status returns HTTPResponse.Status
func (r PostCustomersByCustomerContactsByIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersByCustomerContactsByIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
}

// Status returns HTTPResponse.Status
func (r GetCustomersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
}

// Status returns HTTPResponse.Status
func (r PutCustomersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersByIdAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCustomerAliasesEndpointEndpointResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomersByIdAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersByIdAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomersByIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
}

// Status returns HTTPResponse.Status
func (r PostCustomersByIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomersByIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiscountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListDiscountEndpointProductListDiscountPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDiscountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDiscountsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteDiscountEndpointProductDeleteDiscountResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteDiscountsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDiscountsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDiscountsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetDiscountEndpointProductGetDiscountResponseModel
}

// Status returns HTTPResponse.Status
func (r GetDiscountsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscountsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDiscountsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateDiscountEndpointProductUpdateDiscountResponseModel
}

// Status returns HTTPResponse.Status
func (r PutDiscountsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDiscountsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListInvoiceEndpointListInvoicePaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesRenderSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrCreateInvoiceRenderSettingsEndpointProductCreateInvoiceRenderSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInvoicesRenderSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesRenderSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesRenderSettingsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateInvoiceRenderSettingsEndpointProductUpdateInvoiceRenderSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r PutInvoicesRenderSettingsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesRenderSettingsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteInvoiceEndpointProductDeleteInvoiceResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInvoiceEndpointProductGetInvoiceResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PatchInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PutInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesByIdDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetInvoicesByIdDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesByIdDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdDraftResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdDraftResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdDraftResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdFinalizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdFinalizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdFinalizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdFinalizeAndSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdFinalizeAndSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdFinalizeAndSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesByIdPaymentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PutInvoicesByIdPaymentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesByIdPaymentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdSendPaymentReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdSendPaymentReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdSendPaymentReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByIdVoidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByIdVoidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByIdVoidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesByInvoiceLineItemGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLineItemGroupEndpointProductListLineItemGroupPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInvoicesByInvoiceLineItemGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesByInvoiceLineItemGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByInvoiceLineItemGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByInvoiceLineItemGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByInvoiceLineItemGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesByInvoiceLineItemGroupsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesByInvoiceLineItemGroupsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesByInvoiceLineItemGroupsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesByInvoiceLineItemGroupsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LineItemGroupResponseModel
}

// Status returns HTTPResponse.Status
func (r PutInvoicesByInvoiceLineItemGroupsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesByInvoiceLineItemGroupsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesByInvoiceLineItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListLineItemEndpointPaginatedLineItemResponseModel
}

// Status returns HTTPResponse.Status
func (r GetInvoicesByInvoiceLineItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesByInvoiceLineItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesByInvoiceLineItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Stable20240101LineItemResponse
}

// Status returns HTTPResponse.Status
func (r PostInvoicesByInvoiceLineItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesByInvoiceLineItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesByInvoiceLineItemsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240101LineItemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesByInvoiceLineItemsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesByInvoiceLineItemsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoicesByInvoiceLineItemsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240101LineItemResponse
}

// Status returns HTTPResponse.Status
func (r PutInvoicesByInvoiceLineItemsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoicesByInvoiceLineItemsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListPricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetListPricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListPricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListPricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostListPricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListPricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetListPricesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetListPricesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetListPricesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutListPricesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PutListPricesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutListPricesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostListPricesByIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostListPricesByIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostListPricesByIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationsPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicies
}

// Status returns HTTPResponse.Status
func (r GetNotificationsPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationsPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotificationsPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NotificationPolicy
	JSON400      *DatabaseErrors
}

// Status returns HTTPResponse.Status
func (r PostNotificationsPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotificationsPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsPoliciesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsPoliciesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsPoliciesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationsPoliciesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
}

// Status returns HTTPResponse.Status
func (r GetNotificationsPoliciesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationsPoliciesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotificationsPoliciesByIdNotificationTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
	JSON400      *DatabaseErrors
}

// Status returns HTTPResponse.Status
func (r PostNotificationsPoliciesByIdNotificationTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotificationsPoliciesByIdNotificationTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
	JSON400      *DatabaseErrors
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNotificationsPoliciesByIdRecipientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
	JSON400      *DatabaseErrors
}

// Status returns HTTPResponse.Status
func (r PostNotificationsPoliciesByIdRecipientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNotificationsPoliciesByIdRecipientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationPolicy
	JSON400      *DatabaseErrors
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountPaymentSettings
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsSettingsBillingSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BillingScheduleSettings
}

// Status returns HTTPResponse.Status
func (r PostPaymentsSettingsBillingSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsSettingsBillingSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleSettings
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePaymentsSettingsBillingSchedulesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleSettings
}

// Status returns HTTPResponse.Status
func (r DeletePaymentsSettingsBillingSchedulesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePaymentsSettingsBillingSchedulesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsBillingSchedulesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleSettings
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsBillingSchedulesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsBillingSchedulesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPaymentsSettingsBillingSchedulesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingScheduleSettings
}

// Status returns HTTPResponse.Status
func (r PutPaymentsSettingsBillingSchedulesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPaymentsSettingsBillingSchedulesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsSettingsCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateCustomerSettingsEndpointProductCreateCustomerSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPaymentsSettingsCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsSettingsCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePaymentsSettingsCustomersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCustomerSettingsEndpointProductDeleteCustomerSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r DeletePaymentsSettingsCustomersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePaymentsSettingsCustomersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsCustomersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetCustomerSettingsEndpointProductGetCustomerSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsCustomersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsCustomersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPaymentsSettingsCustomersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCustomerSettingsEndpointProductUpdateCustomerSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPaymentsSettingsCustomersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPaymentsSettingsCustomersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsSettingsInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateInvoiceSettingsEndpointProductCreateInvoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r PostPaymentsSettingsInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsSettingsInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsInvoicesForInvoiceByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetByInvoiceIdProductGetInvoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsInvoicesForInvoiceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsInvoicesForInvoiceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePaymentsSettingsInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteInvoiceSettingsEndpointProductDeleteInvoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r DeletePaymentsSettingsInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePaymentsSettingsInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsSettingsInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetInvoiceSettingsEndpointProductGetInvoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r GetPaymentsSettingsInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsSettingsInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPaymentsSettingsInvoicesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateInvoiceSettingsEndpointProductUpdateInvoiceSettingsResponseModel
}

// Status returns HTTPResponse.Status
func (r PutPaymentsSettingsInvoicesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPaymentsSettingsInvoicesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPaymentsSettingsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountPaymentSettings
}

// Status returns HTTPResponse.Status
func (r PutPaymentsSettingsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPaymentsSettingsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPricesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPricesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPricesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePricesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r DeletePricesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePricesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPricesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPricesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPricesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPricesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PutPricesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPricesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240509ListResponseModel
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Stable20240509ProductResponse
}

// Status returns HTTPResponse.Status
func (r PostProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240509ProductResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProductsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240509ProductResponse
}

// Status returns HTTPResponse.Status
func (r PutProductsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProductsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProductsByIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stable20240509ProductResponse
}

// Status returns HTTPResponse.Status
func (r PostProductsByIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProductsByIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeatBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCustomerSeatBalancesEndpointListCustomerSeatBalancesPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSeatBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeatBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeatEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSeatEventsEndpointEndpointResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSeatEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeatEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSeatEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateSeatEventEndpointProductCreateSeatEventResponseModel
}

// Status returns HTTPResponse.Status
func (r PostSeatEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSeatEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeatEventsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeatEvent
}

// Status returns HTTPResponse.Status
func (r GetSeatEventsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeatEventsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeatMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSeatMetricEndpointProductListSeatMetricPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSeatMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeatMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSeatMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SeatMetric
}

// Status returns HTTPResponse.Status
func (r PostSeatMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSeatMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSeatMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeatMetric
}

// Status returns HTTPResponse.Status
func (r DeleteSeatMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSeatMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeatMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetSeatMetricEndpointProductGetSeatMetricResponseModel
}

// Status returns HTTPResponse.Status
func (r GetSeatMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeatMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSeatMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeatMetric
}

// Status returns HTTPResponse.Status
func (r PutSeatMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSeatMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSequenceAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSequenceAccountsResponse
}

// Status returns HTTPResponse.Status
func (r GetSequenceAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSequenceAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSequenceAccountsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SequenceAccount
}

// Status returns HTTPResponse.Status
func (r GetSequenceAccountsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSequenceAccountsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSequenceAccountsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SequenceAccount
}

// Status returns HTTPResponse.Status
func (r PutSequenceAccountsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSequenceAccountsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TaxRateResponse
}

// Status returns HTTPResponse.Status
func (r PostTaxRatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxRatesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRateResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTaxRatesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxRatesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRatesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRateResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxRatesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRatesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaxRatesByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxRateResponse
}

// Status returns HTTPResponse.Status
func (r PutTaxRatesByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaxRatesByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRatesByIdArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchiveTaxRateEndpointProductArchiveTaxRateResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTaxRatesByIdArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRatesByIdArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegistrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTaxRegistrationEndpointProductListTaxRegistrationPaginatedResponseModel
}

// Status returns HTTPResponse.Status
func (r GetTaxRegistrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegistrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTaxRegistrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateTaxRegistrationEndpointProductCreateTaxRegistrationResponseModel
}

// Status returns HTTPResponse.Status
func (r PostTaxRegistrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTaxRegistrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegistrationsForCustomerByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaxRegistrationForCustomerProductResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxRegistrationsForCustomerByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegistrationsForCustomerByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegistrationsForMerchantByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaxRegistrationForMerchantProductResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxRegistrationsForMerchantByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegistrationsForMerchantByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaxRegistrationsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteTaxRegistrationEndpointProductDeleteTaxRegistrationResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteTaxRegistrationsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaxRegistrationsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxRegistrationsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaxRegistrationEndpointProductGetTaxRegistrationResponseModel
}

// Status returns HTTPResponse.Status
func (r GetTaxRegistrationsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxRegistrationsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTaxRegistrationsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateTaxRegistrationEndpointProductUpdateTaxRegistrationResponseModel
}

// Status returns HTTPResponse.Status
func (r PutTaxRegistrationsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTaxRegistrationsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListUsageEventEndpointEndpointResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUsageEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsageEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUsageEventEndpointProductCreateUsageEventResponseModel
}

// Status returns HTTPResponse.Status
func (r PostUsageEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsageEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListUsageMetricEndpointProductResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUsageMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsageMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateUsageMetricEndpointProductCreateUsageMetricResponseModel
}

// Status returns HTTPResponse.Status
func (r PostUsageMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsageMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsageMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteUsageMetricEndpointProductDeleteUsageMetricResponseModel
}

// Status returns HTTPResponse.Status
func (r DeleteUsageMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsageMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetUsageMetricEndpointProductGetUsageMetricResponseModel
}

// Status returns HTTPResponse.Status
func (r GetUsageMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsageMetricsByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateUsageMetricEndpointProductUpdateUsageMetricResponseModel
}

// Status returns HTTPResponse.Status
func (r PutUsageMetricsByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsageMetricsByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageMetricsByUsageMetricIdCalculateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UsageMetricCalculationResponse
}

// Status returns HTTPResponse.Status
func (r GetUsageMetricsByUsageMetricIdCalculateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageMetricsByUsageMetricIdCalculateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListSequenceUsersResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SequenceUserResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUsersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SequenceUserResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateSequenceUserResponse
}

// Status returns HTTPResponse.Status
func (r PutUsersByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBillingProductsWithResponse request returning *GetBillingProductsResponse
func (c *ClientWithResponses) GetBillingProductsWithResponse(ctx context.Context, params *GetBillingProductsParams, reqEditors ...RequestEditorFn) (*GetBillingProductsResponse, error) {
	rsp, err := c.GetBillingProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingProductsResponse(rsp)
}

// GetBillingSchedulesWithResponse request returning *GetBillingSchedulesResponse
func (c *ClientWithResponses) GetBillingSchedulesWithResponse(ctx context.Context, params *GetBillingSchedulesParams, reqEditors ...RequestEditorFn) (*GetBillingSchedulesResponse, error) {
	rsp, err := c.GetBillingSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingSchedulesResponse(rsp)
}

// PostBillingSchedulesWithBodyWithResponse request with arbitrary body returning *PostBillingSchedulesResponse
func (c *ClientWithResponses) PostBillingSchedulesWithBodyWithResponse(ctx context.Context, params *PostBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingSchedulesResponse, error) {
	rsp, err := c.PostBillingSchedulesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PostBillingSchedulesWithResponse(ctx context.Context, params *PostBillingSchedulesParams, body PostBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingSchedulesResponse, error) {
	rsp, err := c.PostBillingSchedules(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingSchedulesResponse(rsp)
}

// PostBillingSchedulesValidateTaxesWithBodyWithResponse request with arbitrary body returning *PostBillingSchedulesValidateTaxesResponse
func (c *ClientWithResponses) PostBillingSchedulesValidateTaxesWithBodyWithResponse(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBillingSchedulesValidateTaxesResponse, error) {
	rsp, err := c.PostBillingSchedulesValidateTaxesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingSchedulesValidateTaxesResponse(rsp)
}

func (c *ClientWithResponses) PostBillingSchedulesValidateTaxesWithResponse(ctx context.Context, params *PostBillingSchedulesValidateTaxesParams, body PostBillingSchedulesValidateTaxesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBillingSchedulesValidateTaxesResponse, error) {
	rsp, err := c.PostBillingSchedulesValidateTaxes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingSchedulesValidateTaxesResponse(rsp)
}

// GetBillingSchedulesByBillingScheduleIdWithResponse request returning *GetBillingSchedulesByBillingScheduleIdResponse
func (c *ClientWithResponses) GetBillingSchedulesByBillingScheduleIdWithResponse(ctx context.Context, billingScheduleId string, params *GetBillingSchedulesByBillingScheduleIdParams, reqEditors ...RequestEditorFn) (*GetBillingSchedulesByBillingScheduleIdResponse, error) {
	rsp, err := c.GetBillingSchedulesByBillingScheduleId(ctx, billingScheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingSchedulesByBillingScheduleIdResponse(rsp)
}

// PutBillingSchedulesByBillingScheduleIdWithBodyWithResponse request with arbitrary body returning *PutBillingSchedulesByBillingScheduleIdResponse
func (c *ClientWithResponses) PutBillingSchedulesByBillingScheduleIdWithBodyWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdResponse, error) {
	rsp, err := c.PutBillingSchedulesByBillingScheduleIdWithBody(ctx, billingScheduleId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingSchedulesByBillingScheduleIdResponse(rsp)
}

func (c *ClientWithResponses) PutBillingSchedulesByBillingScheduleIdWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdParams, body PutBillingSchedulesByBillingScheduleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdResponse, error) {
	rsp, err := c.PutBillingSchedulesByBillingScheduleId(ctx, billingScheduleId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingSchedulesByBillingScheduleIdResponse(rsp)
}

// PutBillingSchedulesByBillingScheduleIdActivateWithResponse request returning *PutBillingSchedulesByBillingScheduleIdActivateResponse
func (c *ClientWithResponses) PutBillingSchedulesByBillingScheduleIdActivateWithResponse(ctx context.Context, billingScheduleId string, params *PutBillingSchedulesByBillingScheduleIdActivateParams, reqEditors ...RequestEditorFn) (*PutBillingSchedulesByBillingScheduleIdActivateResponse, error) {
	rsp, err := c.PutBillingSchedulesByBillingScheduleIdActivate(ctx, billingScheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBillingSchedulesByBillingScheduleIdActivateResponse(rsp)
}

// PostBillingSchedulesByBillingScheduleIdArchiveWithResponse request returning *PostBillingSchedulesByBillingScheduleIdArchiveResponse
func (c *ClientWithResponses) PostBillingSchedulesByBillingScheduleIdArchiveWithResponse(ctx context.Context, billingScheduleId string, params *PostBillingSchedulesByBillingScheduleIdArchiveParams, reqEditors ...RequestEditorFn) (*PostBillingSchedulesByBillingScheduleIdArchiveResponse, error) {
	rsp, err := c.PostBillingSchedulesByBillingScheduleIdArchive(ctx, billingScheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBillingSchedulesByBillingScheduleIdArchiveResponse(rsp)
}

// GetCreditNotesWithResponse request returning *GetCreditNotesResponse
func (c *ClientWithResponses) GetCreditNotesWithResponse(ctx context.Context, params *GetCreditNotesParams, reqEditors ...RequestEditorFn) (*GetCreditNotesResponse, error) {
	rsp, err := c.GetCreditNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesResponse(rsp)
}

// PostCreditNotesWithBodyWithResponse request with arbitrary body returning *PostCreditNotesResponse
func (c *ClientWithResponses) PostCreditNotesWithBodyWithResponse(ctx context.Context, params *PostCreditNotesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesResponse, error) {
	rsp, err := c.PostCreditNotesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesResponse(rsp)
}

func (c *ClientWithResponses) PostCreditNotesWithResponse(ctx context.Context, params *PostCreditNotesParams, body PostCreditNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesResponse, error) {
	rsp, err := c.PostCreditNotes(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesResponse(rsp)
}

// GetCreditNotesByCreditnoteLineItemGroupsWithResponse request returning *GetCreditNotesByCreditnoteLineItemGroupsResponse
func (c *ClientWithResponses) GetCreditNotesByCreditnoteLineItemGroupsWithResponse(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemGroupsParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByCreditnoteLineItemGroupsResponse, error) {
	rsp, err := c.GetCreditNotesByCreditnoteLineItemGroups(ctx, creditnote, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesByCreditnoteLineItemGroupsResponse(rsp)
}

// PostCreditNotesByCreditnoteLineItemGroupsWithBodyWithResponse request with arbitrary body returning *PostCreditNotesByCreditnoteLineItemGroupsResponse
func (c *ClientWithResponses) PostCreditNotesByCreditnoteLineItemGroupsWithBodyWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemGroupsResponse, error) {
	rsp, err := c.PostCreditNotesByCreditnoteLineItemGroupsWithBody(ctx, creditnote, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByCreditnoteLineItemGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostCreditNotesByCreditnoteLineItemGroupsWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemGroupsParams, body PostCreditNotesByCreditnoteLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemGroupsResponse, error) {
	rsp, err := c.PostCreditNotesByCreditnoteLineItemGroups(ctx, creditnote, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByCreditnoteLineItemGroupsResponse(rsp)
}

// DeleteCreditNotesByCreditnoteLineItemGroupsByIdWithResponse request returning *DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse
func (c *ClientWithResponses) DeleteCreditNotesByCreditnoteLineItemGroupsByIdWithResponse(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse, error) {
	rsp, err := c.DeleteCreditNotesByCreditnoteLineItemGroupsById(ctx, creditnote, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse(rsp)
}

// PutCreditNotesByCreditnoteLineItemGroupsByIdWithBodyWithResponse request with arbitrary body returning *PutCreditNotesByCreditnoteLineItemGroupsByIdResponse
func (c *ClientWithResponses) PutCreditNotesByCreditnoteLineItemGroupsByIdWithBodyWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemGroupsByIdResponse, error) {
	rsp, err := c.PutCreditNotesByCreditnoteLineItemGroupsByIdWithBody(ctx, creditnote, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByCreditnoteLineItemGroupsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCreditNotesByCreditnoteLineItemGroupsByIdWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemGroupsByIdParams, body PutCreditNotesByCreditnoteLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemGroupsByIdResponse, error) {
	rsp, err := c.PutCreditNotesByCreditnoteLineItemGroupsById(ctx, creditnote, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByCreditnoteLineItemGroupsByIdResponse(rsp)
}

// GetCreditNotesByCreditnoteLineItemsWithResponse request returning *GetCreditNotesByCreditnoteLineItemsResponse
func (c *ClientWithResponses) GetCreditNotesByCreditnoteLineItemsWithResponse(ctx context.Context, creditnote string, params *GetCreditNotesByCreditnoteLineItemsParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByCreditnoteLineItemsResponse, error) {
	rsp, err := c.GetCreditNotesByCreditnoteLineItems(ctx, creditnote, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesByCreditnoteLineItemsResponse(rsp)
}

// PostCreditNotesByCreditnoteLineItemsWithBodyWithResponse request with arbitrary body returning *PostCreditNotesByCreditnoteLineItemsResponse
func (c *ClientWithResponses) PostCreditNotesByCreditnoteLineItemsWithBodyWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemsResponse, error) {
	rsp, err := c.PostCreditNotesByCreditnoteLineItemsWithBody(ctx, creditnote, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByCreditnoteLineItemsResponse(rsp)
}

func (c *ClientWithResponses) PostCreditNotesByCreditnoteLineItemsWithResponse(ctx context.Context, creditnote string, params *PostCreditNotesByCreditnoteLineItemsParams, body PostCreditNotesByCreditnoteLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditNotesByCreditnoteLineItemsResponse, error) {
	rsp, err := c.PostCreditNotesByCreditnoteLineItems(ctx, creditnote, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByCreditnoteLineItemsResponse(rsp)
}

// DeleteCreditNotesByCreditnoteLineItemsByIdWithResponse request returning *DeleteCreditNotesByCreditnoteLineItemsByIdResponse
func (c *ClientWithResponses) DeleteCreditNotesByCreditnoteLineItemsByIdWithResponse(ctx context.Context, creditnote string, id string, params *DeleteCreditNotesByCreditnoteLineItemsByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByCreditnoteLineItemsByIdResponse, error) {
	rsp, err := c.DeleteCreditNotesByCreditnoteLineItemsById(ctx, creditnote, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCreditNotesByCreditnoteLineItemsByIdResponse(rsp)
}

// PutCreditNotesByCreditnoteLineItemsByIdWithBodyWithResponse request with arbitrary body returning *PutCreditNotesByCreditnoteLineItemsByIdResponse
func (c *ClientWithResponses) PutCreditNotesByCreditnoteLineItemsByIdWithBodyWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemsByIdResponse, error) {
	rsp, err := c.PutCreditNotesByCreditnoteLineItemsByIdWithBody(ctx, creditnote, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByCreditnoteLineItemsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCreditNotesByCreditnoteLineItemsByIdWithResponse(ctx context.Context, creditnote string, id string, params *PutCreditNotesByCreditnoteLineItemsByIdParams, body PutCreditNotesByCreditnoteLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByCreditnoteLineItemsByIdResponse, error) {
	rsp, err := c.PutCreditNotesByCreditnoteLineItemsById(ctx, creditnote, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByCreditnoteLineItemsByIdResponse(rsp)
}

// DeleteCreditNotesByIdWithResponse request returning *DeleteCreditNotesByIdResponse
func (c *ClientWithResponses) DeleteCreditNotesByIdWithResponse(ctx context.Context, id string, params *DeleteCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*DeleteCreditNotesByIdResponse, error) {
	rsp, err := c.DeleteCreditNotesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCreditNotesByIdResponse(rsp)
}

// GetCreditNotesByIdWithResponse request returning *GetCreditNotesByIdResponse
func (c *ClientWithResponses) GetCreditNotesByIdWithResponse(ctx context.Context, id string, params *GetCreditNotesByIdParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByIdResponse, error) {
	rsp, err := c.GetCreditNotesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesByIdResponse(rsp)
}

// PutCreditNotesByIdWithBodyWithResponse request with arbitrary body returning *PutCreditNotesByIdResponse
func (c *ClientWithResponses) PutCreditNotesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCreditNotesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCreditNotesByIdResponse, error) {
	rsp, err := c.PutCreditNotesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCreditNotesByIdWithResponse(ctx context.Context, id string, params *PutCreditNotesByIdParams, body PutCreditNotesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCreditNotesByIdResponse, error) {
	rsp, err := c.PutCreditNotesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCreditNotesByIdResponse(rsp)
}

// GetCreditNotesByIdDownloadWithResponse request returning *GetCreditNotesByIdDownloadResponse
func (c *ClientWithResponses) GetCreditNotesByIdDownloadWithResponse(ctx context.Context, id string, params *GetCreditNotesByIdDownloadParams, reqEditors ...RequestEditorFn) (*GetCreditNotesByIdDownloadResponse, error) {
	rsp, err := c.GetCreditNotesByIdDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditNotesByIdDownloadResponse(rsp)
}

// PostCreditNotesByIdFinalizeWithResponse request returning *PostCreditNotesByIdFinalizeResponse
func (c *ClientWithResponses) PostCreditNotesByIdFinalizeWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdFinalizeResponse, error) {
	rsp, err := c.PostCreditNotesByIdFinalize(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByIdFinalizeResponse(rsp)
}

// PostCreditNotesByIdFinalizeAndSendWithResponse request returning *PostCreditNotesByIdFinalizeAndSendResponse
func (c *ClientWithResponses) PostCreditNotesByIdFinalizeAndSendWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdFinalizeAndSendResponse, error) {
	rsp, err := c.PostCreditNotesByIdFinalizeAndSend(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByIdFinalizeAndSendResponse(rsp)
}

// PostCreditNotesByIdSendWithResponse request returning *PostCreditNotesByIdSendResponse
func (c *ClientWithResponses) PostCreditNotesByIdSendWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdSendParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdSendResponse, error) {
	rsp, err := c.PostCreditNotesByIdSend(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByIdSendResponse(rsp)
}

// PostCreditNotesByIdVoidWithResponse request returning *PostCreditNotesByIdVoidResponse
func (c *ClientWithResponses) PostCreditNotesByIdVoidWithResponse(ctx context.Context, id string, params *PostCreditNotesByIdVoidParams, reqEditors ...RequestEditorFn) (*PostCreditNotesByIdVoidResponse, error) {
	rsp, err := c.PostCreditNotesByIdVoid(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditNotesByIdVoidResponse(rsp)
}

// GetCreditsWithResponse request returning *GetCreditsResponse
func (c *ClientWithResponses) GetCreditsWithResponse(ctx context.Context, params *GetCreditsParams, reqEditors ...RequestEditorFn) (*GetCreditsResponse, error) {
	rsp, err := c.GetCredits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditsResponse(rsp)
}

// PostCreditsWithBodyWithResponse request with arbitrary body returning *PostCreditsResponse
func (c *ClientWithResponses) PostCreditsWithBodyWithResponse(ctx context.Context, params *PostCreditsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCreditsResponse, error) {
	rsp, err := c.PostCreditsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditsResponse(rsp)
}

func (c *ClientWithResponses) PostCreditsWithResponse(ctx context.Context, params *PostCreditsParams, body PostCreditsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCreditsResponse, error) {
	rsp, err := c.PostCredits(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCreditsResponse(rsp)
}

// GetCreditsByCustomerIdBalancesWithResponse request returning *GetCreditsByCustomerIdBalancesResponse
func (c *ClientWithResponses) GetCreditsByCustomerIdBalancesWithResponse(ctx context.Context, customerId string, params *GetCreditsByCustomerIdBalancesParams, reqEditors ...RequestEditorFn) (*GetCreditsByCustomerIdBalancesResponse, error) {
	rsp, err := c.GetCreditsByCustomerIdBalances(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditsByCustomerIdBalancesResponse(rsp)
}

// GetCreditsByCustomerIdGrantsWithResponse request returning *GetCreditsByCustomerIdGrantsResponse
func (c *ClientWithResponses) GetCreditsByCustomerIdGrantsWithResponse(ctx context.Context, customerId string, params *GetCreditsByCustomerIdGrantsParams, reqEditors ...RequestEditorFn) (*GetCreditsByCustomerIdGrantsResponse, error) {
	rsp, err := c.GetCreditsByCustomerIdGrants(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditsByCustomerIdGrantsResponse(rsp)
}

// GetCreditsByIdWithResponse request returning *GetCreditsByIdResponse
func (c *ClientWithResponses) GetCreditsByIdWithResponse(ctx context.Context, id string, params *GetCreditsByIdParams, reqEditors ...RequestEditorFn) (*GetCreditsByIdResponse, error) {
	rsp, err := c.GetCreditsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCreditsByIdResponse(rsp)
}

// GetCustomerAliasesWithResponse request returning *GetCustomerAliasesResponse
func (c *ClientWithResponses) GetCustomerAliasesWithResponse(ctx context.Context, params *GetCustomerAliasesParams, reqEditors ...RequestEditorFn) (*GetCustomerAliasesResponse, error) {
	rsp, err := c.GetCustomerAliases(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerAliasesResponse(rsp)
}

// PostCustomerAliasesWithBodyWithResponse request with arbitrary body returning *PostCustomerAliasesResponse
func (c *ClientWithResponses) PostCustomerAliasesWithBodyWithResponse(ctx context.Context, params *PostCustomerAliasesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerAliasesResponse, error) {
	rsp, err := c.PostCustomerAliasesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerAliasesResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerAliasesWithResponse(ctx context.Context, params *PostCustomerAliasesParams, body PostCustomerAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerAliasesResponse, error) {
	rsp, err := c.PostCustomerAliases(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerAliasesResponse(rsp)
}

// DeleteCustomerAliasesByIdWithResponse request returning *DeleteCustomerAliasesByIdResponse
func (c *ClientWithResponses) DeleteCustomerAliasesByIdWithResponse(ctx context.Context, id string, params *DeleteCustomerAliasesByIdParams, reqEditors ...RequestEditorFn) (*DeleteCustomerAliasesByIdResponse, error) {
	rsp, err := c.DeleteCustomerAliasesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerAliasesByIdResponse(rsp)
}

// PutCustomerAliasesByIdWithBodyWithResponse request with arbitrary body returning *PutCustomerAliasesByIdResponse
func (c *ClientWithResponses) PutCustomerAliasesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerAliasesByIdResponse, error) {
	rsp, err := c.PutCustomerAliasesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerAliasesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerAliasesByIdWithResponse(ctx context.Context, id string, params *PutCustomerAliasesByIdParams, body PutCustomerAliasesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerAliasesByIdResponse, error) {
	rsp, err := c.PutCustomerAliasesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerAliasesByIdResponse(rsp)
}

// PostCustomerOrganizationsWithBodyWithResponse request with arbitrary body returning *PostCustomerOrganizationsResponse
func (c *ClientWithResponses) PostCustomerOrganizationsWithBodyWithResponse(ctx context.Context, params *PostCustomerOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsResponse, error) {
	rsp, err := c.PostCustomerOrganizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerOrganizationsWithResponse(ctx context.Context, params *PostCustomerOrganizationsParams, body PostCustomerOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsResponse, error) {
	rsp, err := c.PostCustomerOrganizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerOrganizationsResponse(rsp)
}

// PostCustomerOrganizationsByIdMembersWithBodyWithResponse request with arbitrary body returning *PostCustomerOrganizationsByIdMembersResponse
func (c *ClientWithResponses) PostCustomerOrganizationsByIdMembersWithBodyWithResponse(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsByIdMembersResponse, error) {
	rsp, err := c.PostCustomerOrganizationsByIdMembersWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerOrganizationsByIdMembersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerOrganizationsByIdMembersWithResponse(ctx context.Context, id string, params *PostCustomerOrganizationsByIdMembersParams, body PostCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerOrganizationsByIdMembersResponse, error) {
	rsp, err := c.PostCustomerOrganizationsByIdMembers(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerOrganizationsByIdMembersResponse(rsp)
}

// PutCustomerOrganizationsByIdMembersWithBodyWithResponse request with arbitrary body returning *PutCustomerOrganizationsByIdMembersResponse
func (c *ClientWithResponses) PutCustomerOrganizationsByIdMembersWithBodyWithResponse(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerOrganizationsByIdMembersResponse, error) {
	rsp, err := c.PutCustomerOrganizationsByIdMembersWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerOrganizationsByIdMembersResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerOrganizationsByIdMembersWithResponse(ctx context.Context, id string, params *PutCustomerOrganizationsByIdMembersParams, body PutCustomerOrganizationsByIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerOrganizationsByIdMembersResponse, error) {
	rsp, err := c.PutCustomerOrganizationsByIdMembers(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerOrganizationsByIdMembersResponse(rsp)
}

// GetCustomersWithResponse request returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// PostCustomersWithBodyWithResponse request with arbitrary body returning *PostCustomersResponse
func (c *ClientWithResponses) PostCustomersWithBodyWithResponse(ctx context.Context, params *PostCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersWithResponse(ctx context.Context, params *PostCustomersParams, body PostCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersResponse, error) {
	rsp, err := c.PostCustomers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersResponse(rsp)
}

// GetCustomersByAliasByAliasWithResponse request returning *GetCustomersByAliasByAliasResponse
func (c *ClientWithResponses) GetCustomersByAliasByAliasWithResponse(ctx context.Context, alias string, params *GetCustomersByAliasByAliasParams, reqEditors ...RequestEditorFn) (*GetCustomersByAliasByAliasResponse, error) {
	rsp, err := c.GetCustomersByAliasByAlias(ctx, alias, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersByAliasByAliasResponse(rsp)
}

// GetCustomersByCustomerContactsWithResponse request returning *GetCustomersByCustomerContactsResponse
func (c *ClientWithResponses) GetCustomersByCustomerContactsWithResponse(ctx context.Context, customer string, params *GetCustomersByCustomerContactsParams, reqEditors ...RequestEditorFn) (*GetCustomersByCustomerContactsResponse, error) {
	rsp, err := c.GetCustomersByCustomerContacts(ctx, customer, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersByCustomerContactsResponse(rsp)
}

// PostCustomersByCustomerContactsWithBodyWithResponse request with arbitrary body returning *PostCustomersByCustomerContactsResponse
func (c *ClientWithResponses) PostCustomersByCustomerContactsWithBodyWithResponse(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsResponse, error) {
	rsp, err := c.PostCustomersByCustomerContactsWithBody(ctx, customer, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersByCustomerContactsResponse(rsp)
}

func (c *ClientWithResponses) PostCustomersByCustomerContactsWithResponse(ctx context.Context, customer string, params *PostCustomersByCustomerContactsParams, body PostCustomersByCustomerContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsResponse, error) {
	rsp, err := c.PostCustomersByCustomerContacts(ctx, customer, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersByCustomerContactsResponse(rsp)
}

// PutCustomersByCustomerContactsByIdWithBodyWithResponse request with arbitrary body returning *PutCustomersByCustomerContactsByIdResponse
func (c *ClientWithResponses) PutCustomersByCustomerContactsByIdWithBodyWithResponse(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersByCustomerContactsByIdResponse, error) {
	rsp, err := c.PutCustomersByCustomerContactsByIdWithBody(ctx, customer, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersByCustomerContactsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersByCustomerContactsByIdWithResponse(ctx context.Context, customer string, id string, params *PutCustomersByCustomerContactsByIdParams, body PutCustomersByCustomerContactsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersByCustomerContactsByIdResponse, error) {
	rsp, err := c.PutCustomersByCustomerContactsById(ctx, customer, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersByCustomerContactsByIdResponse(rsp)
}

// PostCustomersByCustomerContactsByIdArchiveWithResponse request returning *PostCustomersByCustomerContactsByIdArchiveResponse
func (c *ClientWithResponses) PostCustomersByCustomerContactsByIdArchiveWithResponse(ctx context.Context, customer string, id string, params *PostCustomersByCustomerContactsByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostCustomersByCustomerContactsByIdArchiveResponse, error) {
	rsp, err := c.PostCustomersByCustomerContactsByIdArchive(ctx, customer, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersByCustomerContactsByIdArchiveResponse(rsp)
}

// GetCustomersByIdWithResponse request returning *GetCustomersByIdResponse
func (c *ClientWithResponses) GetCustomersByIdWithResponse(ctx context.Context, id string, params *GetCustomersByIdParams, reqEditors ...RequestEditorFn) (*GetCustomersByIdResponse, error) {
	rsp, err := c.GetCustomersById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersByIdResponse(rsp)
}

// PutCustomersByIdWithBodyWithResponse request with arbitrary body returning *PutCustomersByIdResponse
func (c *ClientWithResponses) PutCustomersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomersByIdResponse, error) {
	rsp, err := c.PutCustomersByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersByIdResponse(rsp)
}

func (c *ClientWithResponses) PutCustomersByIdWithResponse(ctx context.Context, id string, params *PutCustomersByIdParams, body PutCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomersByIdResponse, error) {
	rsp, err := c.PutCustomersById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomersByIdResponse(rsp)
}

// GetCustomersByIdAliasesWithResponse request returning *GetCustomersByIdAliasesResponse
func (c *ClientWithResponses) GetCustomersByIdAliasesWithResponse(ctx context.Context, id string, params *GetCustomersByIdAliasesParams, reqEditors ...RequestEditorFn) (*GetCustomersByIdAliasesResponse, error) {
	rsp, err := c.GetCustomersByIdAliases(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersByIdAliasesResponse(rsp)
}

// PostCustomersByIdArchiveWithResponse request returning *PostCustomersByIdArchiveResponse
func (c *ClientWithResponses) PostCustomersByIdArchiveWithResponse(ctx context.Context, id string, params *PostCustomersByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostCustomersByIdArchiveResponse, error) {
	rsp, err := c.PostCustomersByIdArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomersByIdArchiveResponse(rsp)
}

// GetDiscountsWithResponse request returning *GetDiscountsResponse
func (c *ClientWithResponses) GetDiscountsWithResponse(ctx context.Context, params *GetDiscountsParams, reqEditors ...RequestEditorFn) (*GetDiscountsResponse, error) {
	rsp, err := c.GetDiscounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscountsResponse(rsp)
}

// DeleteDiscountsByIdWithResponse request returning *DeleteDiscountsByIdResponse
func (c *ClientWithResponses) DeleteDiscountsByIdWithResponse(ctx context.Context, id string, params *DeleteDiscountsByIdParams, reqEditors ...RequestEditorFn) (*DeleteDiscountsByIdResponse, error) {
	rsp, err := c.DeleteDiscountsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDiscountsByIdResponse(rsp)
}

// GetDiscountsByIdWithResponse request returning *GetDiscountsByIdResponse
func (c *ClientWithResponses) GetDiscountsByIdWithResponse(ctx context.Context, id string, params *GetDiscountsByIdParams, reqEditors ...RequestEditorFn) (*GetDiscountsByIdResponse, error) {
	rsp, err := c.GetDiscountsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDiscountsByIdResponse(rsp)
}

// PutDiscountsByIdWithBodyWithResponse request with arbitrary body returning *PutDiscountsByIdResponse
func (c *ClientWithResponses) PutDiscountsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutDiscountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDiscountsByIdResponse, error) {
	rsp, err := c.PutDiscountsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDiscountsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutDiscountsByIdWithResponse(ctx context.Context, id string, params *PutDiscountsByIdParams, body PutDiscountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDiscountsByIdResponse, error) {
	rsp, err := c.PutDiscountsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDiscountsByIdResponse(rsp)
}

// GetInvoicesWithResponse request returning *GetInvoicesResponse
func (c *ClientWithResponses) GetInvoicesWithResponse(ctx context.Context, params *GetInvoicesParams, reqEditors ...RequestEditorFn) (*GetInvoicesResponse, error) {
	rsp, err := c.GetInvoices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesResponse(rsp)
}

// PostInvoicesWithBodyWithResponse request with arbitrary body returning *PostInvoicesResponse
func (c *ClientWithResponses) PostInvoicesWithBodyWithResponse(ctx context.Context, params *PostInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesWithResponse(ctx context.Context, params *PostInvoicesParams, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

// GetInvoicesRenderSettingsWithResponse request returning *GetInvoicesRenderSettingsResponse
func (c *ClientWithResponses) GetInvoicesRenderSettingsWithResponse(ctx context.Context, params *GetInvoicesRenderSettingsParams, reqEditors ...RequestEditorFn) (*GetInvoicesRenderSettingsResponse, error) {
	rsp, err := c.GetInvoicesRenderSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesRenderSettingsResponse(rsp)
}

// PutInvoicesRenderSettingsByIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesRenderSettingsByIdResponse
func (c *ClientWithResponses) PutInvoicesRenderSettingsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesRenderSettingsByIdResponse, error) {
	rsp, err := c.PutInvoicesRenderSettingsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesRenderSettingsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesRenderSettingsByIdWithResponse(ctx context.Context, id string, params *PutInvoicesRenderSettingsByIdParams, body PutInvoicesRenderSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesRenderSettingsByIdResponse, error) {
	rsp, err := c.PutInvoicesRenderSettingsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesRenderSettingsByIdResponse(rsp)
}

// DeleteInvoicesByIdWithResponse request returning *DeleteInvoicesByIdResponse
func (c *ClientWithResponses) DeleteInvoicesByIdWithResponse(ctx context.Context, id string, params *DeleteInvoicesByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByIdResponse, error) {
	rsp, err := c.DeleteInvoicesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesByIdResponse(rsp)
}

// GetInvoicesByIdWithResponse request returning *GetInvoicesByIdResponse
func (c *ClientWithResponses) GetInvoicesByIdWithResponse(ctx context.Context, id string, params *GetInvoicesByIdParams, reqEditors ...RequestEditorFn) (*GetInvoicesByIdResponse, error) {
	rsp, err := c.GetInvoicesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesByIdResponse(rsp)
}

// PatchInvoicesByIdWithBodyWithResponse request with arbitrary body returning *PatchInvoicesByIdResponse
func (c *ClientWithResponses) PatchInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PatchInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInvoicesByIdResponse, error) {
	rsp, err := c.PatchInvoicesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInvoicesByIdResponse(rsp)
}

func (c *ClientWithResponses) PatchInvoicesByIdWithResponse(ctx context.Context, id string, params *PatchInvoicesByIdParams, body PatchInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInvoicesByIdResponse, error) {
	rsp, err := c.PatchInvoicesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInvoicesByIdResponse(rsp)
}

// PutInvoicesByIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesByIdResponse
func (c *ClientWithResponses) PutInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByIdResponse, error) {
	rsp, err := c.PutInvoicesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesByIdWithResponse(ctx context.Context, id string, params *PutInvoicesByIdParams, body PutInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByIdResponse, error) {
	rsp, err := c.PutInvoicesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByIdResponse(rsp)
}

// GetInvoicesByIdDownloadWithResponse request returning *GetInvoicesByIdDownloadResponse
func (c *ClientWithResponses) GetInvoicesByIdDownloadWithResponse(ctx context.Context, id string, params *GetInvoicesByIdDownloadParams, reqEditors ...RequestEditorFn) (*GetInvoicesByIdDownloadResponse, error) {
	rsp, err := c.GetInvoicesByIdDownload(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesByIdDownloadResponse(rsp)
}

// PostInvoicesByIdDraftWithResponse request returning *PostInvoicesByIdDraftResponse
func (c *ClientWithResponses) PostInvoicesByIdDraftWithResponse(ctx context.Context, id string, params *PostInvoicesByIdDraftParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdDraftResponse, error) {
	rsp, err := c.PostInvoicesByIdDraft(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdDraftResponse(rsp)
}

// PostInvoicesByIdFinalizeWithResponse request returning *PostInvoicesByIdFinalizeResponse
func (c *ClientWithResponses) PostInvoicesByIdFinalizeWithResponse(ctx context.Context, id string, params *PostInvoicesByIdFinalizeParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdFinalizeResponse, error) {
	rsp, err := c.PostInvoicesByIdFinalize(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdFinalizeResponse(rsp)
}

// PostInvoicesByIdFinalizeAndSendWithResponse request returning *PostInvoicesByIdFinalizeAndSendResponse
func (c *ClientWithResponses) PostInvoicesByIdFinalizeAndSendWithResponse(ctx context.Context, id string, params *PostInvoicesByIdFinalizeAndSendParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdFinalizeAndSendResponse, error) {
	rsp, err := c.PostInvoicesByIdFinalizeAndSend(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdFinalizeAndSendResponse(rsp)
}

// PutInvoicesByIdPaymentStatusWithBodyWithResponse request with arbitrary body returning *PutInvoicesByIdPaymentStatusResponse
func (c *ClientWithResponses) PutInvoicesByIdPaymentStatusWithBodyWithResponse(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByIdPaymentStatusResponse, error) {
	rsp, err := c.PutInvoicesByIdPaymentStatusWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByIdPaymentStatusResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesByIdPaymentStatusWithResponse(ctx context.Context, id string, params *PutInvoicesByIdPaymentStatusParams, body PutInvoicesByIdPaymentStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByIdPaymentStatusResponse, error) {
	rsp, err := c.PutInvoicesByIdPaymentStatus(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByIdPaymentStatusResponse(rsp)
}

// PostInvoicesByIdSendWithResponse request returning *PostInvoicesByIdSendResponse
func (c *ClientWithResponses) PostInvoicesByIdSendWithResponse(ctx context.Context, id string, params *PostInvoicesByIdSendParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdSendResponse, error) {
	rsp, err := c.PostInvoicesByIdSend(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdSendResponse(rsp)
}

// PostInvoicesByIdSendPaymentReminderWithResponse request returning *PostInvoicesByIdSendPaymentReminderResponse
func (c *ClientWithResponses) PostInvoicesByIdSendPaymentReminderWithResponse(ctx context.Context, id string, params *PostInvoicesByIdSendPaymentReminderParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdSendPaymentReminderResponse, error) {
	rsp, err := c.PostInvoicesByIdSendPaymentReminder(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdSendPaymentReminderResponse(rsp)
}

// PostInvoicesByIdVoidWithResponse request returning *PostInvoicesByIdVoidResponse
func (c *ClientWithResponses) PostInvoicesByIdVoidWithResponse(ctx context.Context, id string, params *PostInvoicesByIdVoidParams, reqEditors ...RequestEditorFn) (*PostInvoicesByIdVoidResponse, error) {
	rsp, err := c.PostInvoicesByIdVoid(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByIdVoidResponse(rsp)
}

// GetInvoicesByInvoiceLineItemGroupsWithResponse request returning *GetInvoicesByInvoiceLineItemGroupsResponse
func (c *ClientWithResponses) GetInvoicesByInvoiceLineItemGroupsWithResponse(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemGroupsParams, reqEditors ...RequestEditorFn) (*GetInvoicesByInvoiceLineItemGroupsResponse, error) {
	rsp, err := c.GetInvoicesByInvoiceLineItemGroups(ctx, invoice, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesByInvoiceLineItemGroupsResponse(rsp)
}

// PostInvoicesByInvoiceLineItemGroupsWithBodyWithResponse request with arbitrary body returning *PostInvoicesByInvoiceLineItemGroupsResponse
func (c *ClientWithResponses) PostInvoicesByInvoiceLineItemGroupsWithBodyWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemGroupsResponse, error) {
	rsp, err := c.PostInvoicesByInvoiceLineItemGroupsWithBody(ctx, invoice, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByInvoiceLineItemGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesByInvoiceLineItemGroupsWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemGroupsParams, body PostInvoicesByInvoiceLineItemGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemGroupsResponse, error) {
	rsp, err := c.PostInvoicesByInvoiceLineItemGroups(ctx, invoice, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByInvoiceLineItemGroupsResponse(rsp)
}

// DeleteInvoicesByInvoiceLineItemGroupsByIdWithResponse request returning *DeleteInvoicesByInvoiceLineItemGroupsByIdResponse
func (c *ClientWithResponses) DeleteInvoicesByInvoiceLineItemGroupsByIdWithResponse(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemGroupsByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByInvoiceLineItemGroupsByIdResponse, error) {
	rsp, err := c.DeleteInvoicesByInvoiceLineItemGroupsById(ctx, invoice, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesByInvoiceLineItemGroupsByIdResponse(rsp)
}

// PutInvoicesByInvoiceLineItemGroupsByIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesByInvoiceLineItemGroupsByIdResponse
func (c *ClientWithResponses) PutInvoicesByInvoiceLineItemGroupsByIdWithBodyWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemGroupsByIdResponse, error) {
	rsp, err := c.PutInvoicesByInvoiceLineItemGroupsByIdWithBody(ctx, invoice, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByInvoiceLineItemGroupsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesByInvoiceLineItemGroupsByIdWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemGroupsByIdParams, body PutInvoicesByInvoiceLineItemGroupsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemGroupsByIdResponse, error) {
	rsp, err := c.PutInvoicesByInvoiceLineItemGroupsById(ctx, invoice, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByInvoiceLineItemGroupsByIdResponse(rsp)
}

// GetInvoicesByInvoiceLineItemsWithResponse request returning *GetInvoicesByInvoiceLineItemsResponse
func (c *ClientWithResponses) GetInvoicesByInvoiceLineItemsWithResponse(ctx context.Context, invoice string, params *GetInvoicesByInvoiceLineItemsParams, reqEditors ...RequestEditorFn) (*GetInvoicesByInvoiceLineItemsResponse, error) {
	rsp, err := c.GetInvoicesByInvoiceLineItems(ctx, invoice, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesByInvoiceLineItemsResponse(rsp)
}

// PostInvoicesByInvoiceLineItemsWithBodyWithResponse request with arbitrary body returning *PostInvoicesByInvoiceLineItemsResponse
func (c *ClientWithResponses) PostInvoicesByInvoiceLineItemsWithBodyWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemsResponse, error) {
	rsp, err := c.PostInvoicesByInvoiceLineItemsWithBody(ctx, invoice, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByInvoiceLineItemsResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesByInvoiceLineItemsWithResponse(ctx context.Context, invoice string, params *PostInvoicesByInvoiceLineItemsParams, body PostInvoicesByInvoiceLineItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesByInvoiceLineItemsResponse, error) {
	rsp, err := c.PostInvoicesByInvoiceLineItems(ctx, invoice, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesByInvoiceLineItemsResponse(rsp)
}

// DeleteInvoicesByInvoiceLineItemsByIdWithResponse request returning *DeleteInvoicesByInvoiceLineItemsByIdResponse
func (c *ClientWithResponses) DeleteInvoicesByInvoiceLineItemsByIdWithResponse(ctx context.Context, invoice string, id string, params *DeleteInvoicesByInvoiceLineItemsByIdParams, reqEditors ...RequestEditorFn) (*DeleteInvoicesByInvoiceLineItemsByIdResponse, error) {
	rsp, err := c.DeleteInvoicesByInvoiceLineItemsById(ctx, invoice, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesByInvoiceLineItemsByIdResponse(rsp)
}

// PutInvoicesByInvoiceLineItemsByIdWithBodyWithResponse request with arbitrary body returning *PutInvoicesByInvoiceLineItemsByIdResponse
func (c *ClientWithResponses) PutInvoicesByInvoiceLineItemsByIdWithBodyWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemsByIdResponse, error) {
	rsp, err := c.PutInvoicesByInvoiceLineItemsByIdWithBody(ctx, invoice, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByInvoiceLineItemsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutInvoicesByInvoiceLineItemsByIdWithResponse(ctx context.Context, invoice string, id string, params *PutInvoicesByInvoiceLineItemsByIdParams, body PutInvoicesByInvoiceLineItemsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoicesByInvoiceLineItemsByIdResponse, error) {
	rsp, err := c.PutInvoicesByInvoiceLineItemsById(ctx, invoice, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoicesByInvoiceLineItemsByIdResponse(rsp)
}

// GetListPricesWithResponse request returning *GetListPricesResponse
func (c *ClientWithResponses) GetListPricesWithResponse(ctx context.Context, params *GetListPricesParams, reqEditors ...RequestEditorFn) (*GetListPricesResponse, error) {
	rsp, err := c.GetListPrices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListPricesResponse(rsp)
}

// PostListPricesWithBodyWithResponse request with arbitrary body returning *PostListPricesResponse
func (c *ClientWithResponses) PostListPricesWithBodyWithResponse(ctx context.Context, params *PostListPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostListPricesResponse, error) {
	rsp, err := c.PostListPricesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListPricesResponse(rsp)
}

func (c *ClientWithResponses) PostListPricesWithResponse(ctx context.Context, params *PostListPricesParams, body PostListPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostListPricesResponse, error) {
	rsp, err := c.PostListPrices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListPricesResponse(rsp)
}

// GetListPricesByIdWithResponse request returning *GetListPricesByIdResponse
func (c *ClientWithResponses) GetListPricesByIdWithResponse(ctx context.Context, id string, params *GetListPricesByIdParams, reqEditors ...RequestEditorFn) (*GetListPricesByIdResponse, error) {
	rsp, err := c.GetListPricesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetListPricesByIdResponse(rsp)
}

// PutListPricesByIdWithBodyWithResponse request with arbitrary body returning *PutListPricesByIdResponse
func (c *ClientWithResponses) PutListPricesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutListPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutListPricesByIdResponse, error) {
	rsp, err := c.PutListPricesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListPricesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutListPricesByIdWithResponse(ctx context.Context, id string, params *PutListPricesByIdParams, body PutListPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutListPricesByIdResponse, error) {
	rsp, err := c.PutListPricesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutListPricesByIdResponse(rsp)
}

// PostListPricesByIdArchiveWithResponse request returning *PostListPricesByIdArchiveResponse
func (c *ClientWithResponses) PostListPricesByIdArchiveWithResponse(ctx context.Context, id string, params *PostListPricesByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostListPricesByIdArchiveResponse, error) {
	rsp, err := c.PostListPricesByIdArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostListPricesByIdArchiveResponse(rsp)
}

// GetNotificationsPoliciesWithResponse request returning *GetNotificationsPoliciesResponse
func (c *ClientWithResponses) GetNotificationsPoliciesWithResponse(ctx context.Context, params *GetNotificationsPoliciesParams, reqEditors ...RequestEditorFn) (*GetNotificationsPoliciesResponse, error) {
	rsp, err := c.GetNotificationsPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationsPoliciesResponse(rsp)
}

// PostNotificationsPoliciesWithBodyWithResponse request with arbitrary body returning *PostNotificationsPoliciesResponse
func (c *ClientWithResponses) PostNotificationsPoliciesWithBodyWithResponse(ctx context.Context, params *PostNotificationsPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesResponse, error) {
	rsp, err := c.PostNotificationsPoliciesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PostNotificationsPoliciesWithResponse(ctx context.Context, params *PostNotificationsPoliciesParams, body PostNotificationsPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesResponse, error) {
	rsp, err := c.PostNotificationsPolicies(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesResponse(rsp)
}

// DeleteNotificationsPoliciesByIdWithResponse request returning *DeleteNotificationsPoliciesByIdResponse
func (c *ClientWithResponses) DeleteNotificationsPoliciesByIdWithResponse(ctx context.Context, id string, params *DeleteNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdResponse, error) {
	rsp, err := c.DeleteNotificationsPoliciesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsPoliciesByIdResponse(rsp)
}

// GetNotificationsPoliciesByIdWithResponse request returning *GetNotificationsPoliciesByIdResponse
func (c *ClientWithResponses) GetNotificationsPoliciesByIdWithResponse(ctx context.Context, id string, params *GetNotificationsPoliciesByIdParams, reqEditors ...RequestEditorFn) (*GetNotificationsPoliciesByIdResponse, error) {
	rsp, err := c.GetNotificationsPoliciesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationsPoliciesByIdResponse(rsp)
}

// PostNotificationsPoliciesByIdNotificationTypesWithBodyWithResponse request with arbitrary body returning *PostNotificationsPoliciesByIdNotificationTypesResponse
func (c *ClientWithResponses) PostNotificationsPoliciesByIdNotificationTypesWithBodyWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdNotificationTypesResponse, error) {
	rsp, err := c.PostNotificationsPoliciesByIdNotificationTypesWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesByIdNotificationTypesResponse(rsp)
}

func (c *ClientWithResponses) PostNotificationsPoliciesByIdNotificationTypesWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdNotificationTypesParams, body PostNotificationsPoliciesByIdNotificationTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdNotificationTypesResponse, error) {
	rsp, err := c.PostNotificationsPoliciesByIdNotificationTypes(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesByIdNotificationTypesResponse(rsp)
}

// DeleteNotificationsPoliciesByIdNotificationTypesByTypeWithResponse request returning *DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse
func (c *ClientWithResponses) DeleteNotificationsPoliciesByIdNotificationTypesByTypeWithResponse(ctx context.Context, id string, pType DeleteNotificationsPoliciesByIdNotificationTypesByTypeParamsType, params *DeleteNotificationsPoliciesByIdNotificationTypesByTypeParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse, error) {
	rsp, err := c.DeleteNotificationsPoliciesByIdNotificationTypesByType(ctx, id, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse(rsp)
}

// PostNotificationsPoliciesByIdRecipientsWithBodyWithResponse request with arbitrary body returning *PostNotificationsPoliciesByIdRecipientsResponse
func (c *ClientWithResponses) PostNotificationsPoliciesByIdRecipientsWithBodyWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdRecipientsResponse, error) {
	rsp, err := c.PostNotificationsPoliciesByIdRecipientsWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesByIdRecipientsResponse(rsp)
}

func (c *ClientWithResponses) PostNotificationsPoliciesByIdRecipientsWithResponse(ctx context.Context, id string, params *PostNotificationsPoliciesByIdRecipientsParams, body PostNotificationsPoliciesByIdRecipientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNotificationsPoliciesByIdRecipientsResponse, error) {
	rsp, err := c.PostNotificationsPoliciesByIdRecipients(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNotificationsPoliciesByIdRecipientsResponse(rsp)
}

// DeleteNotificationsPoliciesByIdRecipientsByRecipientWithResponse request returning *DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse
func (c *ClientWithResponses) DeleteNotificationsPoliciesByIdRecipientsByRecipientWithResponse(ctx context.Context, id string, recipient string, params *DeleteNotificationsPoliciesByIdRecipientsByRecipientParams, reqEditors ...RequestEditorFn) (*DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse, error) {
	rsp, err := c.DeleteNotificationsPoliciesByIdRecipientsByRecipient(ctx, id, recipient, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationsPoliciesByIdRecipientsByRecipientResponse(rsp)
}

// GetPaymentsSettingsWithResponse request returning *GetPaymentsSettingsResponse
func (c *ClientWithResponses) GetPaymentsSettingsWithResponse(ctx context.Context, params *GetPaymentsSettingsParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsResponse, error) {
	rsp, err := c.GetPaymentsSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsResponse(rsp)
}

// PostPaymentsSettingsBillingSchedulesWithBodyWithResponse request with arbitrary body returning *PostPaymentsSettingsBillingSchedulesResponse
func (c *ClientWithResponses) PostPaymentsSettingsBillingSchedulesWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsBillingSchedulesResponse, error) {
	rsp, err := c.PostPaymentsSettingsBillingSchedulesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsBillingSchedulesResponse(rsp)
}

func (c *ClientWithResponses) PostPaymentsSettingsBillingSchedulesWithResponse(ctx context.Context, params *PostPaymentsSettingsBillingSchedulesParams, body PostPaymentsSettingsBillingSchedulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsBillingSchedulesResponse, error) {
	rsp, err := c.PostPaymentsSettingsBillingSchedules(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsBillingSchedulesResponse(rsp)
}

// GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdWithResponse request returning *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse
func (c *ClientWithResponses) GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse, error) {
	rsp, err := c.GetPaymentsSettingsBillingSchedulesForBillingScheduleById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse(rsp)
}

// DeletePaymentsSettingsBillingSchedulesByIdWithResponse request returning *DeletePaymentsSettingsBillingSchedulesByIdResponse
func (c *ClientWithResponses) DeletePaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsBillingSchedulesByIdResponse, error) {
	rsp, err := c.DeletePaymentsSettingsBillingSchedulesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePaymentsSettingsBillingSchedulesByIdResponse(rsp)
}

// GetPaymentsSettingsBillingSchedulesByIdWithResponse request returning *GetPaymentsSettingsBillingSchedulesByIdResponse
func (c *ClientWithResponses) GetPaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsBillingSchedulesByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsBillingSchedulesByIdResponse, error) {
	rsp, err := c.GetPaymentsSettingsBillingSchedulesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsBillingSchedulesByIdResponse(rsp)
}

// PutPaymentsSettingsBillingSchedulesByIdWithBodyWithResponse request with arbitrary body returning *PutPaymentsSettingsBillingSchedulesByIdResponse
func (c *ClientWithResponses) PutPaymentsSettingsBillingSchedulesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsBillingSchedulesByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsBillingSchedulesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsBillingSchedulesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutPaymentsSettingsBillingSchedulesByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsBillingSchedulesByIdParams, body PutPaymentsSettingsBillingSchedulesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsBillingSchedulesByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsBillingSchedulesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsBillingSchedulesByIdResponse(rsp)
}

// PostPaymentsSettingsCustomersWithBodyWithResponse request with arbitrary body returning *PostPaymentsSettingsCustomersResponse
func (c *ClientWithResponses) PostPaymentsSettingsCustomersWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsCustomersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsCustomersResponse, error) {
	rsp, err := c.PostPaymentsSettingsCustomersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsCustomersResponse(rsp)
}

func (c *ClientWithResponses) PostPaymentsSettingsCustomersWithResponse(ctx context.Context, params *PostPaymentsSettingsCustomersParams, body PostPaymentsSettingsCustomersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsCustomersResponse, error) {
	rsp, err := c.PostPaymentsSettingsCustomers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsCustomersResponse(rsp)
}

// DeletePaymentsSettingsCustomersByIdWithResponse request returning *DeletePaymentsSettingsCustomersByIdResponse
func (c *ClientWithResponses) DeletePaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsCustomersByIdResponse, error) {
	rsp, err := c.DeletePaymentsSettingsCustomersById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePaymentsSettingsCustomersByIdResponse(rsp)
}

// GetPaymentsSettingsCustomersByIdWithResponse request returning *GetPaymentsSettingsCustomersByIdResponse
func (c *ClientWithResponses) GetPaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsCustomersByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsCustomersByIdResponse, error) {
	rsp, err := c.GetPaymentsSettingsCustomersById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsCustomersByIdResponse(rsp)
}

// PutPaymentsSettingsCustomersByIdWithBodyWithResponse request with arbitrary body returning *PutPaymentsSettingsCustomersByIdResponse
func (c *ClientWithResponses) PutPaymentsSettingsCustomersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsCustomersByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsCustomersByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsCustomersByIdResponse(rsp)
}

func (c *ClientWithResponses) PutPaymentsSettingsCustomersByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsCustomersByIdParams, body PutPaymentsSettingsCustomersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsCustomersByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsCustomersById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsCustomersByIdResponse(rsp)
}

// PostPaymentsSettingsInvoicesWithBodyWithResponse request with arbitrary body returning *PostPaymentsSettingsInvoicesResponse
func (c *ClientWithResponses) PostPaymentsSettingsInvoicesWithBodyWithResponse(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsInvoicesResponse, error) {
	rsp, err := c.PostPaymentsSettingsInvoicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsInvoicesResponse(rsp)
}

func (c *ClientWithResponses) PostPaymentsSettingsInvoicesWithResponse(ctx context.Context, params *PostPaymentsSettingsInvoicesParams, body PostPaymentsSettingsInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPaymentsSettingsInvoicesResponse, error) {
	rsp, err := c.PostPaymentsSettingsInvoices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsSettingsInvoicesResponse(rsp)
}

// GetPaymentsSettingsInvoicesForInvoiceByIdWithResponse request returning *GetPaymentsSettingsInvoicesForInvoiceByIdResponse
func (c *ClientWithResponses) GetPaymentsSettingsInvoicesForInvoiceByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesForInvoiceByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsInvoicesForInvoiceByIdResponse, error) {
	rsp, err := c.GetPaymentsSettingsInvoicesForInvoiceById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsInvoicesForInvoiceByIdResponse(rsp)
}

// DeletePaymentsSettingsInvoicesByIdWithResponse request returning *DeletePaymentsSettingsInvoicesByIdResponse
func (c *ClientWithResponses) DeletePaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *DeletePaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*DeletePaymentsSettingsInvoicesByIdResponse, error) {
	rsp, err := c.DeletePaymentsSettingsInvoicesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePaymentsSettingsInvoicesByIdResponse(rsp)
}

// GetPaymentsSettingsInvoicesByIdWithResponse request returning *GetPaymentsSettingsInvoicesByIdResponse
func (c *ClientWithResponses) GetPaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *GetPaymentsSettingsInvoicesByIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsSettingsInvoicesByIdResponse, error) {
	rsp, err := c.GetPaymentsSettingsInvoicesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsSettingsInvoicesByIdResponse(rsp)
}

// PutPaymentsSettingsInvoicesByIdWithBodyWithResponse request with arbitrary body returning *PutPaymentsSettingsInvoicesByIdResponse
func (c *ClientWithResponses) PutPaymentsSettingsInvoicesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsInvoicesByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsInvoicesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsInvoicesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutPaymentsSettingsInvoicesByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsInvoicesByIdParams, body PutPaymentsSettingsInvoicesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsInvoicesByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsInvoicesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsInvoicesByIdResponse(rsp)
}

// PutPaymentsSettingsByIdWithBodyWithResponse request with arbitrary body returning *PutPaymentsSettingsByIdResponse
func (c *ClientWithResponses) PutPaymentsSettingsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutPaymentsSettingsByIdWithResponse(ctx context.Context, id string, params *PutPaymentsSettingsByIdParams, body PutPaymentsSettingsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPaymentsSettingsByIdResponse, error) {
	rsp, err := c.PutPaymentsSettingsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPaymentsSettingsByIdResponse(rsp)
}

// GetPricesWithResponse request returning *GetPricesResponse
func (c *ClientWithResponses) GetPricesWithResponse(ctx context.Context, params *GetPricesParams, reqEditors ...RequestEditorFn) (*GetPricesResponse, error) {
	rsp, err := c.GetPrices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricesResponse(rsp)
}

// PostPricesWithBodyWithResponse request with arbitrary body returning *PostPricesResponse
func (c *ClientWithResponses) PostPricesWithBodyWithResponse(ctx context.Context, params *PostPricesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPricesResponse, error) {
	rsp, err := c.PostPricesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricesResponse(rsp)
}

func (c *ClientWithResponses) PostPricesWithResponse(ctx context.Context, params *PostPricesParams, body PostPricesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPricesResponse, error) {
	rsp, err := c.PostPrices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPricesResponse(rsp)
}

// DeletePricesByIdWithResponse request returning *DeletePricesByIdResponse
func (c *ClientWithResponses) DeletePricesByIdWithResponse(ctx context.Context, id string, params *DeletePricesByIdParams, reqEditors ...RequestEditorFn) (*DeletePricesByIdResponse, error) {
	rsp, err := c.DeletePricesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePricesByIdResponse(rsp)
}

// GetPricesByIdWithResponse request returning *GetPricesByIdResponse
func (c *ClientWithResponses) GetPricesByIdWithResponse(ctx context.Context, id string, params *GetPricesByIdParams, reqEditors ...RequestEditorFn) (*GetPricesByIdResponse, error) {
	rsp, err := c.GetPricesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPricesByIdResponse(rsp)
}

// PutPricesByIdWithBodyWithResponse request with arbitrary body returning *PutPricesByIdResponse
func (c *ClientWithResponses) PutPricesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutPricesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPricesByIdResponse, error) {
	rsp, err := c.PutPricesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPricesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutPricesByIdWithResponse(ctx context.Context, id string, params *PutPricesByIdParams, body PutPricesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPricesByIdResponse, error) {
	rsp, err := c.PutPricesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPricesByIdResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// PostProductsWithBodyWithResponse request with arbitrary body returning *PostProductsResponse
func (c *ClientWithResponses) PostProductsWithBodyWithResponse(ctx context.Context, params *PostProductsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProductsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

func (c *ClientWithResponses) PostProductsWithResponse(ctx context.Context, params *PostProductsParams, body PostProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProductsResponse, error) {
	rsp, err := c.PostProducts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsResponse(rsp)
}

// GetProductsByIdWithResponse request returning *GetProductsByIdResponse
func (c *ClientWithResponses) GetProductsByIdWithResponse(ctx context.Context, id string, params *GetProductsByIdParams, reqEditors ...RequestEditorFn) (*GetProductsByIdResponse, error) {
	rsp, err := c.GetProductsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsByIdResponse(rsp)
}

// PutProductsByIdWithBodyWithResponse request with arbitrary body returning *PutProductsByIdResponse
func (c *ClientWithResponses) PutProductsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutProductsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsByIdResponse, error) {
	rsp, err := c.PutProductsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutProductsByIdWithResponse(ctx context.Context, id string, params *PutProductsByIdParams, body PutProductsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsByIdResponse, error) {
	rsp, err := c.PutProductsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsByIdResponse(rsp)
}

// PostProductsByIdArchiveWithResponse request returning *PostProductsByIdArchiveResponse
func (c *ClientWithResponses) PostProductsByIdArchiveWithResponse(ctx context.Context, id string, params *PostProductsByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostProductsByIdArchiveResponse, error) {
	rsp, err := c.PostProductsByIdArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProductsByIdArchiveResponse(rsp)
}

// GetSeatBalancesWithResponse request returning *GetSeatBalancesResponse
func (c *ClientWithResponses) GetSeatBalancesWithResponse(ctx context.Context, params *GetSeatBalancesParams, reqEditors ...RequestEditorFn) (*GetSeatBalancesResponse, error) {
	rsp, err := c.GetSeatBalances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeatBalancesResponse(rsp)
}

// GetSeatEventsWithResponse request returning *GetSeatEventsResponse
func (c *ClientWithResponses) GetSeatEventsWithResponse(ctx context.Context, params *GetSeatEventsParams, reqEditors ...RequestEditorFn) (*GetSeatEventsResponse, error) {
	rsp, err := c.GetSeatEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeatEventsResponse(rsp)
}

// PostSeatEventsWithBodyWithResponse request with arbitrary body returning *PostSeatEventsResponse
func (c *ClientWithResponses) PostSeatEventsWithBodyWithResponse(ctx context.Context, params *PostSeatEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSeatEventsResponse, error) {
	rsp, err := c.PostSeatEventsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSeatEventsResponse(rsp)
}

func (c *ClientWithResponses) PostSeatEventsWithResponse(ctx context.Context, params *PostSeatEventsParams, body PostSeatEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSeatEventsResponse, error) {
	rsp, err := c.PostSeatEvents(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSeatEventsResponse(rsp)
}

// GetSeatEventsByIdWithResponse request returning *GetSeatEventsByIdResponse
func (c *ClientWithResponses) GetSeatEventsByIdWithResponse(ctx context.Context, id string, params *GetSeatEventsByIdParams, reqEditors ...RequestEditorFn) (*GetSeatEventsByIdResponse, error) {
	rsp, err := c.GetSeatEventsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeatEventsByIdResponse(rsp)
}

// GetSeatMetricsWithResponse request returning *GetSeatMetricsResponse
func (c *ClientWithResponses) GetSeatMetricsWithResponse(ctx context.Context, params *GetSeatMetricsParams, reqEditors ...RequestEditorFn) (*GetSeatMetricsResponse, error) {
	rsp, err := c.GetSeatMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeatMetricsResponse(rsp)
}

// PostSeatMetricsWithBodyWithResponse request with arbitrary body returning *PostSeatMetricsResponse
func (c *ClientWithResponses) PostSeatMetricsWithBodyWithResponse(ctx context.Context, params *PostSeatMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSeatMetricsResponse, error) {
	rsp, err := c.PostSeatMetricsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSeatMetricsResponse(rsp)
}

func (c *ClientWithResponses) PostSeatMetricsWithResponse(ctx context.Context, params *PostSeatMetricsParams, body PostSeatMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSeatMetricsResponse, error) {
	rsp, err := c.PostSeatMetrics(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSeatMetricsResponse(rsp)
}

// DeleteSeatMetricsByIdWithResponse request returning *DeleteSeatMetricsByIdResponse
func (c *ClientWithResponses) DeleteSeatMetricsByIdWithResponse(ctx context.Context, id string, params *DeleteSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*DeleteSeatMetricsByIdResponse, error) {
	rsp, err := c.DeleteSeatMetricsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSeatMetricsByIdResponse(rsp)
}

// GetSeatMetricsByIdWithResponse request returning *GetSeatMetricsByIdResponse
func (c *ClientWithResponses) GetSeatMetricsByIdWithResponse(ctx context.Context, id string, params *GetSeatMetricsByIdParams, reqEditors ...RequestEditorFn) (*GetSeatMetricsByIdResponse, error) {
	rsp, err := c.GetSeatMetricsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeatMetricsByIdResponse(rsp)
}

// PutSeatMetricsByIdWithBodyWithResponse request with arbitrary body returning *PutSeatMetricsByIdResponse
func (c *ClientWithResponses) PutSeatMetricsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutSeatMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSeatMetricsByIdResponse, error) {
	rsp, err := c.PutSeatMetricsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSeatMetricsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutSeatMetricsByIdWithResponse(ctx context.Context, id string, params *PutSeatMetricsByIdParams, body PutSeatMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSeatMetricsByIdResponse, error) {
	rsp, err := c.PutSeatMetricsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSeatMetricsByIdResponse(rsp)
}

// GetSequenceAccountsWithResponse request returning *GetSequenceAccountsResponse
func (c *ClientWithResponses) GetSequenceAccountsWithResponse(ctx context.Context, params *GetSequenceAccountsParams, reqEditors ...RequestEditorFn) (*GetSequenceAccountsResponse, error) {
	rsp, err := c.GetSequenceAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSequenceAccountsResponse(rsp)
}

// GetSequenceAccountsByIdWithResponse request returning *GetSequenceAccountsByIdResponse
func (c *ClientWithResponses) GetSequenceAccountsByIdWithResponse(ctx context.Context, id string, params *GetSequenceAccountsByIdParams, reqEditors ...RequestEditorFn) (*GetSequenceAccountsByIdResponse, error) {
	rsp, err := c.GetSequenceAccountsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSequenceAccountsByIdResponse(rsp)
}

// PutSequenceAccountsByIdWithBodyWithResponse request with arbitrary body returning *PutSequenceAccountsByIdResponse
func (c *ClientWithResponses) PutSequenceAccountsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSequenceAccountsByIdResponse, error) {
	rsp, err := c.PutSequenceAccountsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSequenceAccountsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutSequenceAccountsByIdWithResponse(ctx context.Context, id string, params *PutSequenceAccountsByIdParams, body PutSequenceAccountsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSequenceAccountsByIdResponse, error) {
	rsp, err := c.PutSequenceAccountsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSequenceAccountsByIdResponse(rsp)
}

// GetTaxRatesWithResponse request returning *GetTaxRatesResponse
func (c *ClientWithResponses) GetTaxRatesWithResponse(ctx context.Context, params *GetTaxRatesParams, reqEditors ...RequestEditorFn) (*GetTaxRatesResponse, error) {
	rsp, err := c.GetTaxRates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesResponse(rsp)
}

// PostTaxRatesWithBodyWithResponse request with arbitrary body returning *PostTaxRatesResponse
func (c *ClientWithResponses) PostTaxRatesWithBodyWithResponse(ctx context.Context, params *PostTaxRatesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error) {
	rsp, err := c.PostTaxRatesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRatesWithResponse(ctx context.Context, params *PostTaxRatesParams, body PostTaxRatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRatesResponse, error) {
	rsp, err := c.PostTaxRates(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesResponse(rsp)
}

// DeleteTaxRatesByIdWithResponse request returning *DeleteTaxRatesByIdResponse
func (c *ClientWithResponses) DeleteTaxRatesByIdWithResponse(ctx context.Context, id string, params *DeleteTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*DeleteTaxRatesByIdResponse, error) {
	rsp, err := c.DeleteTaxRatesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRatesByIdResponse(rsp)
}

// GetTaxRatesByIdWithResponse request returning *GetTaxRatesByIdResponse
func (c *ClientWithResponses) GetTaxRatesByIdWithResponse(ctx context.Context, id string, params *GetTaxRatesByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRatesByIdResponse, error) {
	rsp, err := c.GetTaxRatesById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRatesByIdResponse(rsp)
}

// PutTaxRatesByIdWithBodyWithResponse request with arbitrary body returning *PutTaxRatesByIdResponse
func (c *ClientWithResponses) PutTaxRatesByIdWithBodyWithResponse(ctx context.Context, id string, params *PutTaxRatesByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxRatesByIdResponse, error) {
	rsp, err := c.PutTaxRatesByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxRatesByIdResponse(rsp)
}

func (c *ClientWithResponses) PutTaxRatesByIdWithResponse(ctx context.Context, id string, params *PutTaxRatesByIdParams, body PutTaxRatesByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxRatesByIdResponse, error) {
	rsp, err := c.PutTaxRatesById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxRatesByIdResponse(rsp)
}

// PostTaxRatesByIdArchiveWithResponse request returning *PostTaxRatesByIdArchiveResponse
func (c *ClientWithResponses) PostTaxRatesByIdArchiveWithResponse(ctx context.Context, id string, params *PostTaxRatesByIdArchiveParams, reqEditors ...RequestEditorFn) (*PostTaxRatesByIdArchiveResponse, error) {
	rsp, err := c.PostTaxRatesByIdArchive(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRatesByIdArchiveResponse(rsp)
}

// GetTaxRegistrationsWithResponse request returning *GetTaxRegistrationsResponse
func (c *ClientWithResponses) GetTaxRegistrationsWithResponse(ctx context.Context, params *GetTaxRegistrationsParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsResponse, error) {
	rsp, err := c.GetTaxRegistrations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegistrationsResponse(rsp)
}

// PostTaxRegistrationsWithBodyWithResponse request with arbitrary body returning *PostTaxRegistrationsResponse
func (c *ClientWithResponses) PostTaxRegistrationsWithBodyWithResponse(ctx context.Context, params *PostTaxRegistrationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTaxRegistrationsResponse, error) {
	rsp, err := c.PostTaxRegistrationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRegistrationsResponse(rsp)
}

func (c *ClientWithResponses) PostTaxRegistrationsWithResponse(ctx context.Context, params *PostTaxRegistrationsParams, body PostTaxRegistrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTaxRegistrationsResponse, error) {
	rsp, err := c.PostTaxRegistrations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTaxRegistrationsResponse(rsp)
}

// GetTaxRegistrationsForCustomerByIdWithResponse request returning *GetTaxRegistrationsForCustomerByIdResponse
func (c *ClientWithResponses) GetTaxRegistrationsForCustomerByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsForCustomerByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsForCustomerByIdResponse, error) {
	rsp, err := c.GetTaxRegistrationsForCustomerById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegistrationsForCustomerByIdResponse(rsp)
}

// GetTaxRegistrationsForMerchantByIdWithResponse request returning *GetTaxRegistrationsForMerchantByIdResponse
func (c *ClientWithResponses) GetTaxRegistrationsForMerchantByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsForMerchantByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsForMerchantByIdResponse, error) {
	rsp, err := c.GetTaxRegistrationsForMerchantById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegistrationsForMerchantByIdResponse(rsp)
}

// DeleteTaxRegistrationsByIdWithResponse request returning *DeleteTaxRegistrationsByIdResponse
func (c *ClientWithResponses) DeleteTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *DeleteTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*DeleteTaxRegistrationsByIdResponse, error) {
	rsp, err := c.DeleteTaxRegistrationsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaxRegistrationsByIdResponse(rsp)
}

// GetTaxRegistrationsByIdWithResponse request returning *GetTaxRegistrationsByIdResponse
func (c *ClientWithResponses) GetTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *GetTaxRegistrationsByIdParams, reqEditors ...RequestEditorFn) (*GetTaxRegistrationsByIdResponse, error) {
	rsp, err := c.GetTaxRegistrationsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxRegistrationsByIdResponse(rsp)
}

// PutTaxRegistrationsByIdWithBodyWithResponse request with arbitrary body returning *PutTaxRegistrationsByIdResponse
func (c *ClientWithResponses) PutTaxRegistrationsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTaxRegistrationsByIdResponse, error) {
	rsp, err := c.PutTaxRegistrationsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxRegistrationsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutTaxRegistrationsByIdWithResponse(ctx context.Context, id string, params *PutTaxRegistrationsByIdParams, body PutTaxRegistrationsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTaxRegistrationsByIdResponse, error) {
	rsp, err := c.PutTaxRegistrationsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTaxRegistrationsByIdResponse(rsp)
}

// GetUsageEventsWithResponse request returning *GetUsageEventsResponse
func (c *ClientWithResponses) GetUsageEventsWithResponse(ctx context.Context, params *GetUsageEventsParams, reqEditors ...RequestEditorFn) (*GetUsageEventsResponse, error) {
	rsp, err := c.GetUsageEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageEventsResponse(rsp)
}

// PostUsageEventsWithBodyWithResponse request with arbitrary body returning *PostUsageEventsResponse
func (c *ClientWithResponses) PostUsageEventsWithBodyWithResponse(ctx context.Context, params *PostUsageEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsageEventsResponse, error) {
	rsp, err := c.PostUsageEventsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsageEventsResponse(rsp)
}

func (c *ClientWithResponses) PostUsageEventsWithResponse(ctx context.Context, params *PostUsageEventsParams, body PostUsageEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsageEventsResponse, error) {
	rsp, err := c.PostUsageEvents(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsageEventsResponse(rsp)
}

// GetUsageMetricsWithResponse request returning *GetUsageMetricsResponse
func (c *ClientWithResponses) GetUsageMetricsWithResponse(ctx context.Context, params *GetUsageMetricsParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsResponse, error) {
	rsp, err := c.GetUsageMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageMetricsResponse(rsp)
}

// PostUsageMetricsWithBodyWithResponse request with arbitrary body returning *PostUsageMetricsResponse
func (c *ClientWithResponses) PostUsageMetricsWithBodyWithResponse(ctx context.Context, params *PostUsageMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsageMetricsResponse, error) {
	rsp, err := c.PostUsageMetricsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsageMetricsResponse(rsp)
}

func (c *ClientWithResponses) PostUsageMetricsWithResponse(ctx context.Context, params *PostUsageMetricsParams, body PostUsageMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsageMetricsResponse, error) {
	rsp, err := c.PostUsageMetrics(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsageMetricsResponse(rsp)
}

// DeleteUsageMetricsByIdWithResponse request returning *DeleteUsageMetricsByIdResponse
func (c *ClientWithResponses) DeleteUsageMetricsByIdWithResponse(ctx context.Context, id string, params *DeleteUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*DeleteUsageMetricsByIdResponse, error) {
	rsp, err := c.DeleteUsageMetricsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsageMetricsByIdResponse(rsp)
}

// GetUsageMetricsByIdWithResponse request returning *GetUsageMetricsByIdResponse
func (c *ClientWithResponses) GetUsageMetricsByIdWithResponse(ctx context.Context, id string, params *GetUsageMetricsByIdParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsByIdResponse, error) {
	rsp, err := c.GetUsageMetricsById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageMetricsByIdResponse(rsp)
}

// PutUsageMetricsByIdWithBodyWithResponse request with arbitrary body returning *PutUsageMetricsByIdResponse
func (c *ClientWithResponses) PutUsageMetricsByIdWithBodyWithResponse(ctx context.Context, id string, params *PutUsageMetricsByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsageMetricsByIdResponse, error) {
	rsp, err := c.PutUsageMetricsByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsageMetricsByIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsageMetricsByIdWithResponse(ctx context.Context, id string, params *PutUsageMetricsByIdParams, body PutUsageMetricsByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsageMetricsByIdResponse, error) {
	rsp, err := c.PutUsageMetricsById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsageMetricsByIdResponse(rsp)
}

// GetUsageMetricsByUsageMetricIdCalculateWithResponse request returning *GetUsageMetricsByUsageMetricIdCalculateResponse
func (c *ClientWithResponses) GetUsageMetricsByUsageMetricIdCalculateWithResponse(ctx context.Context, usageMetricId string, params *GetUsageMetricsByUsageMetricIdCalculateParams, reqEditors ...RequestEditorFn) (*GetUsageMetricsByUsageMetricIdCalculateResponse, error) {
	rsp, err := c.GetUsageMetricsByUsageMetricIdCalculate(ctx, usageMetricId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageMetricsByUsageMetricIdCalculateResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// DeleteUsersByIdWithResponse request returning *DeleteUsersByIdResponse
func (c *ClientWithResponses) DeleteUsersByIdWithResponse(ctx context.Context, id string, params *DeleteUsersByIdParams, reqEditors ...RequestEditorFn) (*DeleteUsersByIdResponse, error) {
	rsp, err := c.DeleteUsersById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersByIdResponse(rsp)
}

// GetUsersByIdWithResponse request returning *GetUsersByIdResponse
func (c *ClientWithResponses) GetUsersByIdWithResponse(ctx context.Context, id string, params *GetUsersByIdParams, reqEditors ...RequestEditorFn) (*GetUsersByIdResponse, error) {
	rsp, err := c.GetUsersById(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersByIdResponse(rsp)
}

// PutUsersByIdWithBodyWithResponse request with arbitrary body returning *PutUsersByIdResponse
func (c *ClientWithResponses) PutUsersByIdWithBodyWithResponse(ctx context.Context, id string, params *PutUsersByIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersByIdResponse, error) {
	rsp, err := c.PutUsersByIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersByIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersByIdWithResponse(ctx context.Context, id string, params *PutUsersByIdParams, body PutUsersByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersByIdResponse, error) {
	rsp, err := c.PutUsersById(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersByIdResponse(rsp)
}

// ParseGetBillingProductsResponse parses an HTTP response from a GetBillingProductsWithResponse call
func ParseGetBillingProductsResponse(rsp *http.Response) (*GetBillingProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBillingProductsEndpointListProductResponsePaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingSchedulesResponse parses an HTTP response from a GetBillingSchedulesWithResponse call
func ParseGetBillingSchedulesResponse(rsp *http.Response) (*GetBillingSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBillingSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingSchedulesResponse parses an HTTP response from a PostBillingSchedulesWithResponse call
func ParsePostBillingSchedulesResponse(rsp *http.Response) (*PostBillingSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostBillingSchedulesValidateTaxesResponse parses an HTTP response from a PostBillingSchedulesValidateTaxesWithResponse call
func ParsePostBillingSchedulesValidateTaxesResponse(rsp *http.Response) (*PostBillingSchedulesValidateTaxesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingSchedulesValidateTaxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBillingSchedulesByBillingScheduleIdResponse parses an HTTP response from a GetBillingSchedulesByBillingScheduleIdWithResponse call
func ParseGetBillingSchedulesByBillingScheduleIdResponse(rsp *http.Response) (*GetBillingSchedulesByBillingScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingSchedulesByBillingScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingSchedulesByBillingScheduleIdResponse parses an HTTP response from a PutBillingSchedulesByBillingScheduleIdWithResponse call
func ParsePutBillingSchedulesByBillingScheduleIdResponse(rsp *http.Response) (*PutBillingSchedulesByBillingScheduleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingSchedulesByBillingScheduleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBillingSchedulesByBillingScheduleIdActivateResponse parses an HTTP response from a PutBillingSchedulesByBillingScheduleIdActivateWithResponse call
func ParsePutBillingSchedulesByBillingScheduleIdActivateResponse(rsp *http.Response) (*PutBillingSchedulesByBillingScheduleIdActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBillingSchedulesByBillingScheduleIdActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBillingSchedulesByBillingScheduleIdArchiveResponse parses an HTTP response from a PostBillingSchedulesByBillingScheduleIdArchiveWithResponse call
func ParsePostBillingSchedulesByBillingScheduleIdArchiveResponse(rsp *http.Response) (*PostBillingSchedulesByBillingScheduleIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBillingSchedulesByBillingScheduleIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesResponse parses an HTTP response from a GetCreditNotesWithResponse call
func ParseGetCreditNotesResponse(rsp *http.Response) (*GetCreditNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreditNoteEndpointProductListCreditNotePaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesResponse parses an HTTP response from a PostCreditNotesWithResponse call
func ParsePostCreditNotesResponse(rsp *http.Response) (*PostCreditNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesByCreditnoteLineItemGroupsResponse parses an HTTP response from a GetCreditNotesByCreditnoteLineItemGroupsWithResponse call
func ParseGetCreditNotesByCreditnoteLineItemGroupsResponse(rsp *http.Response) (*GetCreditNotesByCreditnoteLineItemGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesByCreditnoteLineItemGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreditNoteLineItemGroupEndpointProductListCreditNoteLineItemGroupPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesByCreditnoteLineItemGroupsResponse parses an HTTP response from a PostCreditNotesByCreditnoteLineItemGroupsWithResponse call
func ParsePostCreditNotesByCreditnoteLineItemGroupsResponse(rsp *http.Response) (*PostCreditNotesByCreditnoteLineItemGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByCreditnoteLineItemGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCreditNoteLineItemGroupEndpointProductCreateCreditNoteLineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse parses an HTTP response from a DeleteCreditNotesByCreditnoteLineItemGroupsByIdWithResponse call
func ParseDeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse(rsp *http.Response) (*DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCreditNotesByCreditnoteLineItemGroupsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCreditNoteLineItemGroupEndpointProductDeleteCreditNoteLineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCreditNotesByCreditnoteLineItemGroupsByIdResponse parses an HTTP response from a PutCreditNotesByCreditnoteLineItemGroupsByIdWithResponse call
func ParsePutCreditNotesByCreditnoteLineItemGroupsByIdResponse(rsp *http.Response) (*PutCreditNotesByCreditnoteLineItemGroupsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCreditNotesByCreditnoteLineItemGroupsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCreditNoteLineItemGroupEndpointProductUpdateCreditNoteLineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesByCreditnoteLineItemsResponse parses an HTTP response from a GetCreditNotesByCreditnoteLineItemsWithResponse call
func ParseGetCreditNotesByCreditnoteLineItemsResponse(rsp *http.Response) (*GetCreditNotesByCreditnoteLineItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesByCreditnoteLineItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreditNoteLineItemEndpointProductListCreditNoteLineItemPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesByCreditnoteLineItemsResponse parses an HTTP response from a PostCreditNotesByCreditnoteLineItemsWithResponse call
func ParsePostCreditNotesByCreditnoteLineItemsResponse(rsp *http.Response) (*PostCreditNotesByCreditnoteLineItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByCreditnoteLineItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCreditNoteLineItemEndpointProductCreateCreditNoteLineItemResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCreditNotesByCreditnoteLineItemsByIdResponse parses an HTTP response from a DeleteCreditNotesByCreditnoteLineItemsByIdWithResponse call
func ParseDeleteCreditNotesByCreditnoteLineItemsByIdResponse(rsp *http.Response) (*DeleteCreditNotesByCreditnoteLineItemsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCreditNotesByCreditnoteLineItemsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCreditNoteLineItemEndpointProductDeleteCreditNoteLineItemResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCreditNotesByCreditnoteLineItemsByIdResponse parses an HTTP response from a PutCreditNotesByCreditnoteLineItemsByIdWithResponse call
func ParsePutCreditNotesByCreditnoteLineItemsByIdResponse(rsp *http.Response) (*PutCreditNotesByCreditnoteLineItemsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCreditNotesByCreditnoteLineItemsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCreditNoteLineItemEndpointProductUpdateCreditNoteLineItemResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCreditNotesByIdResponse parses an HTTP response from a DeleteCreditNotesByIdWithResponse call
func ParseDeleteCreditNotesByIdResponse(rsp *http.Response) (*DeleteCreditNotesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCreditNotesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesByIdResponse parses an HTTP response from a GetCreditNotesByIdWithResponse call
func ParseGetCreditNotesByIdResponse(rsp *http.Response) (*GetCreditNotesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCreditNotesByIdResponse parses an HTTP response from a PutCreditNotesByIdWithResponse call
func ParsePutCreditNotesByIdResponse(rsp *http.Response) (*PutCreditNotesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCreditNotesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditNotesByIdDownloadResponse parses an HTTP response from a GetCreditNotesByIdDownloadWithResponse call
func ParseGetCreditNotesByIdDownloadResponse(rsp *http.Response) (*GetCreditNotesByIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditNotesByIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCreditNotesByIdFinalizeResponse parses an HTTP response from a PostCreditNotesByIdFinalizeWithResponse call
func ParsePostCreditNotesByIdFinalizeResponse(rsp *http.Response) (*PostCreditNotesByIdFinalizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByIdFinalizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesByIdFinalizeAndSendResponse parses an HTTP response from a PostCreditNotesByIdFinalizeAndSendWithResponse call
func ParsePostCreditNotesByIdFinalizeAndSendResponse(rsp *http.Response) (*PostCreditNotesByIdFinalizeAndSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByIdFinalizeAndSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesByIdSendResponse parses an HTTP response from a PostCreditNotesByIdSendWithResponse call
func ParsePostCreditNotesByIdSendResponse(rsp *http.Response) (*PostCreditNotesByIdSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByIdSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditNotesByIdVoidResponse parses an HTTP response from a PostCreditNotesByIdVoidWithResponse call
func ParsePostCreditNotesByIdVoidResponse(rsp *http.Response) (*PostCreditNotesByIdVoidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditNotesByIdVoidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditNote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditsResponse parses an HTTP response from a GetCreditsWithResponse call
func ParseGetCreditsResponse(rsp *http.Response) (*GetCreditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreditGrantEndpointResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCreditsResponse parses an HTTP response from a PostCreditsWithResponse call
func ParsePostCreditsResponse(rsp *http.Response) (*PostCreditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCreditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCreditGrantEndpointProductCreateCreditGrantResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCreditsByCustomerIdBalancesResponse parses an HTTP response from a GetCreditsByCustomerIdBalancesWithResponse call
func ParseGetCreditsByCustomerIdBalancesResponse(rsp *http.Response) (*GetCreditsByCustomerIdBalancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditsByCustomerIdBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditBalancesReply
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditsByCustomerIdGrantsResponse parses an HTTP response from a GetCreditsByCustomerIdGrantsWithResponse call
func ParseGetCreditsByCustomerIdGrantsResponse(rsp *http.Response) (*GetCreditsByCustomerIdGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditsByCustomerIdGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCreditGrantsForCustomerEndpointCreditGrantsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCreditsByIdResponse parses an HTTP response from a GetCreditsByIdWithResponse call
func ParseGetCreditsByIdResponse(rsp *http.Response) (*GetCreditsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCreditsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreditGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerAliasesResponse parses an HTTP response from a GetCustomerAliasesWithResponse call
func ParseGetCustomerAliasesResponse(rsp *http.Response) (*GetCustomerAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCustomerAliasEndpointProductListCustomerAliasPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomerAliasesResponse parses an HTTP response from a PostCustomerAliasesWithResponse call
func ParsePostCustomerAliasesResponse(rsp *http.Response) (*PostCustomerAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCustomerAliasEndpointProductCreateCustomerAliasResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCustomerAliasesByIdResponse parses an HTTP response from a DeleteCustomerAliasesByIdWithResponse call
func ParseDeleteCustomerAliasesByIdResponse(rsp *http.Response) (*DeleteCustomerAliasesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomerAliasesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCustomerAliasEndpointProductDeleteCustomerAliasResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomerAliasesByIdResponse parses an HTTP response from a PutCustomerAliasesByIdWithResponse call
func ParsePutCustomerAliasesByIdResponse(rsp *http.Response) (*PutCustomerAliasesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerAliasesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCustomerAliasEndpointProductUpdateCustomerAliasResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomerOrganizationsResponse parses an HTTP response from a PostCustomerOrganizationsWithResponse call
func ParsePostCustomerOrganizationsResponse(rsp *http.Response) (*PostCustomerOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomerOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostCustomerOrganizationsByIdMembersResponse parses an HTTP response from a PostCustomerOrganizationsByIdMembersWithResponse call
func ParsePostCustomerOrganizationsByIdMembersResponse(rsp *http.Response) (*PostCustomerOrganizationsByIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerOrganizationsByIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomerOrganizationsByIdMembersResponse parses an HTTP response from a PutCustomerOrganizationsByIdMembersWithResponse call
func ParsePutCustomerOrganizationsByIdMembersResponse(rsp *http.Response) (*PutCustomerOrganizationsByIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerOrganizationsByIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersResponse parses an HTTP response from a PostCustomersWithResponse call
func ParsePostCustomersResponse(rsp *http.Response) (*PostCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCustomersByAliasByAliasResponse parses an HTTP response from a GetCustomersByAliasByAliasWithResponse call
func ParseGetCustomersByAliasByAliasResponse(rsp *http.Response) (*GetCustomersByAliasByAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersByAliasByAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer20240509
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersByCustomerContactsResponse parses an HTTP response from a GetCustomersByCustomerContactsWithResponse call
func ParseGetCustomersByCustomerContactsResponse(rsp *http.Response) (*GetCustomersByCustomerContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersByCustomerContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListContactEndpointContactResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersByCustomerContactsResponse parses an HTTP response from a PostCustomersByCustomerContactsWithResponse call
func ParsePostCustomersByCustomerContactsResponse(rsp *http.Response) (*PostCustomersByCustomerContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersByCustomerContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePutCustomersByCustomerContactsByIdResponse parses an HTTP response from a PutCustomersByCustomerContactsByIdWithResponse call
func ParsePutCustomersByCustomerContactsByIdResponse(rsp *http.Response) (*PutCustomersByCustomerContactsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersByCustomerContactsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersByCustomerContactsByIdArchiveResponse parses an HTTP response from a PostCustomersByCustomerContactsByIdArchiveWithResponse call
func ParsePostCustomersByCustomerContactsByIdArchiveResponse(rsp *http.Response) (*PostCustomersByCustomerContactsByIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersByCustomerContactsByIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contact
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersByIdResponse parses an HTTP response from a GetCustomersByIdWithResponse call
func ParseGetCustomersByIdResponse(rsp *http.Response) (*GetCustomersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCustomersByIdResponse parses an HTTP response from a PutCustomersByIdWithResponse call
func ParsePutCustomersByIdResponse(rsp *http.Response) (*PutCustomersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersByIdAliasesResponse parses an HTTP response from a GetCustomersByIdAliasesWithResponse call
func ParseGetCustomersByIdAliasesResponse(rsp *http.Response) (*GetCustomersByIdAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersByIdAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCustomerAliasesEndpointEndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomersByIdArchiveResponse parses an HTTP response from a PostCustomersByIdArchiveWithResponse call
func ParsePostCustomersByIdArchiveResponse(rsp *http.Response) (*PostCustomersByIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomersByIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDiscountsResponse parses an HTTP response from a GetDiscountsWithResponse call
func ParseGetDiscountsResponse(rsp *http.Response) (*GetDiscountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiscountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListDiscountEndpointProductListDiscountPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDiscountsByIdResponse parses an HTTP response from a DeleteDiscountsByIdWithResponse call
func ParseDeleteDiscountsByIdResponse(rsp *http.Response) (*DeleteDiscountsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDiscountsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteDiscountEndpointProductDeleteDiscountResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDiscountsByIdResponse parses an HTTP response from a GetDiscountsByIdWithResponse call
func ParseGetDiscountsByIdResponse(rsp *http.Response) (*GetDiscountsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDiscountsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetDiscountEndpointProductGetDiscountResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDiscountsByIdResponse parses an HTTP response from a PutDiscountsByIdWithResponse call
func ParsePutDiscountsByIdResponse(rsp *http.Response) (*PutDiscountsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDiscountsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateDiscountEndpointProductUpdateDiscountResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesResponse parses an HTTP response from a GetInvoicesWithResponse call
func ParseGetInvoicesResponse(rsp *http.Response) (*GetInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListInvoiceEndpointListInvoicePaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesResponse parses an HTTP response from a PostInvoicesWithResponse call
func ParsePostInvoicesResponse(rsp *http.Response) (*PostInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetInvoicesRenderSettingsResponse parses an HTTP response from a GetInvoicesRenderSettingsWithResponse call
func ParseGetInvoicesRenderSettingsResponse(rsp *http.Response) (*GetInvoicesRenderSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesRenderSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrCreateInvoiceRenderSettingsEndpointProductCreateInvoiceRenderSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesRenderSettingsByIdResponse parses an HTTP response from a PutInvoicesRenderSettingsByIdWithResponse call
func ParsePutInvoicesRenderSettingsByIdResponse(rsp *http.Response) (*PutInvoicesRenderSettingsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesRenderSettingsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateInvoiceRenderSettingsEndpointProductUpdateInvoiceRenderSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteInvoicesByIdResponse parses an HTTP response from a DeleteInvoicesByIdWithResponse call
func ParseDeleteInvoicesByIdResponse(rsp *http.Response) (*DeleteInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteInvoiceEndpointProductDeleteInvoiceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesByIdResponse parses an HTTP response from a GetInvoicesByIdWithResponse call
func ParseGetInvoicesByIdResponse(rsp *http.Response) (*GetInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInvoiceEndpointProductGetInvoiceResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchInvoicesByIdResponse parses an HTTP response from a PatchInvoicesByIdWithResponse call
func ParsePatchInvoicesByIdResponse(rsp *http.Response) (*PatchInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesByIdResponse parses an HTTP response from a PutInvoicesByIdWithResponse call
func ParsePutInvoicesByIdResponse(rsp *http.Response) (*PutInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesByIdDownloadResponse parses an HTTP response from a GetInvoicesByIdDownloadWithResponse call
func ParseGetInvoicesByIdDownloadResponse(rsp *http.Response) (*GetInvoicesByIdDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesByIdDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostInvoicesByIdDraftResponse parses an HTTP response from a PostInvoicesByIdDraftWithResponse call
func ParsePostInvoicesByIdDraftResponse(rsp *http.Response) (*PostInvoicesByIdDraftResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdDraftResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByIdFinalizeResponse parses an HTTP response from a PostInvoicesByIdFinalizeWithResponse call
func ParsePostInvoicesByIdFinalizeResponse(rsp *http.Response) (*PostInvoicesByIdFinalizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdFinalizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByIdFinalizeAndSendResponse parses an HTTP response from a PostInvoicesByIdFinalizeAndSendWithResponse call
func ParsePostInvoicesByIdFinalizeAndSendResponse(rsp *http.Response) (*PostInvoicesByIdFinalizeAndSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdFinalizeAndSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesByIdPaymentStatusResponse parses an HTTP response from a PutInvoicesByIdPaymentStatusWithResponse call
func ParsePutInvoicesByIdPaymentStatusResponse(rsp *http.Response) (*PutInvoicesByIdPaymentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesByIdPaymentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByIdSendResponse parses an HTTP response from a PostInvoicesByIdSendWithResponse call
func ParsePostInvoicesByIdSendResponse(rsp *http.Response) (*PostInvoicesByIdSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByIdSendPaymentReminderResponse parses an HTTP response from a PostInvoicesByIdSendPaymentReminderWithResponse call
func ParsePostInvoicesByIdSendPaymentReminderResponse(rsp *http.Response) (*PostInvoicesByIdSendPaymentReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdSendPaymentReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByIdVoidResponse parses an HTTP response from a PostInvoicesByIdVoidWithResponse call
func ParsePostInvoicesByIdVoidResponse(rsp *http.Response) (*PostInvoicesByIdVoidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByIdVoidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesByInvoiceLineItemGroupsResponse parses an HTTP response from a GetInvoicesByInvoiceLineItemGroupsWithResponse call
func ParseGetInvoicesByInvoiceLineItemGroupsResponse(rsp *http.Response) (*GetInvoicesByInvoiceLineItemGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesByInvoiceLineItemGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLineItemGroupEndpointProductListLineItemGroupPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByInvoiceLineItemGroupsResponse parses an HTTP response from a PostInvoicesByInvoiceLineItemGroupsWithResponse call
func ParsePostInvoicesByInvoiceLineItemGroupsResponse(rsp *http.Response) (*PostInvoicesByInvoiceLineItemGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByInvoiceLineItemGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteInvoicesByInvoiceLineItemGroupsByIdResponse parses an HTTP response from a DeleteInvoicesByInvoiceLineItemGroupsByIdWithResponse call
func ParseDeleteInvoicesByInvoiceLineItemGroupsByIdResponse(rsp *http.Response) (*DeleteInvoicesByInvoiceLineItemGroupsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesByInvoiceLineItemGroupsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesByInvoiceLineItemGroupsByIdResponse parses an HTTP response from a PutInvoicesByInvoiceLineItemGroupsByIdWithResponse call
func ParsePutInvoicesByInvoiceLineItemGroupsByIdResponse(rsp *http.Response) (*PutInvoicesByInvoiceLineItemGroupsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesByInvoiceLineItemGroupsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LineItemGroupResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoicesByInvoiceLineItemsResponse parses an HTTP response from a GetInvoicesByInvoiceLineItemsWithResponse call
func ParseGetInvoicesByInvoiceLineItemsResponse(rsp *http.Response) (*GetInvoicesByInvoiceLineItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesByInvoiceLineItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListLineItemEndpointPaginatedLineItemResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesByInvoiceLineItemsResponse parses an HTTP response from a PostInvoicesByInvoiceLineItemsWithResponse call
func ParsePostInvoicesByInvoiceLineItemsResponse(rsp *http.Response) (*PostInvoicesByInvoiceLineItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesByInvoiceLineItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Stable20240101LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteInvoicesByInvoiceLineItemsByIdResponse parses an HTTP response from a DeleteInvoicesByInvoiceLineItemsByIdWithResponse call
func ParseDeleteInvoicesByInvoiceLineItemsByIdResponse(rsp *http.Response) (*DeleteInvoicesByInvoiceLineItemsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesByInvoiceLineItemsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240101LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutInvoicesByInvoiceLineItemsByIdResponse parses an HTTP response from a PutInvoicesByInvoiceLineItemsByIdWithResponse call
func ParsePutInvoicesByInvoiceLineItemsByIdResponse(rsp *http.Response) (*PutInvoicesByInvoiceLineItemsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoicesByInvoiceLineItemsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240101LineItemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetListPricesResponse parses an HTTP response from a GetListPricesWithResponse call
func ParseGetListPricesResponse(rsp *http.Response) (*GetListPricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListPricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostListPricesResponse parses an HTTP response from a PostListPricesWithResponse call
func ParsePostListPricesResponse(rsp *http.Response) (*PostListPricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListPricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetListPricesByIdResponse parses an HTTP response from a GetListPricesByIdWithResponse call
func ParseGetListPricesByIdResponse(rsp *http.Response) (*GetListPricesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetListPricesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutListPricesByIdResponse parses an HTTP response from a PutListPricesByIdWithResponse call
func ParsePutListPricesByIdResponse(rsp *http.Response) (*PutListPricesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutListPricesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostListPricesByIdArchiveResponse parses an HTTP response from a PostListPricesByIdArchiveWithResponse call
func ParsePostListPricesByIdArchiveResponse(rsp *http.Response) (*PostListPricesByIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostListPricesByIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNotificationsPoliciesResponse parses an HTTP response from a GetNotificationsPoliciesWithResponse call
func ParseGetNotificationsPoliciesResponse(rsp *http.Response) (*GetNotificationsPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationsPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNotificationsPoliciesResponse parses an HTTP response from a PostNotificationsPoliciesWithResponse call
func ParsePostNotificationsPoliciesResponse(rsp *http.Response) (*PostNotificationsPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotificationsPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DatabaseErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNotificationsPoliciesByIdResponse parses an HTTP response from a DeleteNotificationsPoliciesByIdWithResponse call
func ParseDeleteNotificationsPoliciesByIdResponse(rsp *http.Response) (*DeleteNotificationsPoliciesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsPoliciesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNotificationsPoliciesByIdResponse parses an HTTP response from a GetNotificationsPoliciesByIdWithResponse call
func ParseGetNotificationsPoliciesByIdResponse(rsp *http.Response) (*GetNotificationsPoliciesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationsPoliciesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNotificationsPoliciesByIdNotificationTypesResponse parses an HTTP response from a PostNotificationsPoliciesByIdNotificationTypesWithResponse call
func ParsePostNotificationsPoliciesByIdNotificationTypesResponse(rsp *http.Response) (*PostNotificationsPoliciesByIdNotificationTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotificationsPoliciesByIdNotificationTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DatabaseErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse parses an HTTP response from a DeleteNotificationsPoliciesByIdNotificationTypesByTypeWithResponse call
func ParseDeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse(rsp *http.Response) (*DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsPoliciesByIdNotificationTypesByTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DatabaseErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostNotificationsPoliciesByIdRecipientsResponse parses an HTTP response from a PostNotificationsPoliciesByIdRecipientsWithResponse call
func ParsePostNotificationsPoliciesByIdRecipientsResponse(rsp *http.Response) (*PostNotificationsPoliciesByIdRecipientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNotificationsPoliciesByIdRecipientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DatabaseErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteNotificationsPoliciesByIdRecipientsByRecipientResponse parses an HTTP response from a DeleteNotificationsPoliciesByIdRecipientsByRecipientWithResponse call
func ParseDeleteNotificationsPoliciesByIdRecipientsByRecipientResponse(rsp *http.Response) (*DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationsPoliciesByIdRecipientsByRecipientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DatabaseErrors
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsResponse parses an HTTP response from a GetPaymentsSettingsWithResponse call
func ParseGetPaymentsSettingsResponse(rsp *http.Response) (*GetPaymentsSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountPaymentSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPaymentsSettingsBillingSchedulesResponse parses an HTTP response from a PostPaymentsSettingsBillingSchedulesWithResponse call
func ParsePostPaymentsSettingsBillingSchedulesResponse(rsp *http.Response) (*PostPaymentsSettingsBillingSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsSettingsBillingSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingScheduleSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse parses an HTTP response from a GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdWithResponse call
func ParseGetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse(rsp *http.Response) (*GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsBillingSchedulesForBillingScheduleByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePaymentsSettingsBillingSchedulesByIdResponse parses an HTTP response from a DeletePaymentsSettingsBillingSchedulesByIdWithResponse call
func ParseDeletePaymentsSettingsBillingSchedulesByIdResponse(rsp *http.Response) (*DeletePaymentsSettingsBillingSchedulesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePaymentsSettingsBillingSchedulesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsBillingSchedulesByIdResponse parses an HTTP response from a GetPaymentsSettingsBillingSchedulesByIdWithResponse call
func ParseGetPaymentsSettingsBillingSchedulesByIdResponse(rsp *http.Response) (*GetPaymentsSettingsBillingSchedulesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsBillingSchedulesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPaymentsSettingsBillingSchedulesByIdResponse parses an HTTP response from a PutPaymentsSettingsBillingSchedulesByIdWithResponse call
func ParsePutPaymentsSettingsBillingSchedulesByIdResponse(rsp *http.Response) (*PutPaymentsSettingsBillingSchedulesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPaymentsSettingsBillingSchedulesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingScheduleSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPaymentsSettingsCustomersResponse parses an HTTP response from a PostPaymentsSettingsCustomersWithResponse call
func ParsePostPaymentsSettingsCustomersResponse(rsp *http.Response) (*PostPaymentsSettingsCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsSettingsCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateCustomerSettingsEndpointProductCreateCustomerSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePaymentsSettingsCustomersByIdResponse parses an HTTP response from a DeletePaymentsSettingsCustomersByIdWithResponse call
func ParseDeletePaymentsSettingsCustomersByIdResponse(rsp *http.Response) (*DeletePaymentsSettingsCustomersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePaymentsSettingsCustomersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCustomerSettingsEndpointProductDeleteCustomerSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsCustomersByIdResponse parses an HTTP response from a GetPaymentsSettingsCustomersByIdWithResponse call
func ParseGetPaymentsSettingsCustomersByIdResponse(rsp *http.Response) (*GetPaymentsSettingsCustomersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsCustomersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetCustomerSettingsEndpointProductGetCustomerSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPaymentsSettingsCustomersByIdResponse parses an HTTP response from a PutPaymentsSettingsCustomersByIdWithResponse call
func ParsePutPaymentsSettingsCustomersByIdResponse(rsp *http.Response) (*PutPaymentsSettingsCustomersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPaymentsSettingsCustomersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCustomerSettingsEndpointProductUpdateCustomerSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPaymentsSettingsInvoicesResponse parses an HTTP response from a PostPaymentsSettingsInvoicesWithResponse call
func ParsePostPaymentsSettingsInvoicesResponse(rsp *http.Response) (*PostPaymentsSettingsInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsSettingsInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateInvoiceSettingsEndpointProductCreateInvoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsInvoicesForInvoiceByIdResponse parses an HTTP response from a GetPaymentsSettingsInvoicesForInvoiceByIdWithResponse call
func ParseGetPaymentsSettingsInvoicesForInvoiceByIdResponse(rsp *http.Response) (*GetPaymentsSettingsInvoicesForInvoiceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsInvoicesForInvoiceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetByInvoiceIdProductGetInvoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePaymentsSettingsInvoicesByIdResponse parses an HTTP response from a DeletePaymentsSettingsInvoicesByIdWithResponse call
func ParseDeletePaymentsSettingsInvoicesByIdResponse(rsp *http.Response) (*DeletePaymentsSettingsInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePaymentsSettingsInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteInvoiceSettingsEndpointProductDeleteInvoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPaymentsSettingsInvoicesByIdResponse parses an HTTP response from a GetPaymentsSettingsInvoicesByIdWithResponse call
func ParseGetPaymentsSettingsInvoicesByIdResponse(rsp *http.Response) (*GetPaymentsSettingsInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsSettingsInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetInvoiceSettingsEndpointProductGetInvoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPaymentsSettingsInvoicesByIdResponse parses an HTTP response from a PutPaymentsSettingsInvoicesByIdWithResponse call
func ParsePutPaymentsSettingsInvoicesByIdResponse(rsp *http.Response) (*PutPaymentsSettingsInvoicesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPaymentsSettingsInvoicesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateInvoiceSettingsEndpointProductUpdateInvoiceSettingsResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPaymentsSettingsByIdResponse parses an HTTP response from a PutPaymentsSettingsByIdWithResponse call
func ParsePutPaymentsSettingsByIdResponse(rsp *http.Response) (*PutPaymentsSettingsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPaymentsSettingsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountPaymentSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPricesResponse parses an HTTP response from a GetPricesWithResponse call
func ParseGetPricesResponse(rsp *http.Response) (*GetPricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPricesResponse parses an HTTP response from a PostPricesWithResponse call
func ParsePostPricesResponse(rsp *http.Response) (*PostPricesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPricesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePricesByIdResponse parses an HTTP response from a DeletePricesByIdWithResponse call
func ParseDeletePricesByIdResponse(rsp *http.Response) (*DeletePricesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePricesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPricesByIdResponse parses an HTTP response from a GetPricesByIdWithResponse call
func ParseGetPricesByIdResponse(rsp *http.Response) (*GetPricesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPricesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPricesByIdResponse parses an HTTP response from a PutPricesByIdWithResponse call
func ParsePutPricesByIdResponse(rsp *http.Response) (*PutPricesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPricesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240509ListResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProductsResponse parses an HTTP response from a PostProductsWithResponse call
func ParsePostProductsResponse(rsp *http.Response) (*PostProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Stable20240509ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetProductsByIdResponse parses an HTTP response from a GetProductsByIdWithResponse call
func ParseGetProductsByIdResponse(rsp *http.Response) (*GetProductsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240509ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutProductsByIdResponse parses an HTTP response from a PutProductsByIdWithResponse call
func ParsePutProductsByIdResponse(rsp *http.Response) (*PutProductsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProductsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240509ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProductsByIdArchiveResponse parses an HTTP response from a PostProductsByIdArchiveWithResponse call
func ParsePostProductsByIdArchiveResponse(rsp *http.Response) (*PostProductsByIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProductsByIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stable20240509ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSeatBalancesResponse parses an HTTP response from a GetSeatBalancesWithResponse call
func ParseGetSeatBalancesResponse(rsp *http.Response) (*GetSeatBalancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeatBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCustomerSeatBalancesEndpointListCustomerSeatBalancesPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSeatEventsResponse parses an HTTP response from a GetSeatEventsWithResponse call
func ParseGetSeatEventsResponse(rsp *http.Response) (*GetSeatEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeatEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSeatEventsEndpointEndpointResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSeatEventsResponse parses an HTTP response from a PostSeatEventsWithResponse call
func ParsePostSeatEventsResponse(rsp *http.Response) (*PostSeatEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSeatEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateSeatEventEndpointProductCreateSeatEventResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetSeatEventsByIdResponse parses an HTTP response from a GetSeatEventsByIdWithResponse call
func ParseGetSeatEventsByIdResponse(rsp *http.Response) (*GetSeatEventsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeatEventsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeatEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSeatMetricsResponse parses an HTTP response from a GetSeatMetricsWithResponse call
func ParseGetSeatMetricsResponse(rsp *http.Response) (*GetSeatMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeatMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSeatMetricEndpointProductListSeatMetricPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSeatMetricsResponse parses an HTTP response from a PostSeatMetricsWithResponse call
func ParsePostSeatMetricsResponse(rsp *http.Response) (*PostSeatMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSeatMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SeatMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSeatMetricsByIdResponse parses an HTTP response from a DeleteSeatMetricsByIdWithResponse call
func ParseDeleteSeatMetricsByIdResponse(rsp *http.Response) (*DeleteSeatMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSeatMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeatMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSeatMetricsByIdResponse parses an HTTP response from a GetSeatMetricsByIdWithResponse call
func ParseGetSeatMetricsByIdResponse(rsp *http.Response) (*GetSeatMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeatMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetSeatMetricEndpointProductGetSeatMetricResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSeatMetricsByIdResponse parses an HTTP response from a PutSeatMetricsByIdWithResponse call
func ParsePutSeatMetricsByIdResponse(rsp *http.Response) (*PutSeatMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSeatMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeatMetric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSequenceAccountsResponse parses an HTTP response from a GetSequenceAccountsWithResponse call
func ParseGetSequenceAccountsResponse(rsp *http.Response) (*GetSequenceAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSequenceAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSequenceAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSequenceAccountsByIdResponse parses an HTTP response from a GetSequenceAccountsByIdWithResponse call
func ParseGetSequenceAccountsByIdResponse(rsp *http.Response) (*GetSequenceAccountsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSequenceAccountsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SequenceAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSequenceAccountsByIdResponse parses an HTTP response from a PutSequenceAccountsByIdWithResponse call
func ParsePutSequenceAccountsByIdResponse(rsp *http.Response) (*PutSequenceAccountsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSequenceAccountsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SequenceAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxRatesResponse parses an HTTP response from a GetTaxRatesWithResponse call
func ParseGetTaxRatesResponse(rsp *http.Response) (*GetTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxRatesResponse parses an HTTP response from a PostTaxRatesWithResponse call
func ParsePostTaxRatesResponse(rsp *http.Response) (*PostTaxRatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TaxRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTaxRatesByIdResponse parses an HTTP response from a DeleteTaxRatesByIdWithResponse call
func ParseDeleteTaxRatesByIdResponse(rsp *http.Response) (*DeleteTaxRatesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxRatesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxRatesByIdResponse parses an HTTP response from a GetTaxRatesByIdWithResponse call
func ParseGetTaxRatesByIdResponse(rsp *http.Response) (*GetTaxRatesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRatesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTaxRatesByIdResponse parses an HTTP response from a PutTaxRatesByIdWithResponse call
func ParsePutTaxRatesByIdResponse(rsp *http.Response) (*PutTaxRatesByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaxRatesByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxRateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxRatesByIdArchiveResponse parses an HTTP response from a PostTaxRatesByIdArchiveWithResponse call
func ParsePostTaxRatesByIdArchiveResponse(rsp *http.Response) (*PostTaxRatesByIdArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRatesByIdArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchiveTaxRateEndpointProductArchiveTaxRateResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxRegistrationsResponse parses an HTTP response from a GetTaxRegistrationsWithResponse call
func ParseGetTaxRegistrationsResponse(rsp *http.Response) (*GetTaxRegistrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegistrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTaxRegistrationEndpointProductListTaxRegistrationPaginatedResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTaxRegistrationsResponse parses an HTTP response from a PostTaxRegistrationsWithResponse call
func ParsePostTaxRegistrationsResponse(rsp *http.Response) (*PostTaxRegistrationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTaxRegistrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateTaxRegistrationEndpointProductCreateTaxRegistrationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetTaxRegistrationsForCustomerByIdResponse parses an HTTP response from a GetTaxRegistrationsForCustomerByIdWithResponse call
func ParseGetTaxRegistrationsForCustomerByIdResponse(rsp *http.Response) (*GetTaxRegistrationsForCustomerByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegistrationsForCustomerByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaxRegistrationForCustomerProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxRegistrationsForMerchantByIdResponse parses an HTTP response from a GetTaxRegistrationsForMerchantByIdWithResponse call
func ParseGetTaxRegistrationsForMerchantByIdResponse(rsp *http.Response) (*GetTaxRegistrationsForMerchantByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegistrationsForMerchantByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaxRegistrationForMerchantProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaxRegistrationsByIdResponse parses an HTTP response from a DeleteTaxRegistrationsByIdWithResponse call
func ParseDeleteTaxRegistrationsByIdResponse(rsp *http.Response) (*DeleteTaxRegistrationsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaxRegistrationsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteTaxRegistrationEndpointProductDeleteTaxRegistrationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxRegistrationsByIdResponse parses an HTTP response from a GetTaxRegistrationsByIdWithResponse call
func ParseGetTaxRegistrationsByIdResponse(rsp *http.Response) (*GetTaxRegistrationsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxRegistrationsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaxRegistrationEndpointProductGetTaxRegistrationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutTaxRegistrationsByIdResponse parses an HTTP response from a PutTaxRegistrationsByIdWithResponse call
func ParsePutTaxRegistrationsByIdResponse(rsp *http.Response) (*PutTaxRegistrationsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTaxRegistrationsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateTaxRegistrationEndpointProductUpdateTaxRegistrationResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageEventsResponse parses an HTTP response from a GetUsageEventsWithResponse call
func ParseGetUsageEventsResponse(rsp *http.Response) (*GetUsageEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUsageEventEndpointEndpointResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsageEventsResponse parses an HTTP response from a PostUsageEventsWithResponse call
func ParsePostUsageEventsResponse(rsp *http.Response) (*PostUsageEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsageEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUsageEventEndpointProductCreateUsageEventResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUsageMetricsResponse parses an HTTP response from a GetUsageMetricsWithResponse call
func ParseGetUsageMetricsResponse(rsp *http.Response) (*GetUsageMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListUsageMetricEndpointProductResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsageMetricsResponse parses an HTTP response from a PostUsageMetricsWithResponse call
func ParsePostUsageMetricsResponse(rsp *http.Response) (*PostUsageMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsageMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateUsageMetricEndpointProductCreateUsageMetricResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUsageMetricsByIdResponse parses an HTTP response from a DeleteUsageMetricsByIdWithResponse call
func ParseDeleteUsageMetricsByIdResponse(rsp *http.Response) (*DeleteUsageMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsageMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteUsageMetricEndpointProductDeleteUsageMetricResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageMetricsByIdResponse parses an HTTP response from a GetUsageMetricsByIdWithResponse call
func ParseGetUsageMetricsByIdResponse(rsp *http.Response) (*GetUsageMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetUsageMetricEndpointProductGetUsageMetricResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUsageMetricsByIdResponse parses an HTTP response from a PutUsageMetricsByIdWithResponse call
func ParsePutUsageMetricsByIdResponse(rsp *http.Response) (*PutUsageMetricsByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsageMetricsByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateUsageMetricEndpointProductUpdateUsageMetricResponseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageMetricsByUsageMetricIdCalculateResponse parses an HTTP response from a GetUsageMetricsByUsageMetricIdCalculateWithResponse call
func ParseGetUsageMetricsByUsageMetricIdCalculateResponse(rsp *http.Response) (*GetUsageMetricsByUsageMetricIdCalculateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageMetricsByUsageMetricIdCalculateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UsageMetricCalculationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListSequenceUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsersByIdResponse parses an HTTP response from a DeleteUsersByIdWithResponse call
func ParseDeleteUsersByIdResponse(rsp *http.Response) (*DeleteUsersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SequenceUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersByIdResponse parses an HTTP response from a GetUsersByIdWithResponse call
func ParseGetUsersByIdResponse(rsp *http.Response) (*GetUsersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SequenceUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUsersByIdResponse parses an HTTP response from a PutUsersByIdWithResponse call
func ParsePutUsersByIdResponse(rsp *http.Response) (*PutUsersByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateSequenceUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
